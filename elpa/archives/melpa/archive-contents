
(1 (zzz-to-char . [(0 1 2) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single ((:commit . "b62414b155fe2e09d91b70059a909d1403d89acf") (:keywords "convenience") (:url . "https://github.com/mrkkrp/zzz-to-char"))]) (zygospore . [(0 0 3) nil "reversible C-x 1 (delete-other-windows)" single ((:commit . "1af5ee663f5a7aa08d96a77cacff834dcdf55ea8") (:url . "https://github.com/louiskottmann/zygospore.el"))]) (zotxt . [(0 1 34) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar ((:commit . "43c0c6d23b31126bac6b14bb85608180fd9c866f"))]) (zotelo . [(1 3) nil "Manage Zotero collections from emacs" single ((:commit . "56eaaa76f80bd15710e68af4a1e585394af987d3") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager") (:url . "https://github.com/vitoshka/zotelo"))]) (zop-to-char . [(1 1) ((cl-lib (0 5))) "A replacement of zap-to-char." single ((:commit . "816ea90337db0545a2f0a5079f4d7b3a2822af7d") (:url . "https://github.com/thierryvolpiatto/zop-to-char"))]) (zoom-window . [(0 5) ((emacs (24 3))) "Zoom window like tmux" single ((:commit . "eefe36d26e04a9f89aad27671d1f06e9d4736ac6") (:url . "https://github.com/syohex/emacs-zoom-window"))]) (zoom . [(0 2 1) ((emacs (24 4))) "Fixed and automatic balanced window layout" single ((:commit . "85deb722abb89f1758a24969680fc13b51344cb2") (:keywords "frames") (:url . "https://github.com/cyrus-and/zoom"))]) (zone-nyan . [(0 2 2) ((esxml (0 3 1))) "Zone out with nyan cat" single ((:commit . "e36875d83ad3dce14f23864688959fa0d98ba410") (:keywords "zone") (:url . "https://github.com/wasamasa/zone-nyan"))]) (zombie-trellys-mode . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single ((:commit . "9e99d444a387dd1634cab62ef802683f5bf5d907") (:keywords "languages"))]) (zerodark-theme . [(4 5) ((all-the-icons (2 0 0)) (magit (2 8 0)) (flycheck (29))) "A dark, medium contrast theme for Emacs" single ((:commit . "ceb46240636865e86f3fe26906957943ba7bd73c") (:keywords "themes") (:url . "https://github.com/NicolasPetton/zerodark-theme"))]) (zephir-mode . [(0 3 3) ((emacs (24 3))) "Major mode for editing Zephir code" single ((:commit . "243f0fb7fd1dfebf0f0bdf94046b72d1bea4f66c") (:keywords "languages") (:url . "https://github.com/sergeyklay/zephir-mode"))]) (zenburn-theme . [(2 5) nil "A low contrast color theme for Emacs." single ((:commit . "f031c785b469cf4356fddb997eccf60399e34235") (:url . "http://github.com/bbatsov/zenburn-emacs"))]) (youdao-dictionary . [(0 4) ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single ((:commit . "a6e44e4fb93cc1b9f1067f10cf854b0bfc3fe732") (:keywords "convenience" "chinese" "dictionary") (:url . "https://github.com/xuchunyang/youdao-dictionary.el"))]) (yoshi-theme . [(6 1 0) nil "Theme named after my cat" single ((:commit . "b140d3adce4e8e7ff7b0daaa6684bd7065e4819b") (:keywords "faces") (:url . "http://projects.ryuslash.org/yoshi-theme/"))]) (yesql-ghosts . [(0 1 0) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single ((:commit . "bd834e97f263f9f981758c1462bc6297a83ca852"))]) (ydk-mode . [(1 0 0) nil "Language support for Yu-Gi-Oh! deck files" single ((:commit . "f3f125b29408e0b0a34fec27dcb7c02c5dbfd04e") (:keywords "faces" "games" "languages" "ydk" "yugioh" "yu-gi-oh") (:url . "https://github.com/jacksonrayhamilton/ydk-mode"))]) (ycmd . [(1 2) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0)) (deferred (0 5 1)) (cl-lib (0 6 1)) (let-alist (1 0 5)) (request (0 3 0)) (request-deferred (0 3 0)) (pkg-info (0 6))) "emacs bindings to the ycmd completion server" tar ((:commit . "d042a673b4d717c3ca9d641f120bfe16c994c740") (:url . "https://github.com/abingham/emacs-ycmd"))]) (yaxception . [(0 3 3) nil "Provide framework about exception like Java for Elisp" single ((:commit . "4e94cf3e0b9b5631b0e90eb4b7de597ee7185875") (:keywords "exception" "error" "signal") (:url . "https://github.com/aki2o/yaxception"))]) (yatex . [(1 80) nil "Yet Another tex-mode for emacs //野鳥//" tar nil]) (yatemplate . [(3 0) ((yasnippet (0 8 1)) (emacs (24 3))) "File templates with yasnippet" tar ((:commit . "c1de31d2b16d98af197a4392b6481346ab4e8d57") (:keywords "files" "convenience") (:url . "https://github.com/mineo/yatemplate"))]) (yasnippet-snippets . [(0 4) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar ((:commit . "a5fac2b87651991c0915a12fdb0d4e8e490d8b9b") (:keywords "snippets"))]) (yasnippet . [(0 13 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar ((:commit . "5a29fe67d70de3749e30ebb37206395b4d1a51a8") (:keywords "convenience" "emulation") (:url . "http://github.com/joaotavora/yasnippet"))]) (yascroll . [(0 1) nil "Yet Another Scroll Bar Mode" single ((:commit . "0a8b531b3a3c8afe7235c8c212e08bfe2021a629") (:keywords "convenience"))]) (yarn-mode . [(1 0) ((emacs (24 3))) "Major mode for yarn.lock files." single ((:commit . "99891000efe31214b065fa9446cd5e68c5c42ed8") (:keywords "convenience") (:url . "https://github.com/anachronic/yarn-mode"))]) (yard-mode . [(0 1) nil "Minor mode for Ruby YARD comments" single ((:commit . "78792f6a6fbff4f1bc955f494fdb11378e7f8095") (:url . "https://github.com/pd/yard-mode.el"))]) (yapfify . [(0 0 6) nil "(automatically) format python buffers using YAPF." single ((:commit . "9e63a9135bd8dbfbee55819837a3aa0d119c5e6f") (:url . "https://github.com/JorisE/yapfify"))]) (yankpad . [(1 6) nil "Paste snippets from an org-mode file" single ((:commit . "d2ea6920a2444f1ce6f53947640446b8e16f84b7") (:keywords "abbrev" "convenience") (:url . "http://github.com/Kungsgeten/yankpad"))]) (yang-mode . [(0 9 8) nil "major mode for editing YANG files" single ((:commit . "340aec635e359609b22f7e94df15af1af2b070f6"))]) (yaml-mode . [(0 0 13) ((emacs (24 1))) "Major mode for editing YAML files" single ((:commit . "2ace378bef2047a980fba0e42e3e6b5d990f2c66") (:keywords "data" "yaml"))]) (yagist . [(0 8 12) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single ((:commit . "97723a34750ccab5439eb9f6a2f67e4e0e234167") (:keywords "tools") (:url . "https://github.com/mhayashi1120/yagist.el"))]) (yafolding . [(0 4 0) nil "Yet another folding extension for Emacs" single ((:commit . "57c015ddd7c3454571c80825bc5391d7a10fa1d7") (:keywords "folding"))]) (xtest . [(1 1 0) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:commit . "b227414d714e7baddef79bd306a43024b9a34d45") (:keywords "testing" "ert") (:url . "https://github.com/promethial/xtest"))]) (xterm-color . [(1 7) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single ((:commit . "42374a98f1039e105cad9f16ce585dffc96a3f1c") (:keywords "faces") (:url . "https://github.com/atomontage/xterm-color"))]) (xref-js2 . [(1 5) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single ((:commit . "7e2bc6a8dad08a493d11d3554f6374584846b9e6") (:keywords "javascript" "convenience" "tools") (:url . "https://github.com/NicolasPetton/xref-js2"))]) (xquery-tool . [(0 1 10) nil "A simple interface to saxonb's xquery." single ((:commit . "b81b5862e8541aca5231840eb176afad7ab55cf3") (:keywords "xml" "xquery" "emacs") (:url . "https://github.com/paddymcall/xquery-tool.el"))]) (xmlgen . [(0 5) nil "A DSL for generating XML." single ((:commit . "dba66681f0c5e621a9e70e8afb34903c9ffe93c4"))]) (xml-rpc . [(1 6 12) nil "An elisp implementation of clientside XML-RPC" single ((:commit . "0ab093d60140d19e31d217c8abdc7dbdac944486") (:keywords "xml" "rpc" "network") (:url . "http://github.com/hexmode/xml-rpc-el"))]) (xkcd . [(1 1) ((json (1 3))) "View xkcd from Emacs" single ((:commit . "2c538d41a9728939cc5e8292faa78ed50997877d") (:keywords "xkcd" "webcomic") (:url . "https://github.com/vibhavp/emacs-xkcd"))]) (xcscope . [(1 3) nil "cscope interface for (X)Emacs" single ((:commit . "1e4c8e60eb841a3ecb56ff4115b6a8ae5c0bf779") (:keywords "languages" "c") (:url . "https://github.com/dkogan/xcscope.el"))]) (xcode-project . [(1 0 0) ((emacs (25))) "A package for reading Xcode project files." tar ((:commit . "f5548a26a1afc0b0d873556c25f6d8b6b9c2aa8c") (:keywords "languages" "tools") (:url . "https://github.com/nhojb/xcode-project.git"))]) (xbm-life . [(0 1 3) nil "A XBM version of Conway's Game of Life" single ((:commit . "bde2b3730a02d237f7d95a8e3f3722f23f2d9201") (:keywords "games") (:url . "https://github.com/wasamasa/xbm-life"))]) (x86-lookup . [(1 2 0) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single ((:commit . "609b2ba70dc5a246ac9b4b5f89eb5ef4331519bf") (:url . "https://github.com/skeeto/x86-lookup"))]) (wttrin . [(0 1 0) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" single ((:commit . "d595240d92788791da2218d12efd6a77eee06217") (:keywords "comm" "weather" "wttrin") (:url . "https://github.com/bcbcarl/emacs-wttrin"))]) (wsd-mode . [(0 5 0) nil "Emacs major-mode for www.websequencediagrams.com" tar ((:commit . "b5e8ea0daeaa52f2ea6349e09902bd3216e96258") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml") (:url . "https://github.com/josteink/wsd-mode"))]) (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." single ((:commit . "323b651dd70ee40a25accc940b8f80c3a3185205") (:url . "https://github.com/lewang/ws-butler"))]) (writeroom-mode . [(3 7) ((emacs (24 1)) (visual-fill-column (1 9))) "Minor mode for distraction-free writing" tar ((:commit . "d3252f54c8f9f37a19d6a21fb2291c3da7a7121a") (:keywords "text"))]) (writegood-mode . [(2 0 3) nil "Polish up poor writing on the fly" single ((:commit . "b71757ec337e226909fb0422f0224e31acc71733") (:keywords "writing" "weasel-words" "grammar") (:url . "http://github.com/bnbeckwith/writegood-mode"))]) (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:commit . "5a910ad23ebb0649e644bf62ad042587341da5da") (:keywords "speed" "convenience") (:url . "http://github.com/rejeep/wrap-region"))]) (worf . [(0 1 0) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0))) "A warrior does not press so many keys! (in org-mode)" single ((:commit . "f36755447b588b739b2bf6ab0fb5eb5f4d8db3df") (:keywords "lisp") (:url . "https://github.com/abo-abo/worf"))]) (wordsmith-mode . [(1 0 0) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single ((:commit . "41b10f2fe3589da9812395cb417c3dcf906f0969"))]) (wordgen . [(0 1 4) ((emacs (24)) (cl-lib (0 5))) "Random word generator" single ((:commit . "aacad928ae99a953e034a831dfd0ebdf7d52ac1d") (:url . "https://github.com/Fanael/wordgen.el"))]) (wonderland . [(0 1 1) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single ((:commit . "28cf6b37000c395ece9519db53147fb826a42bc4") (:keywords "configuration" "profile" "wonderland") (:url . "http://github.com/kurisuwhyte/emacs-wonderland"))]) (wolfram . [(1 1 1) nil "Wolfram Alpha Integration" single ((:commit . "6b5dceae3fd6cdb4d7562510deeafa02c93c010b") (:keywords "math"))]) (wn-mode . [(1 4) ((emacs (24))) "numeric window switching shortcuts" single ((:commit . "6e7029b0d5773a79914a289937be068784931cad") (:keywords "buffers" "windows" "switching-windows") (:url . "https://github.com/luismbo/wn-mode"))]) (with-simulated-input . [(2 2) ((emacs (24 4)) (seq (2 0)) (s (0))) "A macro to simulate user input non-interactively" single ((:commit . "9efeb236c8f6887a8591d6241962c37266d8e726") (:keywords "lisp" "tools" "extensions"))]) (with-editor . [(2 7 3) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar ((:commit . "ad5bb005ed3afec2d8b9b2bc1df19fb9b5e2dd84") (:keywords "tools") (:url . "https://github.com/magit/with-editor"))]) (wispjs-mode . [(0 2 0) ((clojure-mode (0))) "Major mode for Wisp code." single ((:commit . "be094c3c3223c07b26b5d8bb8fa7aa6866369b3f") (:url . "https://github.com/krisajenkins/wispjs-mode"))]) (wisp-mode . [(0 9 8) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winum . [(2 0 0) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." single ((:commit . "c56d1cdb8d1723eb4c0d7a7eb3ecd2697739146c") (:keywords "convenience" "frames" "windows" "multi-screen") (:url . "http://github.com/deb0ch/winum.el"))]) (winring . [(5 1) nil "Window configuration rings" single ((:commit . "f2d072bd446b73e93b127523f19ea82b99b9267f") (:keywords "frames" "tools") (:url . "https://gitlab.com/warsaw/winring"))]) (windsize . [(0 1) nil "Simple, intuitive window resizing" single ((:commit . "014b0836f9ffe45fa7e0ccc84576fbef74815a59") (:keywords "window" "resizing" "convenience") (:url . "http://github.com/grammati/windsize"))]) (window-purpose . [(1 6) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar ((:commit . "00c253778d8e845bdc17a350c22ea157c5871b41") (:keywords "frames") (:url . "https://github.com/bmag/emacs-purpose"))]) (window-numbering . [(1 1 2) nil "No description available." single ((:commit . "653afce73854d629c2b9d63dad73126032d6a24c"))]) (window-layout . [(1 4) nil "window layout manager" single ((:commit . "cd2e4f967b610c2bbef53182829e47250d027056") (:keywords "window" "layout"))]) (window-end-visible . [(0 1 0) nil "Find the last visible point in a window" single ((:commit . "bdc3d182e5f76e75f1b8cc49357194b36e48b67c") (:keywords "extensions") (:url . "http://github.com/rolandwalker/window-end-visible"))]) (win-switch . [(1 1 4) nil "fast, dynamic bindings for window-switching/resizing" single ((:commit . "954eb5e4c5737f0c06368c42a7f1c3dd374d782f") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient") (:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/"))]) (wiki-nav . [(1 0 2) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:commit . "cd0bf4a3c2f224d851e6ed8a54a6e80c129b225f") (:keywords "mouse" "button" "hypermedia" "navigation") (:url . "http://github.com/rolandwalker/button-lock"))]) (widget-mvc . [(0 0 2) nil "MVC framework for the emacs widgets" single ((:commit . "2576e6f0c35d8dedfa9c2cd6ea4fb4c14cb72b63") (:keywords "lisp" "widget"))]) (whole-line-or-region . [(1 3 1) nil "operate on current line if region undefined" single ((:commit . "a60e022b30c2f4d3118bcaef1adb77b90e0ca941") (:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines"))]) (whizzml-mode . [(0 3 0) ((emacs (24 4))) "Programming mode for editing WhizzML files" tar ((:commit . "eca56d0fd51c5f41ef3e84e363f66d717ea5b160") (:keywords "languages" "lisp"))]) (whitespace-cleanup-mode . [(0 10) nil "Intelligently call whitespace-cleanup on save" single ((:commit . "e1e250aa6f5b1a526778c7a501cdec98ba29c0a4") (:keywords "convenience") (:url . "https://github.com/purcell/whitespace-cleanup-mode"))]) (whitaker . [(0 3) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single ((:commit . "28172edce0f727f0f7f17d8ba71d5510d877bb45") (:keywords "processes"))]) (which-key . [(3 3 0) ((emacs (24 4))) "Display available keybindings in popup" single ((:commit . "ff79dfff66f880885c5893dd6fd05dc51173a476") (:url . "https://github.com/justbur/emacs-which-key"))]) (wgrep-pt . [(2 1 10) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el"))]) (wgrep-helm . [(2 1 10) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el"))]) (wgrep-ag . [(2 1 10) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el"))]) (wgrep-ack . [(2 1 10) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el"))]) (wgrep . [(2 1 10) nil "Writable grep buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:keywords "grep" "edit" "extensions") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el"))]) (weibo . [(1 0) nil "No description available." tar ((:commit . "a8af467e5660a35342029c2796de99cd551454b2"))]) (weechat . [(0 4 0) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar ((:commit . "a1bda40513f0ea94a8a85ee122a475475a03f6ef"))]) (websocket . [(1 10) ((cl-lib (0 5))) "Emacs WebSocket client and server" single ((:commit . "0d96ba2ff5a25c6cd6c66f417cc9b5f38a4308ba") (:keywords "communication" "websocket" "server"))]) (webpaste . [(2 1 0) ((emacs (24 4)) (request (0 2 0)) (cl-lib (0 5))) "Paste to pastebin-like services" single ((:commit . "2da60b8857d107721b089346121a7d51296a58bf") (:keywords "convenience" "comm" "paste") (:url . "https://github.com/etu/webpaste.el"))]) (weblogger . [(1 4 5) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog"))]) (web-search . [(0 1 1) ((emacs (24 3))) "Open a web search" tar ((:commit . "72fea0e7429ed3d6932a497b568335316d8ef283") (:keywords "web" "search") (:url . "https://github.com/xuchunyang/web-search.el"))]) (web-mode-edit-element . [(2 1) ((emacs (24 4)) (web-mode (14))) "Helper-functions for attribute- and element-handling" tar ((:commit . "8b8ac07aa8c920dafd94c96a51effb0d6c0ed1ce") (:keywords "languages" "convenience") (:url . "https://github.com/jtkDvlp/web-mode-edit-element"))]) (web-mode . [(16) ((emacs (23 1))) "major mode for editing web templates" single ((:commit . "3ff506aae50a47b277f2b95ff7b7a7c596664e6a") (:keywords "languages") (:url . "http://web-mode.org"))]) (web-completion-data . [(0 2) nil "Shared completion data for ac-html and company-web" tar ((:commit . "c272c94e8a71b779c29653a532f619acad433a4f") (:keywords "html" "auto-complete" "company") (:url . "https://github.com/osv/web-completion-data"))]) (web-beautify . [(0 3 2) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ((:commit . "aa95055224c24f38736716809fec487cd817c38d") (:url . "https://github.com/yasuyk/web-beautify"))]) (weather-metno . [(0 1 0) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar ((:commit . "b59680c1ab908b32513954034ba894dfb8564dd8"))]) (wcheck-mode . [(2016 1 30) nil "General interface for text checkers" tar ((:commit . "adb9dd9f39cb0bd0000d140d6e778c4864dfde08"))]) (wc-mode . [(1 3) nil "Running word count with goals (minor mode)" single ((:commit . "122f90bd1d422a84cc50acabd350d44d39ddeb69") (:url . "https://github.com/bnbeckwith/wc-mode"))]) (wc-goal-mode . [(2 1) nil "Running word count with goals (minor mode)" single ((:commit . "a8aa227b1a692dd6399855add84b5e37f6c5d9cb") (:url . "https://github.com/bnbeckwith/wc-goal-mode"))]) (wandbox . [(0 6 4) ((emacs (24)) (request (0 3 0)) (s (1 10 0))) "Wandbox client" tar ((:commit . "e002fe41f2cd9b4ce2b1dc80b83301176e9117f1") (:keywords "tools") (:url . "https://github.com/kosh04/emacs-wandbox"))]) (wacspace . [(0 4 2) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar ((:commit . "b951995c204ff23699d2bda515a96221147a725d"))]) (w32-browser . [(235) nil "Run Windows application associated with a file." single ((:commit . "a8126b60bf18193e8e4ec6f699b5694b6f71a062") (:keywords "mouse" "dired" "w32" "explorer") (:url . "http://www.emacswiki.org/w32-browser.el"))]) (vue-mode . [(0 4) ((mmm-mode (0 5 5)) (vue-html-mode (0 2)) (ssass-mode (0 2)) (edit-indirect (0 1 4))) "Major mode for vue component based on mmm-mode" single ((:commit . "48ff04657613f39848d0e66e9dd367aa2dc19e89") (:keywords "languages"))]) (vue-html-mode . [(0 2) nil "Major mode for editing Vue.js templates" single ((:commit . "361a9fa117f044c3072dc5a7344ff7be31725849") (:keywords "languages" "vue" "template") (:url . "http://github.com/AdamNiederer/vue-html-mode"))]) (volatile-highlights . [(1 11) nil "Minor mode for visual feedback on some operations." single ((:commit . "fb2abc2d4d4051a9a6b7c8de2fe7564161f01f24") (:keywords "emulations" "convenience" "wp") (:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el"))]) (voca-builder . [(0 2 0) nil "No description available." single ((:commit . "224402532da28e45edd398fda61ecbddb97d22d3"))]) (vlf . [(1 7 1) nil "View Large Files" tar ((:commit . "a01e9ed416cd81ccddebebbf05d4ca80060b07dc") (:keywords "large files" "utilities") (:url . "https://github.com/m00natic/vlfi"))]) (visual-regexp-steroids . [(1 1 0) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar ((:commit . "a6420b25ec0fbba43bf57875827092e1196d8a9e") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback") (:url . "https://github.com/benma/visual-regexp-steroids.el/"))]) (visual-regexp . [(1 1 1) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single ((:commit . "b3096c2d391ff4e28a2a4e8cd82efbf11071ea85") (:keywords "regexp" "replace" "visual" "feedback") (:url . "https://github.com/benma/visual-regexp.el/"))]) (visual-fill-column . [(1 11) ((emacs (24 3))) "fill-column for visual-line-mode" single ((:commit . "57c2a72d46900117ea92e0a01b97e19481800503"))]) (visible-mark . [(0 1) nil "Make marks visible." single ((:commit . "c1852e13b6b61982738b56977a452ec9026faf1b") (:keywords "marking" "color" "faces") (:url . "https://gitlab.com/iankelling/visible-mark"))]) (virtualenvwrapper . [(0 1 0) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single ((:commit . "5649028ea0c049cb7dfa2105285dee9c00d189fb") (:keywords "python" "virtualenv" "virtualenvwrapper") (:url . "http://github.com/porterjamesj/virtualenvwrapper.el"))]) (vimish-fold . [(0 2 3) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single ((:commit . "e631352fbf910f692807afe38a2b6a7882a403a8") (:keywords "convenience") (:url . "https://github.com/mrkkrp/vimish-fold"))]) (vim-region . [(0 3 0) ((expand-region (20140127))) "Select region as vim" single ((:commit . "e5359cc584a0cfa9270a76866a5eff7d3f44eb3d") (:url . "https://github.com/ongaeshi/emacs-vim-region"))]) (vhdl-tools . [(5 9) ((ggtags (0 8 12)) (emacs (26 1)) (outshine (2 0)) (helm (2 9 6))) "Utilities for navigating vhdl sources." single ((:commit . "4e9df06c3519be22f1f713d18c80d325a5b0c3d2") (:keywords "languages" "convenience") (:url . "https://github.com/csantosb/vhdl-tools/wiki"))]) (vertigo . [(1 0) ((dash (2 11 0))) "Jump across lines using the home row." single ((:commit . "ebfa068d9e2fc39ba6d1744618c4e31dad6f629b") (:keywords "vim" "vertigo") (:url . "https://github.com/noctuid/vertigo.el"))]) (vector-utils . [(0 1 2) nil "Vector-manipulation utility functions" single ((:commit . "2bd63c8ade1a2b6f8aac403c5f25adda2215a685") (:keywords "extensions") (:url . "http://github.com/rolandwalker/vector-utils"))]) (vdirel . [(0 2 0) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single ((:commit . "4232676e93ca5ace8e51f6605bec223c3205beea") (:keywords "vdirsyncer" "vdir" "vcard" "carddav" "contact" "addressbook" "helm"))]) (vdiff-magit . [(0 3 1) ((emacs (24 4)) (vdiff (0 3)) (magit (2 10 0))) "magit integration for vdiff" single ((:commit . "5e245b6a078860d3b0f58436efec8ff6b4f485db") (:keywords "diff") (:url . "https://github.com/justbur/emacs-vdiff"))]) (vdiff . [(0 2 2) ((emacs (24 4)) (hydra (0 13 0))) "A diff tool similar to  vimdiff" single ((:commit . "f55acdbfcbb14e463d0850cfd041614c7002669e") (:keywords "diff") (:url . "https://github.com/justbur/emacs-vdiff"))]) (vcomp . [(0 3 1) nil "compare version strings" single ((:commit . "a12363c3a66576b68955abcadf7280de32eaa051") (:keywords "versions") (:url . "https://github.com/tarsius/vcomp"))]) (vc-msg . [(0 0 4) ((emacs (24 3)) (popup (0 5 0))) "Show commit information of current line" tar ((:commit . "091f3cf15ecb35bb4dc5de1ef7229f78735d9aee") (:keywords "git" "vc" "svn" "hg" "messenger") (:url . "http://github.com/redguardtoo/vc-msg"))]) (vc-darcs . [(1 19) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vbasense . [(0 1 1) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:commit . "8c61a492d7c15218ae1a96e2aebfe6f78bfff6db") (:keywords "vba" "completion") (:url . "https://github.com/aki2o/emacs-vbasense"))]) (vagrant . [(0 6 1) nil "Manage a vagrant box from emacs" single ((:commit . "ef3022d290ee26597e21b17ab87acbd8d4f1071f") (:keywords "vagrant" "chef") (:url . "https://github.com/ottbot/vagrant.el"))]) (v2ex-mode . [(0 2) ((cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3))) "Major mode for visit http://v2ex.com/ site." single ((:commit . "7a59ac3be2b08d873ec271ec7a3d5ace309c1407") (:keywords "v2ex" "v2ex.com") (:url . "https://github.com/aborn/v2ex-mode"))]) (utop . [(2 1 0) ((emacs (24))) "Universal toplevel for OCaml" single ((:commit . "1b4bd052c6513d38f6cc626c24665637d25fdc07") (:keywords "ocaml" "languages") (:url . "https://github.com/diml/utop"))]) (usql . [(0 0 3) ((emacs (25 1))) "U-SQL support for sql-mode" single ((:commit . "bfaf428b366a9a185eef84f0d645a98dc918fe3d") (:keywords "languages") (:url . "https://github.com/nickbarwell/usql.el"))]) (use-package-el-get . [(0 1) ((use-package (1 0))) "el-get support for use package" single ((:commit . "f33c448ed43ecb003b60ff601ee7ef9b08cff947") (:keywords "dotemacs" "startup" "speed" "config" "package" "tools") (:url . "https://github.com/edvorg/use-package-el-get"))]) (use-package . [(2 3) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:commit . "cd58b268a8a025451c11c3cb1ba18d4f27f245da") (:keywords "dotemacs" "startup" "speed" "config" "package") (:url . "https://github.com/jwiegley/use-package"))]) (uptimes . [(3 6) ((cl-lib (0 5)) (emacs (24))) "Track and display emacs session uptimes." single ((:commit . "5e81f8bb419836602819045e7d5a74b76ad3e69c") (:keywords "processes" "uptime") (:url . "https://github.com/davep/uptimes.el"))]) (unkillable-scratch . [(0 1) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single ((:commit . "4451f82eb98f9b159745ca1a79ac60b9d224fd5b") (:keywords "scratch"))]) (unify-opening . [(2 1 0) ((emacs (24 4))) "Unify the mechanism to open files" single ((:commit . "502469ddba6d8d52159f53976265f7d956b6b17c") (:url . "https://github.com/DamienCassou/unify-opening"))]) (unicode-whitespace . [(0 2 4) ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ((:commit . "6d29f25d46b3344c74ce289fc80b3d4fc17ed6db") (:keywords "faces" "wp" "interface") (:url . "http://github.com/rolandwalker/unicode-whitespace"))]) (unicode-progress-reporter . [(0 5 4) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:commit . "f4705332412b12fc72ca868b77c78465561bda75") (:keywords "interface") (:url . "http://github.com/rolandwalker/unicode-progress-reporter"))]) (unicode-fonts . [(0 4 8) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single ((:commit . "a36597d83e0248bd0e6b2c1d5fb95bff72add527") (:keywords "i18n" "faces" "frames" "wp" "interface") (:url . "http://github.com/rolandwalker/unicode-fonts"))]) (unicode-escape . [(1 1) ((emacs (24)) (names (20151201 0)) (dash (2 12 1))) "Escape/Unescape unicode notations" single ((:commit . "b9cee7af45be62119b97033dc639bd1b5ed858f3") (:keywords "i18n" "unicode") (:url . "https://github.com/kosh04/unicode-escape.el"))]) (unicode-enbox . [(0 1 4) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ((:commit . "ff313f6778bb96481c0ee3291b07a7db46f21ff5") (:keywords "extensions" "interface") (:url . "http://github.com/rolandwalker/unicode-enbox"))]) (unfill . [(0 2) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single ((:commit . "88186dce0de69e8f4aeaf2bfdc77d62210f19cd8") (:keywords "utilities") (:url . "https://github.com/purcell/unfill"))]) (underwater-theme . [(1 1 0) nil "A gentle, deep blue color theme" single ((:commit . "1fbd4ecd4538256c6c46f9638f883072c73ac927") (:keywords "faces"))]) (underline-with-char . [(3 0 0) ((emacs (24))) "Underline with a char" single ((:commit . "c2f4870aff70efe70a8d1b089e56d3a2d6d048b9") (:keywords "convenience"))]) (undercover . [(0 6 1) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs Lisp" single ((:commit . "86f856c799aacfd48d2eb42d1a6afda0e6e49845") (:keywords "lisp" "tests" "coverage" "tools") (:url . "https://github.com/sviridov/undercover.el"))]) (ucs-utils . [(0 8 4) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ((:commit . "cbfd42f822bf5717934fa2d92060e6e24a813433") (:keywords "i18n" "extensions") (:url . "http://github.com/rolandwalker/ucs-utils"))]) (ubuntu-theme . [(4 2) nil "A theme inspired by the default terminal colors in Ubuntu" single ((:commit . "41f09ca6c203da93bdadb2077556efd48e3b5d5a") (:url . "http://github.com/rocher/ubuntu-theme"))]) (typo . [(1 1) nil "Minor mode for typographic editing" single ((:commit . "e72171e4eb0b9ec80b9dabc3198d137d9fb4f972") (:keywords "convenience" "wp") (:url . "https://github.com/jorgenschaefer/typoel"))]) (typit . [(0 2 1) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar ((:commit . "a4e3147dedac5535bdc8b06aca00f34f14f26e35") (:keywords "games") (:url . "https://github.com/mrkkrp/typit"))]) (typescript-mode . [(0 3) nil "Major mode for editing typescript" single ((:commit . "7a5c74d88e3c5513cc4431a837003736f905a75e") (:keywords "typescript" "languages") (:url . "http://github.com/ananthakumaran/typescript.el"))]) (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" single ((:commit . "00bc20db78901204a67722ab47482660e36d0463") (:url . "https://github.com/typedclojure/typed-clojure-mode"))]) (twittering-mode . [(3 0 0) nil "Major mode for Twitter" single ((:commit . "27e7f3aab238bd0788fd3b471c645c3ceceb0f13") (:keywords "twitter" "web") (:url . "http://twmode.sf.net/"))]) (twilight-anti-bright-theme . [(0 3 0) nil "A soothing Emacs 24 light-on-dark theme" single ((:commit . "16d4ff2606789b506f0d2f53d12f02d5b1b64f9b") (:keywords "themes") (:url . "https://github.com/jimeh/twilight-anti-bright-theme.el"))]) (turing-machine . [(0 2 0) ((emacs (24 4))) "Single-tape Turing machine simulator" single ((:commit . "ad1dccc9c445f9e4465e1c67cbbfea9583153047") (:keywords "turing" "machine" "simulation") (:url . "http://github.com/therockmandolinist/turing-machine"))]) (tup-mode . [(1 3 1) nil "Major mode for editing files for Tup" single ((:commit . "945af9c8e6c402e10cd3bf8e28a9591174023d6d") (:url . "https://github.com/ejmr/tup-mode"))]) (tumble . [(1 5) nil "an Tumblr mode for Emacs" single ((:commit . "a1db6dac5720b9f468a79e0efce04f77c0a458e3") (:keywords "tumblr"))]) (tuareg . [(2 1 0) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ((:commit . "92c1dea250038d1590ab6ce76a6e099fef10d450") (:keywords "ocaml" "languages") (:url . "https://github.com/ocaml/tuareg"))]) (tss . [(0 6 0) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:commit . "1f302deea3d74462c71a9c62031f48b753e8915f") (:keywords "typescript" "completion") (:url . "https://github.com/aki2o/emacs-tss"))]) (try . [(0 0 1) ((emacs (24))) "Try out Emacs packages." single ((:commit . "271b0a362cadf44d0694628b9e213f54516ef913") (:keywords "packages") (:url . "http://github.com/larstvei/try"))]) (truthy . [(0 2 8) ((list-utils (0 4 2))) "Test the content of a value" single ((:commit . "276a7e6b13606d28e4f2e423bb1ea30904c5def3") (:keywords "extensions") (:url . "http://github.com/rolandwalker/truthy"))]) (trr . [(2 0 0) nil "a type-writing training program on GNU Emacs." tar ((:commit . "7500ae0a05a3e26888949208afcd0185cc1b1404") (:keywords "games" "faces"))]) (treepy . [(1 0 0) ((emacs (25 1))) "Generic tree traversal tools" single ((:commit . "282fbc94747fe2a00d36e2a74d147c8fa0ac4be7") (:keywords "lisp" "maint" "tools") (:url . "https://github.com/volrath/treepy.el"))]) (treemacs-projectile . [(2 1 1) ((projectile (0 14 0)) (treemacs (0))) "Projectile integration for treemacs" single ((:commit . "9d71da13795762a623a42222af06033ffa7c073b") (:url . "https://github.com/Alexander-Miller/treemacs"))]) (treemacs-evil . [(2 1 1) ((evil (1 2 12)) (treemacs (0))) "Evil mode integration for treemacs" single ((:commit . "9d71da13795762a623a42222af06033ffa7c073b") (:url . "https://github.com/Alexander-Miller/treemacs"))]) (treemacs . [(2 1 1) ((emacs (25 3)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 2)) (hydra (0 13 2)) (ht (2 2))) "A tree style file explorer package" tar ((:commit . "9d71da13795762a623a42222af06033ffa7c073b") (:url . "https://github.com/Alexander-Miller/treemacs"))]) (travis . [(0 6 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar ((:commit . "c8769d3db10ed4604969049e3bd276afa0a0138e") (:keywords "travis") (:url . "https://github.com/nlamirault/emacs-travis"))]) (transmission . [(0 12 1) ((emacs (24 4)) (let-alist (1 0 5))) "Interface to a Transmission session" single ((:commit . "03a36853f141387654b7cb9217c7417db096a083") (:keywords "comm" "tools"))]) (tracking . [(2 10) nil "Buffer modification tracking" tar ((:commit . "fedfa7eb8516a53fa70b6a1f4fce4b5ab66ea91f") (:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking"))]) (traad . [(3 1 1) ((dash (2 13 0)) (deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (virtualenvwrapper (20151123))) "emacs interface to the traad refactoring server." single ((:commit . "1f05cb4e5e96a90d2fb2bbc93093084327c40cf2") (:url . "https://github.com/abingham/traad"))]) (toxi-theme . [(0 1 2) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://bitbucket.org/postspectacular/toxi-theme/"))]) (tox . [(0 4 0) nil "Launch current python test with tox" single ((:commit . "7655eb254038d5e34433e8a9d66b3ffc9c72e40c") (:keywords "convenience" "tox" "python" "tests") (:url . "https://github.com/chmouel/tox.el"))]) (total-lines . [(0 2 0) ((emacs (24 3))) "Keep track of a buffer's total number of lines" single ((:commit . "58a9fb0ffca63e3dfb3b27c7d91b4630e422903b") (:keywords "convenience" "mode-line") (:url . "https://github.com/hinrik/total-lines"))]) (toc-org . [(1 0 1) nil "add table of contents to org-mode files (formerly, org-toc)" single ((:commit . "a0e8ca05e806e5074b8603985da7f18b92c15856") (:keywords "org-mode" "org-toc" "toc-org" "org" "toc" "table" "of" "contents") (:url . "https://github.com/snosov1/toc-org"))]) (timonier . [(0 1 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (hydra (0 13 6)) (request (0 2 0)) (all-the-icons (2 0 0))) "Timonier, Manage Kubernetes Applications from Emacs" tar ((:commit . "33ca5887a1d1b63349177237e9edfb73546511a5") (:keywords "kubernetes" "docker") (:url . "https://github.com/nlamirault/timonier"))]) (timesheet . [(0 4 0) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar ((:commit . "2ed6fea9b508eb7eaff659d9a34a09ba064d4df8") (:keywords "org" "timesheet") (:url . "https://github.com/tmarble/timesheet.el"))]) (timer-revert . [(0 1) nil "minor mode to revert buffer for a given time interval." single ((:commit . "31ad8d94b85807cd9f63fcba0c90c3e9a9515fa2") (:keywords "timer" "revert" "auto-revert.") (:url . "http://github.com/yyr/timer-revert"))]) (tide . [(2 8 3 1) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar ((:commit . "0c624e7f02fb8f5b78ec35436d7b2f3f42d46dea") (:keywords "typescript") (:url . "http://github.com/ananthakumaran/tide"))]) (tidal . [(0 9 8) ((haskell-mode (16)) (emacs (24))) "Interact with TidalCycles for live coding patterns" single ((:commit . "f8af7bdbda547ebd12cf5c0ee1327f33cd9aa93f") (:keywords "tools") (:url . "https://github.com/tidalcycles/Tidal"))]) (tickscript-mode . [(0 4 1) ((emacs (24 1))) "A major mode for Tickscript files" single ((:commit . "6e7564593d7735acc9f3fa670ec6512991cb73a1") (:keywords "languages") (:url . "https://github.com/msherry/tickscript-mode"))]) (thrift . [(0 11 0) nil "Major mode for Apache Thrift files" single ((:commit . "327ebb6c2b6df8bf075da02ef45a2a034e9b79ba") (:keywords "files"))]) (thinks . [(1 12) ((cl-lib (0 5))) "Insert text in a think bubble." single ((:commit . "7bdc418ff946d0cc9ea4cc73d38b3c71ffaa838d") (:keywords "convenience" "quoting") (:url . "https://github.com/davep/thinks.el"))]) (theme-looper . [(1 0 0) ((cl-lib (0 5))) "Loop thru the available color-themes" single ((:commit . "5e3a3ea7ad31d4b38efa2cc08f0063b230736da9") (:keywords "convenience" "color-themes") (:url . "http://ismail.teamfluxion.com"))]) (theme-changer . [(2 1 0) nil "Sunrise/Sunset Theme Changer for Emacs" single ((:commit . "d3d9c9f62a138958262ac5dd61837df427268611") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset") (:url . "https://github.com/hadronzoo/theme-changer"))]) (textx-mode . [(0 0 2) ((emacs (24 3))) "Major mode for editing TextX files" single ((:commit . "72f9f0c5855b382024f0da8f56833c22a70a5cb3") (:keywords "textx") (:url . "https://github.com/novakboskov/textx-mode"))]) (textmate-to-yas . [(0 21) nil "Import Textmate macros into yasnippet syntax" tar ((:commit . "8805e5159329e1b74629b7b584373fc446f57d31") (:keywords "yasnippet" "textmate") (:url . "https://github.com/mlf176f2/textmate-to-yas.el/"))]) (textmate . [(1) nil "No description available." single ((:commit . "484845493a3c9b570799aea5195a5435a5a01b76"))]) (tex-smart-umlauts . [(1 4 0) nil "Smart umlaut conversion for TeX." single ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp"))]) (test-simple . [(1 0) nil "Simple Unit Test Framework for Emacs Lisp" single ((:commit . "75eea25bae04d8e5e3e835a2770f02f0ff4602c4") (:keywords "unit-test") (:url . "http://github.com/rocky/emacs-test-simple"))]) (test-kitchen . [(0 3 0) nil "Run test-kitchen inside of emacs" single ((:commit . "ddbcb964ac4700973eaf30ae366f086e3319e51f") (:keywords "chef" "ruby" "test-kitchen") (:url . "http://github.com/jjasghar/test-kitchen-el"))]) (test-case-mode . [(1 0) ((fringe-helper (0 1 1))) "unit test front-end" single ((:commit . "26e397c0f930b7eb0be413ef7dd257b1da052bec") (:keywords "tools") (:url . "http://nschum.de/src/emacs/test-case-mode/"))]) (terraform-mode . [(0 6) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" single ((:commit . "6286aa42132a7fcad49271d63be33deeeb8d4efc") (:url . "https://github.com/syohex/emacs-terraform-mode"))]) (tern-django . [(0 1 0) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar ((:commit . "6d616c5f802d3432c4065dc306d7977d254df49f") (:url . "https://github.com/proofit404/tern-django"))]) (tern-context-coloring . [(1 0 1) ((emacs (24 3)) (context-coloring (8 1 0)) (tern (0 0 1))) "Use Tern for context coloring" single ((:commit . "3a8e979d6cc83aabcb3dda3f5f31a6422532efba") (:keywords "convenience" "faces" "tools") (:url . "https://github.com/jacksonrayhamilton/tern-context-coloring"))]) (tern-auto-complete . [(0 21 0) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single ((:commit . "e6a7777f273050098fa7074577ac196bae59d80b"))]) (tern . [(0 21 0) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:commit . "e6a7777f273050098fa7074577ac196bae59d80b") (:url . "http://ternjs.net/"))]) (terminal-here . [(1 0) ((emacs (24)) (cl-lib (0 5))) "Run an external terminal in current directory" single ((:commit . "e176d1675dc5c41b6aebd05122fb2efc44b6cff0") (:keywords "tools" "frames") (:url . "https://github.com/davidshepherd7/terminal-here"))]) (termbright-theme . [(1 0) ((emacs (24 1))) "a more usable theme for white-on-black terminals" single ((:commit . "bec6ab14336c0611e85f45486276004f16d20607") (:keywords "themes") (:url . "https://github.com/bmastenbrook/termbright-theme-el"))]) (term-run . [(0 1 5) nil "Run arbitrary command in terminal buffer" single ((:commit . "54650dbbabb13cb2a6c0670ff6b24b29717a6a8b") (:keywords "utility" "shell" "command" "term-mode") (:url . "https://github.com/10sr/term-run-el"))]) (term-projectile . [(0 1 1) ((term-manager (0 1 0)) (projectile (0 13 0))) "projectile terminal management" single ((:commit . "0bca2e7e3b6e906ec67696bc0be952988ca7f733") (:keywords "term" "manager" "projectile") (:url . "https://www.github.com/IvanMalison/term-projectile"))]) (term-manager . [(0 1 1) ((dash (2 12 0)) (emacs (24 4))) "Contextual terminal management" tar ((:commit . "0bca2e7e3b6e906ec67696bc0be952988ca7f733") (:keywords "term" "manager") (:url . "https://www.github.com/IvanMalison/term-manager"))]) (term-cmd . [(1 1) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar ((:commit . "6c9cbc659b70241d2ed1601eea34aeeca0646dac"))]) (term-alert . [(1 2) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar ((:commit . "47af9e6fe483ef0d393098c145f499362a33292a"))]) (ten-hundred-mode . [(1 0 1) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar ((:commit . "bdcfda49b1819e82d61fe90947e50bb948cf7933"))]) (telephone-line . [(0 4) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar ((:commit . "a83dcda21b0f6e10e51c3cded7da9a5d2ead5f34") (:keywords "mode-line") (:url . "https://github.com/dbordak/telephone-line"))]) (telepathy . [(1 0) nil "Access Telepathy from Emacs" single ((:commit . "211d785b02a29ddc254422fdcc3db45262582f8c") (:keywords "telepathy" "tools"))]) (tawny-mode . [(2 0 0) ((cider (0 12)) (emacs (25))) "Ontology Editing with Tawny-OWL" single ((:commit . "d13389f701fc96fdd98b73fd068c6838a1d8ed4e"))]) (tagedit . [(1 4 0) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:commit . "3fcf54b824b75c5ad68f5438d5638103049a389f") (:keywords "convenience"))]) (tablist . [(0 70) ((emacs (24 3))) "Extended tabulated-list-mode" tar ((:commit . "ef38312867bc0268b1584dd890b1c420bb77ec11") (:keywords "extensions" "lisp"))]) (tabbar-ruler . [(0 45) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:commit . "7df2e4814018e84ef9261d04a2ade8168a44e3d7") (:keywords "tabbar" "ruler mode" "menu" "tool bar.") (:url . "http://github.com/mlf176f2/tabbar-ruler.el"))]) (ta . [(1 5) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single ((:commit . "9226afbe7abbefb825844ef3ba4ca15f1934cfc2") (:keywords "tools") (:url . "http://github.com/kuanyui/ta.el"))]) (systemd . [(1 6) ((emacs (24 4))) "Major mode for editing systemd units" tar ((:commit . "1e7567a9973bf80cab0d7e0355656a84bee7ca96") (:keywords "tools" "unix"))]) (system-specific-settings . [(0 2) nil "Apply settings only on certain systems" single ((:commit . "0050d85b2175095aa5ecf580a2fe43c069b0eef3") (:keywords "configuration") (:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings"))]) (system-packages . [(1 0 5) ((emacs (24 3))) "functions to manage system packages" single ((:commit . "7b87f7dbd53d7bd365157d831893f7a70ae67910") (:url . "https://github.com/jabranham/system-packages"))]) (syntax-subword . [(0 2) nil "make operations on words more fine-grained" single nil]) (syntactic-sugar . [(0 9 4) nil "Effect-free forms such as if/then/else" single ((:commit . "06d943c6ad9507603bb6ab6d37be2d359d0763a9") (:keywords "extensions") (:url . "http://github.com/rolandwalker/syntactic-sugar"))]) (synosaurus . [(0 1 0) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar ((:commit . "56efdc38952b9bd56a445591fcdeb626aede8678") (:url . "https://github.com/rootzlevel/synosaurus"))]) (syndicate . [(1 0) ((evil (1 0))) "evil keybindings for org-mode" single ((:commit . "b839aaba0c8583a3254476b53976e3caac4f89a9") (:keywords "evil" "org" "bindings") (:url . "https://github.com/KNX32542/syndicate.git"))]) (symon . [(20160630) nil "tiny graphical system monitor" single ((:commit . "7beeedd70dc37f5904c781fb697c8df056196ee9") (:url . "http://hins11.yu-yake.com/"))]) (symbolword-mode . [(1 0) nil "No description available." tar ((:commit . "273dece5b04f7abc4c35048b2f64f04b33774b87"))]) (sx . [(0 4) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar ((:commit . "4892f45746fb217d059f4fa074a237c5bac7dd6c") (:keywords "help" "hypermedia" "tools") (:url . "https://github.com/vermiculus/sx.el/"))]) (sws-mode . [(1 0 0) nil "(S)ignificant (W)hite(S)pace mode" single ((:commit . "4e7a20db492719062f40b225ed730ed50be5db56") (:url . "https://github.com/brianc/jade-mode"))]) (switch-window . [(1 6 1) ((emacs (24))) "A *visual* way to switch window" tar ((:commit . "40565f7bdf11e86d882185fa4c4ec77b96dcc21c") (:keywords "convenience") (:url . "https://github.com/dimitri/switch-window"))]) (switch-buffer-functions . [(0 0 1) nil "Hook run when current buffer changed" single ((:commit . "e1bccfff2d123b6218efab16c486215cedb9a108") (:keywords "hook" "utility") (:url . "https://github.com/10sr/switch-buffer-functions-el"))]) (swiper-helm . [(0 2 0) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single ((:commit . "93fb6db87bc6a5967898b5fd3286954cc72a0008") (:keywords "matching") (:url . "https://github.com/abo-abo/swiper-helm"))]) (swiper . [(0 10 0) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single ((:commit . "4a2cee03519f98cf95b29905dec2566a39ff717e") (:keywords "matching") (:url . "https://github.com/abo-abo/swiper"))]) (swift3-mode . [(2 1 1) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar ((:commit . "ea34d46bf9a4293e75ffdac9500d34989316d9e9") (:keywords "languages" "swift") (:url . "https://github.com/taku0/swift3-mode"))]) (swift-mode . [(5 0 0) ((emacs (24 4)) (seq (2 3))) "Major-mode for Apple's Swift programming language." tar ((:commit . "7ea1d4e3b0430644b2e2b2e1025f442a10bfa523") (:keywords "languages" "swift") (:url . "https://github.com/swift-emacs/swift-mode"))]) (sweetgreen . [(0 5) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single ((:commit . "e40d2821ff941695e50a9b003a8c96d32c19bfdc") (:keywords "salad" "food" "sweetgreen" "request") (:url . "https://www.github.com/CestDiego/sweetgreen.el"))]) (swagger-to-org . [(0 0 2) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "Convert a swagger.json file into an org-mode file" single ((:commit . "181357c71ea24bede263f5706d8781ad65e16877") (:keywords "ahungry" "emacs" "swagger" "openapi" "orgmode" "org" "export") (:url . "https://github.com/ahungry/swagger-to-org"))]) (svg-mode-line-themes . [(0 1 3) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:commit . "80a0e01839cafbd66899202e7764c33231974259") (:url . "https://github.com/sabof/svg-mode-line-themes"))]) (super-save . [(0 2 0) ((emacs (24 4))) "Auto-save buffers, based on your activity." single ((:commit . "73397501fa5b01c02b9ae94f82a8cb37d1ed105f") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save"))]) (suomalainen-kalenteri . [(2017 8 1) nil "Finnish national and Christian holidays for calendar" tar ((:commit . "c702e33cb6e13cb28bd761844e95be112a3c04f3"))]) (suggest . [(0 5) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "suggest elisp functions that give the output requested" single ((:commit . "05beef9ecf94107d72d0070fa092a8392505b012") (:keywords "convenience") (:url . "https://github.com/Wilfred/suggest.el"))]) (sudo-edit . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "Open files as another user" single ((:commit . "bcb12aaa0da0c56d851cfa2f1b3ea4afdd2a755b") (:keywords "convenience") (:url . "https://github.com/nflath/sudo-edit"))]) (sudden-death . [(0 2 1) nil "Totsuzen-no-Shi" single ((:commit . "791a63d3f4df192e71f4232a9a4c5588f4b43dfb") (:url . "https://github.com/yewton/sudden-death.el"))]) (sublimity . [(20160629) nil "smooth-scrolling, minimap and distraction-free mode" tar ((:commit . "ee9c9fbb92b8fc0c191e5e8640477e251b602bf9") (:url . "http://hins11.yu-yake.com/"))]) (subemacs . [(1 0) nil "Evaluating expressions in a fresh Emacs subprocess" single ((:commit . "24f0896f1995a3ea42a58b0452d250dcc6802944") (:keywords "extensions" "lisp" "multiprocessing") (:url . "https://github.com/kbauer/subemacs"))]) (subatomic-theme . [(1 8 1) nil "Low contrast bluish color theme" single ((:commit . "6a4086af748b1ecb27f6ba2aa2614988db16d594") (:keywords "color-theme" "blue" "low contrast") (:url . "https://github.com/cryon/subatomic"))]) (stylus-mode . [(1 0 0) ((sws-mode (0))) "Major mode for editing .jade files" single ((:commit . "4e7a20db492719062f40b225ed730ed50be5db56") (:url . "https://github.com/brianc/jade-mode"))]) (stumpwm-mode . [(0 9 8) nil "special lisp mode for evaluating code into running stumpwm" single ((:commit . "4d0603e52b5bab993b3be63e3654c74f641e677d") (:keywords "comm" "lisp" "tools"))]) (stripe-buffer . [(0 2 5) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:commit . "d9f009b92cf16fe2c40cd92b8f842a3872e6c190") (:url . "https://github.com/sabof/stripe-buffer"))]) (string-utils . [(0 3 2) ((list-utils (0 4 2))) "String-manipulation utilities" single ((:commit . "3ae530143899f533a9ef5e1f26f28b577ebe72ee") (:keywords "extensions") (:url . "http://github.com/rolandwalker/string-utils"))]) (string-inflection . [(1 0 7) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single ((:commit . "a9de404b2ece932da9b1c9aa1c29dbf7cf506e76") (:keywords "elisp"))]) (string-edit . [(0 1 0) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single ((:commit . "9f9c9cd659156fd2217be814eb4e91da48d44647"))]) (stgit . [(0 18) nil "major mode for StGit interaction" single ((:commit . "3df606d14f6673fede6cdf5fad921a664c03e108") (:url . "http://www.procode.org/stgit"))]) (status . [(0 3) nil "This package adds support for status icons to Emacs." tar ((:commit . "b62c74bf272566f82a68622f29fb9edafea0f241"))]) (stash . [(0 4 1) nil "lightweight persistent caching" single ((:commit . "638ae8a4f6d33af54fe77d57c2c0eb1800dd2e19") (:keywords "extensions" "data" "internal" "lisp") (:url . "https://www.github.com/vermiculus/stash.el/"))]) (stan-snippets . [(9 2 0) ((stan-mode (9 2 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar ((:commit . "45b8242611fe0437fcff48f5f4f7d8f0552531ac") (:keywords "snippets") (:url . "http://github.com/stan-dev/stan-mode"))]) (stan-mode . [(9 2 0) nil "Major mode for editing Stan files" tar ((:commit . "45b8242611fe0437fcff48f5f4f7d8f0552531ac") (:keywords "languanges") (:url . "http://github.com/stan-dev/stan-mode"))]) (ssh-deploy . [(1 5) ((emacs (24))) "Deployment via TRAMP, global or per directory." tar ((:commit . "aef539bb4feefe927fa48d01736dfadb7b3d7930") (:keywords "tools" "convenience") (:url . "https://github.com/cjohansson/emacs-ssh-deploy"))]) (ssh-config-mode . [(20170413 20 10) nil "Mode for fontification of ~/.ssh/config" tar ((:commit . "64b62ad32c3ebb4976c7619c3e809184f6a01605") (:keywords "ssh" "config" "emacs") (:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el"))]) (ssh-agency . [(0 4) ((emacs (24 4)) (dash (2 10 0))) "manage ssh-agent from Emacs" single ((:commit . "d9dbedd773ad3a831e02e162c47936d6814a850a") (:url . "https://github.com/magit/ssh-agency"))]) (ssass-mode . [(0 2) ((emacs (24 3))) "Edit Sass without a Turing Machine" single ((:commit . "5f36a169a1ad497f1d7a465be386ffb5e1f80bcf") (:keywords "languages" "sass") (:url . "http://github.com/AdamNiederer/ssass-mode"))]) (srefactor . [(0 5) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar ((:commit . "ecd40713f736b243285c07f4cfd77113794d4f9f") (:keywords "c" "languages" "tools") (:url . "https://github.com/tuhdo/semantic-refactor"))]) (srcery-theme . [(0 1 0) nil "Colorscheme that focus ease of use and clearly defined contrasting colors with a slightly earthy tone." tar ((:commit . "385809e78a2494ee617782430415048d91a11444") (:keywords "color" "theme") (:url . "https://github.com/roosta/emacs-srcery"))]) (sr-speedbar . [(20140914 2339) nil "Same frame speedbar" single ((:commit . "4f816528a32eb421197a768d6dcf3a05de83f642") (:keywords "speedbar" "sr-speedbar.el") (:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el"))]) (sqlup-mode . [(0 8 0) nil "Upcase SQL words for you" single ((:commit . "04970977b4abb4d44301651618bbf1cdb0b263dd") (:keywords "sql" "tools" "redis" "upcase") (:url . "https://github.com/trevoke/sqlup-mode.el"))]) (sql-impala . [(1 0) nil "comint support for Cloudera Impala" single ((:commit . "68248e9851b153850542ed1f709298bb9ab59610") (:keywords "sql" "impala") (:url . "https://github.com/jterk/sql-impala"))]) (sprunge . [(0 1 1) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single ((:commit . "0fd386b8b29c4175022a04ad70ea5643185b6726") (:keywords "tools"))]) (sprintly-mode . [(0 0 4) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ((:commit . "6695892bae5860b5268bf3ae62be990ee9b63c11") (:url . "https://github.com/sprintly/sprintly-mode"))]) (spotify . [(0 3 3) ((cl-lib (0 5))) "Control the spotify application from emacs" single ((:commit . "472f6e61d732a7e700f5505e2a445fc0b030916a") (:keywords "convenience") (:url . "https://github.com/remvee/spotify-el"))]) (splitjoin . [(0 1) ((cl-lib (0 5))) "splitjoin" single ((:commit . "0eb91e7beec915065cd6c00ceaca180a64d85cda") (:url . "https://github.com/syohex/emacs-splitjoin"))]) (sphinx-mode . [(0 1 1) nil "Minor mode providing sphinx support." tar ((:commit . "3d6e3059350593dc077f06f54c33869b9e28f7bc"))]) (sphinx-doc . [(0 1 0) ((s (1 9 0)) (cl-lib (0 5))) "Sphinx friendly docstrings for Python functions" single ((:commit . "b3459ecb9e6d3fffdee3cb7342563a56a32ce666") (:keywords "sphinx" "python") (:url . "https://github.com/naiquevin/sphinx-doc.el"))]) (speed-type . [(1 1) ((cl-lib (0 3))) "Practice touch and speed typing" single ((:commit . "5d691f57743304db63b6afdc5bd79dabd282d390") (:keywords "games") (:url . "https://github.com/parkouss/speed-type"))]) (speech-tagger . [(0 0 0) nil "No description available." single ((:commit . "e6595bd0eea93ede1534c536c1746c9cf763b73c"))]) (sparql-mode . [(4 0 2) ((cl-lib (0 5)) (emacs (24 3))) "Edit and interactively evaluate SPARQL queries." tar ((:commit . "2837b97244111515c61fb3823c1479bc126a458b") (:url . "https://github.com/ljos/sparql-mode"))]) (sparkline . [(1 0 2) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single ((:commit . "e44498cf1a58fb165991198fe5104d51c92ea904") (:keywords "extensions"))]) (spaceline-all-the-icons . [(1 4 0) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar ((:commit . "7eafe2d7a81f8d10e03498bdcc3bec0ea50f905d") (:keywords "convenience" "lisp" "tools") (:url . "https://github.com/domtronn/spaceline-all-the-icons.el"))]) (spaceline . [(2 0 1) ((emacs (24 3)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar ((:commit . "2d1a7bfb5bdaf24958f50b4bf93182847916af85") (:keywords "mode-line" "powerline" "spacemacs") (:url . "https://github.com/TheBB/spaceline"))]) (sourcemap . [(0 3) ((emacs (24 3))) "Sourcemap parser" single ((:commit . "64c89d296186f48d9135fb8aad501de19f64bceb") (:url . "https://github.com/syohex/emacs-sourcemap"))]) (sourcekit . [(0 2 0) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0)) (request (0 2 0))) "Library to interact with sourcekittendaemon" single ((:commit . "8ba62ac25bf533b7f148f333bcb5c1db799f749b") (:keywords "tools" "processes") (:url . "https://github.com/nathankot/company-sourcekit"))]) (sound-wav . [(0 2) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single ((:commit . "2a8c8a9bd797dfbf4a0aa1c023a464b803227ff8") (:url . "https://github.com/syohex/emacs-sound-wav"))]) (sotlisp . [(1 6 2) ((emacs (24 1))) "Write lisp at the speed of thought." single ((:commit . "fffe8d0b42b143a2e7df0470d9049fa57b6ecac5") (:keywords "convenience" "lisp") (:url . "https://github.com/Malabarba/speed-of-thought-lisp"))]) (sotclojure . [(1 3 1) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." tar ((:commit . "ceac82aa691e8d98946471be6aaff9c9a4603c32") (:keywords "convenience" "clojure") (:url . "https://github.com/Malabarba/speed-of-thought-clojure"))]) (sos . [(0 1) ((org (7))) "StackOverflow Search" single ((:commit . "c3906ca6872f460c0bdd276410519308626313f1") (:keywords "tools" "search" "questions") (:url . "https://github.com/omouse/emacs-sos"))]) (solidity-mode . [(0 1 9) nil "Major mode for ethereum's solidity language" tar ((:commit . "d0ff4dea49540f37301d869f2797fca2492f55d5") (:keywords "languages"))]) (solarized-theme . [(1 2 2) ((dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar ((:commit . "210dbef0186f87048d50face41d1d374d6154b3a"))]) (solaire-mode . [(1 0 6) ((emacs (24 4)) (cl-lib (0 5))) "make certain buffers grossly incandescent" single ((:commit . "abf2ce4da77d0877efb4a035687390ce921eda4f") (:keywords "dim" "bright" "window" "buffer" "faces") (:url . "https://github.com/hlissner/emacs-solaire-mode"))]) (socyl . [(0 3 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Frontend for several search tools" tar ((:commit . "fcc0deda5b6c39d25e48e7da2a0ae73295193ea8") (:keywords "ripgrep" "sift" "ack" "pt" "ag" "grep" "search") (:url . "https://github.com/nlamirault/socyl"))]) (snoopy . [(0 2 0) ((emacs (24)) (cl-lib (0 6))) "minor mode for number row unshifted character insertion" single ((:commit . "ec4123bdebfe0bb7bf4feaac2dc02b59caffe386") (:keywords "lisp"))]) (snazzy-theme . [(1 0) ((emacs (24)) (base16-theme (2 1))) "An elegant syntax theme with bright colors" single ((:commit . "578d7ebc4ed91c0a630b652c4b6fdd54d9ae16cd") (:keywords "faces" "theme" "color" "snazzy") (:url . "https://github.com/weijiangan/emacs-snazzy/"))]) (snapshot-timemachine-rsnapshot . [(0 4) ((snapshot-timemachine (20160222 132)) (seq (2 19))) "rsnapshot backend for snapshot-timemachine" single ((:commit . "72b0b700d80f1a0442e62bbbb6a0c8c59182f97f"))]) (snakemake-mode . [(1 3 0) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar ((:commit . "6cf6d20db2e5253ce3f86e302651faa28f220aa7") (:keywords "tools") (:url . "https://github.com/kyleam/snakemake-mode"))]) (smooth-scrolling . [(2 0 0) nil "Make emacs scroll smoothly" single ((:commit . "6a1420be510decde0a5eabc56cff229ae554417e") (:keywords "convenience") (:url . "http://github.com/aspiers/smooth-scrolling/"))]) (smooth-scroll . [(1 2) nil "Minor mode for smooth scrolling and in-place scrolling." single ((:commit . "02320f28abb5cae28b3a18f6b9ce93129bdbfc45") (:keywords "convenience" "emulations" "frames") (:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el"))]) (smmry . [(0 0 3) nil "SMMRY client" single ((:commit . "b7ee765337fa627a6c59eb4f2a91df5d280ac6df") (:keywords "api" "smmry") (:url . "https://github.com/microamp/smmry.el"))]) (smex . [(3 0) nil "M-x interface with Ido-style fuzzy matching." single ((:commit . "97b4a4d82a4449e3f1a3fa8a93387d6eb0ef9c26") (:keywords "convenience" "usability") (:url . "http://github.com/nonsequitur/smex/"))]) (smeargle . [(0 3) ((emacs (24 3))) "Highlighting region by last updated time" single ((:commit . "0665b1ff5109731898bc4a0ca6d939933b804777") (:url . "https://github.com/syohex/emacs-smeargle"))]) (smbc . [(0 2 1) nil "View SMBC from Emacs" single ((:commit . "c377b806118d82140197d9cb1095548477e00497") (:keywords "smbc" "webcomic") (:url . "https://github.com/sakshamsharma/emacs-smbc"))]) (smartscan . [(0 2) nil "Jumps between other symbols found at point" single ((:commit . "13c9fd6c0e38831f78dec55051e6b4a643963176") (:keywords "extensions"))]) (smartrep . [(1 0 0) nil "Support sequential operation which omitted prefix keys." single ((:commit . "0b73bf3d1a3c795671bfee0a36cecfaa54729446") (:keywords "convenience") (:url . "https://github.com/myuhe/smartrep.el"))]) (smartparens . [(1 11 0) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar ((:commit . "4873352b5d0a1c5142658122de1b6950b8fe7e4d"))]) (smart-tabs-mode . [(1 0) nil "Intelligently indent with tabs, align with spaces!" single ((:commit . "8b196d596b331f03fba0efdb4e31d2fd0752c4a7") (:keywords "languages") (:url . "http://www.emacswiki.org/emacs/SmartTabs"))]) (smart-semicolon . [(0 2 1) ((emacs (25))) "Insert semicolon smartly" single ((:commit . "c11096679dbed3875c37413337ee490ee7951b63") (:url . "https://github.com/iquiw/smart-semicolon"))]) (smart-mode-line-powerline-theme . [(2 11 0) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar ((:commit . "5aca51956fae55d7310c1f96b5d128201087864a") (:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Bruce-Connor/smart-mode-line"))]) (smart-mode-line . [(2 11 0) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar ((:commit . "5aca51956fae55d7310c1f96b5d128201087864a") (:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Malabarba/smart-mode-line"))]) (sly-company . [(0 8) ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) "sly completion backend for company mode" single ((:commit . "930e14fee9cdc837ae26299c7f5e379c53cee1af") (:keywords "convenience" "lisp" "abbrev"))]) (sly . [(2 14) nil "No description available." tar ((:commit . "1942c53fc40fd6ace0e822b5c9bf551f59061f32"))]) (slstats . [(1 10) ((cl-lib (0 5)) (emacs (24))) "Acquire and display stats about Second Life" single ((:commit . "e9696066abf3f2b7b818a57c062530dfd9377033") (:keywords "games") (:url . "https://github.com/davep/slstats.el"))]) (slime-volleyball . [(1 1) nil "An SVG Slime Volleyball Game" tar ((:commit . "159b5c0f40b109e3854e94b89ec5383854c46ae3") (:keywords "games"))]) (slime-docker . [(0 7) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar ((:commit . "1ba41c2d86540a84b47466b0b6957f8063f23aa8") (:keywords "docker" "lisp" "slime") (:url . "https://github.com/daewok/slime-docker"))]) (slime-company . [(1 1) ((slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single ((:commit . "6c244690c80387a32b0cb984843e00c8b75ad6bb") (:keywords "convenience" "lisp" "abbrev"))]) (slime . [(2 21) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar ((:commit . "e6d215d77148079799d2fc3253ef402b5d9ed4d7") (:keywords "languages" "lisp" "slime") (:url . "https://github.com/slime/slime"))]) (slim-mode . [(1 1) nil "Major mode for editing Slim files" single ((:commit . "fe8abb644b7b9cc0ed1e76d9ca8d6c01edccbdb8") (:keywords "markup" "language") (:url . "http://github.com/minad/emacs-slim"))]) (slideview . [(0 6 1) nil "File slideshow" single ((:commit . "ec2340e7b0e74201206d14e3eaef1e77149f122d") (:keywords "files") (:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el"))]) (sl . [(0 2) ((cl-lib (0 5))) "An Emacs clone of sl(1)" tar ((:commit . "51d92f820f3e93776fff6cdb9690458816888bdc") (:url . "https://github.com/xuchunyang/sl.el"))]) (skewer-mode . [(1 8 0) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar ((:commit . "a10955db9ef95b0243ee31bcd30a6fb07ce5302b"))]) (skewer-less . [(0 2) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:commit . "593001930f1d68c85233f34c5f6fb04173fc98d6") (:keywords "languages" "tools"))]) (skeletor . [(1 6 1) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar ((:commit . "d986806559628623b591542143707de8d76347d0"))]) (simplezen . [(0 1 1) nil "A simple subset of zencoding-mode for Emacs." single ((:commit . "c0ddaefbb38fcc1c9775434f734f89227d246a30"))]) (simplenote2 . [(3 0 0) ((request-deferred (0 2 0))) "Interact with simple-note.appspot.com" tar ((:commit . "070aa311b0a08b530394c53d0c52c6438efbc20c") (:keywords "simplenote"))]) (simpleclip . [(1 0 4) nil "Simplified access to the system clipboard" single ((:commit . "d461c462c237cd896553adb468cd77499d0d26ad") (:keywords "convenience") (:url . "http://github.com/rolandwalker/simpleclip"))]) (simple-httpd . [(1 5 1) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:commit . "a5eb49a6567e33586fba15dd649d63ca6e964314") (:url . "https://github.com/skeeto/emacs-http-server"))]) (simple-bookmarks . [(1 8) ((cl-lib (0 5))) "Bookmark / functioncall manager" tar ((:commit . "e89e8163a0705e28e9346320a1ee13c1aae249af") (:keywords "bookmark" "functioncall") (:url . "https://github.com/jtkDvlp/simple-bookmarks"))]) (silkworm-theme . [(0 1) ((emacs (24))) "Light theme with pleasant, low contrast colors." single ((:commit . "7951b53e5caf9daf6a5a15a57ae3a668cb78bd7b"))]) (sift . [(0 2 0) nil "Front-end for sift, a fast and powerful grep alternative" single ((:commit . "8c3f3d14a351a2394027d72ee0599aa73b9f0d13") (:keywords "sift" "ack" "pt" "ag" "grep" "search") (:url . "https://github.com/nlamirault/sift.el"))]) (side-notes . [(0 1 1) ((emacs (24 5))) "Easy access to a directory notes file" single ((:commit . "981ac308b9b5d58e2af20485377e693d2a6e15aa") (:keywords "convenience") (:url . "https://github.com/rnkn/side-notes"))]) (shx . [(0 0 16) ((emacs (24 4))) "\"Extras\" for the (comint-mode) shell" single ((:commit . "207e6cd292a26fb1162072e2e20df9aa5efd61ef") (:keywords "processes" "tools") (:url . "https://github.com/riscy/shx-for-emacs"))]) (shut-up . [(0 3 2) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:commit . "dccd8f7d6af2dde96718f557b37bc25adc61dd12") (:url . "http://github.com/rejeep/shut-up.el"))]) (shrink-whitespace . [(0 0 1) nil "Whitespace removal DWIM key" single ((:commit . "24518d58e8e692fa98a73d5e7cd44c1536ab4e42") (:keywords "editing") (:url . "https://github.com/jcpetkovich/shrink-whitespace.el"))]) (shrink-path . [(0 3 1) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" single ((:commit . "9b8cfb59a2dcee8b39b680ab9adad5ecb1f53c0b") (:keywords "path") (:url . "https://gitlab.com/bennya/shrink-path.el"))]) (shr-tag-pre-highlight . [(2) ((emacs (24)) (language-detection (0 1 0))) "Syntax highlighting code block in HTML" single ((:commit . "63eb0b2a4c1caf1004bac8e002ff8b7477871e36") (:keywords "html") (:url . "https://github.com/xuchunyang/shr-tag-pre-highlight.el"))]) (shpec-mode . [(0 1 0) nil "Minor mode for shpec specification" single ((:commit . "76bccd63e3b70233a6c9ca0798dd03550952cc76") (:keywords "languages" "tools") (:url . "http://github.com/shpec/shpec-mode"))]) (showtip . [(0 1) nil "Show tip at cursor" single ((:commit . "930da302809a4257e8d69425455b29e1cc91949b") (:keywords "help"))]) (shm . [(1 0 20) nil "Structured Haskell Mode" tar ((:commit . "8abc5cd73e59ea85bef906e14e87dc388c4f350f") (:keywords "development" "haskell" "structured"))]) (shift-number . [(0 1) nil "Increase/decrease the number at point" single ((:commit . "ba3c1f2e6b01bf14aa1433c2a49098af1c025f7c") (:keywords "convenience") (:url . "https://github.com/alezost/shift-number.el"))]) (shen-elisp . [(0 1) ((emacs (24 4))) "Shen implementation in Elisp" tar ((:commit . "ffe17dee05f75539cf5e4c59395e4c7400ececaa") (:keywords "shen" "elisp") (:url . "http://github.com/deech/shen-elisp"))]) (shelltest-mode . [(1 1) nil "Major mode for shelltestrunner" single ((:commit . "fead97c7ff1b39715ec033a793de41176f1788f5") (:keywords "languages") (:url . "https://github.com/rtrn/shelltest-mode"))]) (shelldoc . [(0 0 5) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single ((:commit . "1d40c73969347586906ca1dde2adb50afcd73b1b") (:keywords "applications") (:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el"))]) (shell-toggle . [(1 3 1) nil "Toggle to and from the shell buffer" single ((:commit . "9820b0ad6f22c700759555aae8a454a7dc5a46b3") (:keywords "processes") (:url . "https://github.com/knu/shell-toggle.el"))]) (shell-switcher . [(1 0 1) nil "Provide fast switching between shell buffers." tar ((:commit . "2c5575ae859a82041a4bacd1793b844bfc24c34f"))]) (shell-split-string . [(0 1) nil "Split strings using shell-like syntax" single ((:commit . "6d01c9249853fe1f8fd925ee80f97232d4e3e5eb") (:keywords "utility" "library" "shell" "string") (:url . "https://github.com/10sr/shell-split-string-el"))]) (shell-pop . [(0 64) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single ((:commit . "4a3a9d093ad1add792bba764c601aa28de302b34") (:keywords "shell" "terminal" "tools") (:url . "http://github.com/kyagi/shell-pop-el"))]) (shampoo . [(0 0 1) nil "Shampoo, a remote Smalltalk developemnt" tar ((:commit . "9bf488ad4025beef6eef63d2d5b72bc1c9b9e142"))]) (shakespeare-mode . [(0 0 1) nil "A major mode for editing Shakespearean templates." single ((:commit . "4bff63eeac2b7ec1220f17e8bbcddbea4c11cb02") (:keywords "shakespeare" "hamlet" "lucius" "julius" "mode") (:url . "http://github.com/CodyReichert/shakespeare-mode"))]) (shackle . [(1 0 1) ((cl-lib (0 5))) "Enforce rules for popups" single ((:commit . "4189c1c773aab533969b587f7801ffbcd1d7d613") (:keywords "convenience") (:url . "https://github.com/wasamasa/shackle"))]) (sexy-monochrome-theme . [(3 1) nil "A sexy dark Emacs >= 24 theme for your sexy code" single ((:commit . "f64714a176d9212c9fa82355dd8ec89587ce13f0") (:keywords "themes") (:url . "https://github.com/voloyev/sexy-monochrome-theme"))]) (sexp-move . [(0 2 6) nil "Improved S-Expression Movement" single ((:commit . "117f7a91ab7c25e438413753e916570122011ce7") (:keywords "sexp") (:url . "https://gitlab.com/elzair/sexp-move"))]) (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" single ((:commit . "19ea0806873daac3539a4b956e15655e99e3dd6c") (:keywords "session" "session management" "desktop" "data" "tools") (:url . "http://emacs-session.sourceforge.net/"))]) (sesman . [(0 1 1) ((emacs (25))) "Generic Session Manager" single ((:commit . "0d8d1bef455b58439df333f2a0a0693543b8f098") (:keywords "process") (:url . "https://github.com/vspinu/sesman"))]) (services . [(1 7) ((cl-lib (0 5))) "Services database access functions." single ((:commit . "514e4095e8964c4d0f38c4f3ad6c692e86d12faa") (:keywords "convenience" "net" "services") (:url . "https://github.com/davep/services.el"))]) (serverspec . [(0 0 7) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:commit . "b6dfe82af9869438de5e5d860ced196641f372c0") (:url . "http://101000lab.org"))]) (servant . [(0 3 0) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:commit . "4d2aa8250b54b28e6e7ee4cd5ebd98a33db2c134") (:keywords "elpa" "server") (:url . "http://github.com/rejeep/servant.el"))]) (selectric-mode . [(1 4 1) nil "IBM Selectric mode for Emacs" tar ((:commit . "a35cb3815caceaf273ad7d16ac3b2dd3c7a3003e") (:keywords "multimedia" "convenience" "typewriter" "selectric") (:url . "https://github.com/rbanffy/selectric-mode"))]) (select-themes . [(0 1 4) nil "Color theme selection with completing-read" single ((:commit . "236f54287519a3ea6dd7b3992d053e4f4ff5d0fe") (:url . "https://github.com/jasonm23/emacs-select-themes"))]) (sekka . [(1 8 0) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single ((:commit . "d1fd5d47aacba723631d5d374169a45ff2051c41") (:keywords "ime" "skk" "japanese") (:url . "https://github.com/kiyoka/sekka"))]) (secretaria . [(0 2 7) ((emacs (24 4)) (org (9 0)) (alert (1 2)) (s (1 11 0)) (f (0 19 0))) "A personal assistant based on org-mode" tar ((:commit . "1cd32d957864be1ba5c44a3f505f662832169a28") (:keywords "org" "convenience") (:url . "https://bitbucket.org/shackra/secretaria.el"))]) (search-web . [(1 1) nil "Post web search queries using `browse-url'." single ((:commit . "c4ae86ac1acfc572b81f3d78764bd9a54034c331"))]) (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" single ((:commit . "d663069667d9b158d56e863b80dd4cc02984e49f") (:keywords "scss" "css" "mode") (:url . "https://github.com/antonj/scss-mode"))]) (scpaste . [(0 6 5) ((htmlize (1 39))) "Paste to the web via scp." single ((:commit . "cca8f4ee5402bbf9a4bbb24e81372067cb21bba4") (:keywords "convenience" "hypermedia") (:url . "https://github.com/technomancy/scpaste"))]) (schrute . [(0 2 2) ((emacs (24 3))) "Help you remember there is a better way to do something." single ((:commit . "08ab6565fa94f3a8016163fe6f7be1932af1156b") (:keywords "convenience") (:url . "https://bitbucket.org/shackra/dwight-k.-schrute"))]) (scala-mode . [(1 0 0) nil "Major mode for editing Scala" tar ((:commit . "56cba2903cf6e12c715dbb5c99b34c97b2679379") (:keywords "languages") (:url . "https://github.com/ensime/emacs-scala-mode"))]) (sbt-mode . [(2 0 0) ((emacs (24 4))) "Interactive support for sbt projects" tar ((:commit . "e658af140547cbef495c33535c7f694a501d318c") (:keywords "languages") (:url . "https://github.com/ensime/emacs-sbt-mode"))]) (sayid . [(0 0 16) ((cider (0 14 0))) "sayid nREPL middleware client" single ((:commit . "8ea70573e6eb1a0d1a450fd501f38c2cf26ce27f") (:url . "https://github.com/bpiel/sayid"))]) (say-what-im-doing . [(0 2) nil "dictate what you're doing with text to speech" single ((:commit . "4acc16360a29646040b51db158ba7fdeb711449d") (:keywords "text to speech" "dumb" "funny") (:url . "http://github.com/benaiah/say-what-im-doing"))]) (sauron . [(0 10) nil "Track (erc/org/dbus/...) events and react to them." tar ((:commit . "a9877f0efa9418c41d25002b58d1c2f8c69ec975"))]) (sass-mode . [(3 0 18) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single ((:commit . "26a66e331b507fb420e3bb7d0a6a8fbb04294343") (:keywords "markup" "language" "css") (:url . "http://github.com/nex3/haml/tree/master"))]) (salt-mode . [(0 1) ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 1))) "Major mode for Salt States" single ((:commit . "e14ed8f2ce0ab7a783c4341879ec8c003e2b5c81") (:keywords "languages") (:url . "https://github.com/glynnforrest/salt-mode"))]) (sage-shell-mode . [(0 3) ((cl-lib (0 5)) (emacs (24 1)) (let-alist (1 0 4)) (deferred (0 4 0))) "A front-end for Sage Math" tar ((:commit . "e8bc089e8dfd76f688160e2ac77aee985afeade7") (:keywords "sage" "math") (:url . "https://github.com/sagemath/sage-shell-mode"))]) (sackspace . [(0 8 2) nil "A better backspace" single ((:commit . "fd0480eaaf6d3d11fd30ac5feb2da2f4f7572708") (:keywords "delete" "convenience") (:url . "http://github.com/cofi/sackspace.el"))]) (s . [(1 12 0) nil "The long lost Emacs string manipulation library." single ((:commit . "12f116d58ac03706496bd682c6449b452681874e") (:keywords "strings"))]) (rvm . [(1 4 0) nil "Emacs integration for rvm" single ((:commit . "8e45a9bad8e317ff195f384dab14d3402497dc79") (:keywords "ruby" "rvm") (:url . "http://www.emacswiki.org/emacs/RvmEl"))]) (rust-playground . [(0 2 1) ((emacs (24 3)) (rust-mode (0 3 0))) "Local Rust playground for short code snippets." single ((:commit . "2f22ec74e4158984e0e70cf0bf728bbd42eb661b") (:keywords "tools" "rust") (:url . "https://github.com/grafov/rust-playground"))]) (rust-mode . [(0 3 0) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single ((:commit . "e32765893ce2efb2db6662f507fb9d33d5c1b61b") (:keywords "languages") (:url . "https://github.com/rust-lang/rust-mode"))]) (russian-holidays . [(0 4) nil "Russian holidays for the calendar" single ((:commit . "b285a30f29d85c48e3ea4eb93972d34a090c167b") (:url . "https://github.com/grafov/russian-holidays"))]) (runner . [(1 8) nil "Improved \"open with\" suggestions for dired" single ((:commit . "a211d57ddc600410d07a8b534920ba905b093d87") (:keywords "shell command" "dired" "file extension" "open with") (:url . "https://github.com/thamer/runner"))]) (rufo . [(0 3 0) ((emacs (24 3))) "use rufo to automatically format ruby files" single ((:commit . "4e7413fafd0320f30190ae9835ab021cf7a9ebdc") (:url . "https://github.com/danielma/rufo.el"))]) (ruby-tools . [(0 1 2) nil "Collection of handy functions for ruby-mode." tar ((:commit . "6e7fb376085bfa7010ecd3dfad63adacc6e2b4ac"))]) (ruby-test-mode . [(1 0) nil "Minor mode for Behaviour and Test Driven" single ((:commit . "7d3c04b60721665af93ffb4abc2a7b3191926431") (:keywords "ruby" "unit" "test" "rspec"))]) (ruby-hash-syntax . [(0 5) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:commit . "bc05c3130a5d3237f04c6064297e56de5f73887d") (:keywords "languages") (:url . "https://github.com/purcell/ruby-hash-syntax"))]) (ruby-end . [(0 4 1) nil "Automatic insertion of end blocks for Ruby" single ((:commit . "648b81af136a581bcef387744d93c011d9cdf54b") (:keywords "speed" "convenience" "ruby") (:url . "http://github.com/rejeep/ruby-end"))]) (ruby-electric . [(2 3 1) nil "Minor mode for electrically editing ruby code" single ((:commit . "3553448a780a1ea5c3b0e9becd820d4762876593") (:keywords "languages" "ruby") (:url . "https://github.com/knu/ruby-electric.el"))]) (ruby-compilation . [(2 11) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:commit . "e2ed2fa55ac3435a86b1cf6a4f2d29aebc309135") (:keywords "test" "convenience") (:url . "https://github.com/eschulte/rinari"))]) (rubocopfmt . [(0 2 2) ((cl-lib (0 5))) "Minor-mode to format Ruby code with RuboCop on save" single ((:commit . "34c69c9c923d0da223f7569a6ecc842095adcf85") (:keywords "convenience" "wp" "edit" "ruby" "rubocop") (:url . "https://github.com/jimeh/rubocopfmt.el"))]) (rubocop . [(0 5 0) ((emacs (24))) "An Emacs interface for RuboCop" single ((:commit . "980bedb455e3551d35a212fae515c054888907c1") (:keywords "project" "convenience") (:url . "https://github.com/bbatsov/rubocop-emacs"))]) (rubik . [(1 2) ((cl-lib (0)) (calc (0)) (emacs (25 3))) "Rubik's Cube" single ((:commit . "7ec955639865ca8e99a941843e19b12be5015a47") (:keywords "games") (:url . "https://github.com/Kurvivor19/rubik-mode"))]) (rtags . [(2 18) nil "A front-end for rtags" single ((:commit . "98d668e85cf9ae84e775742752c5656dd2df2f17") (:url . "http://rtags.net"))]) (rspec-mode . [(1 11) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:commit . "e289e52ec4b3aa1caf35957d721e5568eca2a3bb") (:keywords "rspec" "ruby") (:url . "http://github.com/pezra/rspec-mode"))]) (rsense . [(0 3) nil "RSense client for Emacs" single ((:commit . "e4297052ef32d06237e8bd1534a0caf70a34ad28") (:keywords "convenience"))]) (rope-read-mode . [(0 3 4) nil "Rearrange lines to read text smoothly" single ((:commit . "71e475ab35555e0a1eca26d73acf1ced911e422e") (:keywords "reading" "convenience" "chill") (:url . "https://github.com/marcowahl/rope-read-mode"))]) (roguel-ike . [(0 1 1) ((popup (0 5 0))) "A coffee-break roguelike" tar ((:commit . "706dcb0687e8016d7d776f9d9e5ace9fdbbca43c"))]) (robots-txt-mode . [(0 0 2) nil "Major mode for editing robots.txt" single ((:commit . "edf1f8082c88cb2ff5a784ba00f92c535aaa1c7d") (:keywords "web"))]) (robe . [(0 8 1) ((inf-ruby (2 5 1)) (emacs (24 4))) "Code navigation, documentation lookup and completion for Ruby" tar ((:commit . "22457d6855fb39b8aedf068556d0e2fbd2874d5b") (:keywords "ruby" "convenience" "rails") (:url . "https://github.com/dgutov/robe"))]) (rjsx-mode . [(0 4 0) ((emacs (24 4)) (js2-mode (20170504))) "Real support for JSX" single ((:commit . "f7d31589acd8a2dfcf4ca8851d2384e4f90364d0") (:keywords "languages") (:url . "https://github.com/felipeochoa/rjsx-mode/"))]) (ripgrep . [(0 4 0) nil "Front-end for ripgrep, a command line search tool" single ((:commit . "73595f1364f2117db49e1e4a49290bd6d430e345") (:keywords "ripgrep" "ack" "pt" "ag" "sift" "grep" "search") (:url . "https://github.com/nlamirault/ripgrep.el"))]) (rinari . [(2 11) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:commit . "e2ed2fa55ac3435a86b1cf6a4f2d29aebc309135") (:keywords "ruby" "rails" "project" "convenience" "web") (:url . "https://github.com/eschulte/rinari"))]) (rigid-tabs . [(1 0) ((emacs (24 3))) "Rigidify and adjust the visual alignment of TABs" single ((:commit . "c7c6b726806df7e8cb25a41b213a207850c91cb7") (:keywords "diff" "whitespace" "version control" "magit") (:url . "https://github.com/wavexx/rigid-tabs.el"))]) (rich-minority . [(1 0 2) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:commit . "3201f6e1769beb9f6cbbda392bef99fce337acf4") (:keywords "mode-line" "faces") (:url . "https://github.com/Malabarba/rich-minority"))]) (rib-mode . [(1 0 2) ((emacs (24))) "RenderMan® Interface Bytestream (RIB) Major Mode" single ((:commit . "4172e902fd66f235184c0eb6db7fd4a73dbd0866") (:url . "https://github.com/blezek/rib-mode"))]) (rg . [(1 5 0) ((cl-lib (0 5)) (emacs (24 3)) (s (1 10 0))) "A search tool based on ripgrep." single ((:commit . "d50bd106275f3ef7f77d0147857412fb065eef47") (:keywords "matching" "tools") (:url . "https://github.com/dajva/rg.el"))]) (reverse-theme . [(0 3) nil "Reverse theme for Emacs" single ((:commit . "3105c950bcb51c662c79b59ca102ef662c2b0be0") (:url . "https://github.com/syohex/emacs-reverse-theme"))]) (reveal-in-osx-finder . [(0 3 3) nil "Reveal file associated with buffer in OS X Finder" single ((:commit . "5710e5936e47139a610ec9a06899f72e77ddc7bc") (:keywords "os x" "finder") (:url . "https://github.com/kaz-yos/reveal-in-osx-finder"))]) (restclient-test . [(0 2) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single ((:commit . "a21e41b905b423e762eeb4da3a236c8b1aea8c49") (:url . "https://github.com/simenheg/restclient-test.el"))]) (restart-emacs . [(0 1 1) nil "Restart emacs from within emacs" single ((:commit . "e9292fe88d8be7d0ecf9f4f30ed98ffbc6bd689b") (:keywords "convenience") (:url . "https://github.com/iqbalansari/restart-emacs"))]) (resize-window . [(0 7) ((emacs (24)) (cl-lib (0 5))) "easily resize windows" single ((:commit . "dcbbd30f4f4435070a66a22c5a169b752ca9f904") (:keywords "window" "resize") (:url . "https://github.com/dpsutton/resize-mode"))]) (requirejs . [(1 1) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) "Requirejs import manipulation and source traversal." single ((:commit . "7d73453653b6b97cca59fcde8d529b5a228fbc01") (:keywords "javascript" "requirejs") (:url . "https://github.com/syohex/requirejs-emacs"))]) (request-deferred . [(0 3 0) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single ((:commit . "a3d080e57eb8be606fbf39d1baff94e1b16e1fb8"))]) (request . [(0 3 0) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single ((:commit . "a3d080e57eb8be606fbf39d1baff94e1b16e1fb8"))]) (req-package . [(1 2) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar ((:commit . "0c0ac7451149dac6bfda2adfe959d1df1c273de6") (:keywords "dotemacs" "startup" "speed" "config" "package") (:url . "https://github.com/edvorg/req-package"))]) (repo . [(0 1 3) ((emacs (24 3))) "Running repo from Emacs" single ((:commit . "d7b87cd515bad8a67d3a892a46a23f5fe81e08de") (:keywords "convenience") (:url . "https://github.com/canatella/repo-el"))]) (replace-with-inflections . [(0 3 0) ((string-inflection (1 0 5)) (inflections (1 1))) "Inflection aware `query-replace'" single ((:commit . "e0486653abf7c248024800132df23993cd617892") (:keywords "matching") (:url . "https://github.com/knu/replace-with-inflections.el"))]) (replace-symbol . [(1 1) nil "Rename symbols in expressions or buffers" single ((:commit . "baf949e528aee1881f455f9c84e67718bedcb3f6") (:url . "https://github.com/bmastenbrook/replace-symbol-el"))]) (repl-toggle . [(0 5 0) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single ((:commit . "934f59478a5c5577795f9507e945d564be368510") (:keywords "repl" "buffers" "toggle"))]) (repeatable-motion . [(0 2) ((emacs (24))) "Make repeatable versions of motions" tar ((:commit . "e664b0a4a3e39c4085378a28b5136b349a0afb22") (:keywords "motion" "repeatable") (:url . "https://github.com/willghatch/emacs-repeatable-motion"))]) (relax . [(0 2) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:commit . "6e33892623ab87833082262321dc8e1977209626") (:keywords "database" "http") (:url . "http://github.com/technomancy/relax.el"))]) (region-convert . [(0 0 1) nil "Convert string in region by Lisp function" single ((:commit . "31d370fce60d8cda04e1b9e4fe0e5d268fd37fe5") (:keywords "region" "convenience") (:url . "https://github.com/zonuexe/right-click-context"))]) (refine . [(0 3) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" single ((:commit . "9760e56ab849a4827e6c9425fdef6f5a7784c967") (:keywords "convenience"))]) (redtick . [(0 1 1) ((emacs (24))) "Smallest pomodoro timer (1 char)" single ((:commit . "14e3a07c229d1f660ca5129d6e8a52a8c68db94d") (:keywords "pomodoro" "timer") (:url . "http://github.com/ferfebles/redtick"))]) (redprl . [(0 1 0) ((emacs (24 3))) "Major mode for editing RedPRL proofs and interacting with RedPRL" single ((:commit . "d06d39486348a74981b2c4c4c2ed3af95b01d5ca") (:keywords "languages"))]) (redpen-paragraph . [(0 42) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "RedPen interface." single ((:commit . "f9569bc8e2993dea0f83cba5738a35ce32f82424") (:keywords "document" "proofreading" "help") (:url . "https://github.com/karronoli/redpen-paragraph.el"))]) (rectangle-utils . [(1 1) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single ((:commit . "6fe38fdd48ef5305a908b94a043a966ac3f2053a") (:url . "https://github.com/thierryvolpiatto/rectangle-utils"))]) (rect+ . [(1 0 10) nil "Extensions to rect.el" single ((:commit . "299b742faa0bc4448e0d5fe9cb98ab1eb93b8dcc") (:keywords "extensions" "data" "tools") (:url . "https://github.com/mhayashi1120/Emacs-rectplus"))]) (recover-buffers . [(1 0) nil "revisit all buffers from an auto-save file" tar ((:commit . "a1db7f084977697081da3497628e3514e032b966"))]) (rebecca-theme . [(1 2 1) ((emacs (24))) "Rebecca Purple Theme" single ((:commit . "239115183e0a354ccd5c2cb299893b558fbde05c") (:keywords "theme" "dark") (:url . "https://github.com/vic/rebecca-theme"))]) (reason-mode . [(0 3 0) ((emacs (24 0))) "A major emacs mode for editing Reason (based on rust-mode)" tar ((:commit . "6b53815a0405be1f364a082d22fe5c900409a01a") (:keywords "languages" "ocaml") (:url . "https://github.com/arichiardi/reason-mode"))]) (realgud . [(1 4 5) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0)) (cl-lib (0 5)) (emacs (24))) "A modular front-end for interacting with external debuggers" tar ((:commit . "09431a4561921bece36a6083b6e27ac4dc82432d") (:keywords "gdb" "python" "perl" "go" "bash" "nodejs" "zsh" "bashdb" "zshdb" "remake" "make" "trepan" "perldb" "pdb") (:url . "http://github.com/realgud/realgud/"))]) (real-auto-save . [(0 4) nil "enable real auto save" single ((:commit . "879144ca7e9bfa09a4fb57d5fe92a80250311f1e"))]) (react-snippets . [(0 1) ((yasnippet (0 7 0))) "Yasnippets for React" tar ((:commit . "bfc4b68b81374a6a080240592641091a7e8a6d61"))]) (rdf-prefix . [(1 10) nil "Prefix lookup for RDF" single ((:commit . "164136d05505275d42d1ca3a390f55fcc89694b8") (:keywords "convenience" "abbrev") (:url . "https://github.com/simenheg/rdf-prefix"))]) (rcirc-styles . [(1 3 2) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single ((:commit . "f313bf6a7470bed314b27c7a40558cb787d7bc67"))]) (rc-mode . [(1 0 13) nil "Major mode for the Plan9 rc shell" single ((:commit . "fe2e0570bf9c19a292e16b18fd4b0a256df5d93f") (:keywords "rc" "plan9" "shell") (:url . "https://github.com/mrhmouse/rc-mode.el"))]) (rbenv . [(0 0 3) nil "Emacs integration for rbenv" single ((:commit . "a613ee1941efa48ef5321bad39ac1ed8ad1540b8") (:keywords "ruby" "rbenv") (:url . "https://github.com/senny/rbenv.el"))]) (rats . [(0 2 0) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" tar ((:commit . "8ad4023a4b9b00c1224b10b0060f6dc60b4814a4") (:keywords "convenience"))]) (rase . [(1 1) nil "Run At Sun Event daemon" single ((:commit . "59b5f7e8102570b65040e8d55781c7ea28de7338") (:keywords "solar" "sunrise" "sunset" "midday" "midnight") (:url . "https://github.com/m00natic/rase/"))]) (ranger . [(0 9 8 5) ((emacs (24 4))) "Make dired more like ranger" single ((:commit . "584e4ae8cce1c54a44b40dd4c77fbb2f06d73ecb") (:keywords "files" "convenience") (:url . "https://github.com/ralesi/ranger"))]) (rake . [(0 4 1) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single ((:commit . "e680f1a8f2591af7c80cad188340601b101b5ddc") (:keywords "rake" "ruby") (:url . "https://github.com/asok/rake.el"))]) (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" single ((:commit . "19fbfded1baa98d12335f26f6d7b20e5ae44ce2e") (:url . "https://github.com/Fanael/rainbow-identifiers"))]) (rainbow-delimiters . [(2 1 3) nil "Highlight brackets according to their depth" single ((:commit . "93cd2dc873e7fedca7abc599cd97d46db4376ac7") (:keywords "faces" "convenience" "lisp" "tools") (:url . "https://github.com/Fanael/rainbow-delimiters"))]) (rainbow-blocks . [(1 0 0) nil "Block syntax highlighting for lisp code" single ((:commit . "8335993563aadd4290c5fa09dd7a6a81691b0690") (:url . "https://github.com/istib/rainbow-blocks"))]) (railscasts-reloaded-theme . [(1 5 0) nil "Railscasts Reloaded color theme" single ((:commit . "077af9cb791d9eba4c561cd7cb3b10d2fcfc39d2") (:url . "https://github.com/thegeorgeous/railscasts-reloaded-theme"))]) (racer . [(1 2) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0)) (f (0 18 2))) "The official Emacs package for Racer" single ((:commit . "8ad54e7674e49735390d63e3aea828a4d4bcddd0") (:keywords "abbrev" "convenience" "matching" "rust" "tools") (:url . "https://github.com/racer-rust/emacs-racer"))]) (r-autoyas . [(0 28) nil "Provides automatically created yasnippets for R function argument lists." tar ((:commit . "563254f01ce530ca4c9be1f23395e3fd7d520ff9") (:keywords "r" "yasnippet") (:url . "https://github.com/mlf176f2/r-autoyas.el"))]) (quiz . [(1 4) ((cl-lib (0 5)) (emacs (25))) "Multiple choice quiz game" single ((:commit . "69629937eaf994a51dad39c26355e1a56b9dcb95") (:keywords "games" "trivia" "quiz") (:url . "https://github.com/davep/quiz.el"))]) (quickrun . [(2 2 8) ((emacs (24 3))) "Run commands quickly" single ((:commit . "70e93e06778f44113f405aedec6187b925311d57") (:url . "https://github.com/syohex/emacs-quickrun"))]) (quasi-monochrome-theme . [(1 1) nil "Quasi Monochrome theme" tar ((:commit . "7d3afe41c2696ee25e3e4bcce987af1f589208d6") (:keywords "color" "theme" "monochrome"))]) (qt-pro-mode . [(1 0 0) ((emacs (24))) "Qt Pro/Pri major mode" single ((:commit . "66601441cc728a609765b149ee0d7dcfb74dc8bf") (:keywords "extensions"))]) (qml-mode . [(0 4) nil "Major mode for editing QT Declarative (QML) code." single ((:commit . "6c5f33ba88ae010bf201a80ee8095e20a724558c") (:keywords "qml" "qt" "qt declarative") (:url . "https://github.com/coldnew/qml-mode"))]) (ql . [(1 1) ((emacs (24))) "Control Quod Libet" single ((:commit . "d976414ba6aa576ad524b5ee5bfa620efd072258") (:keywords "multimedia") (:url . "https://github.com/ieure/ql-el"))]) (qiita . [(0 0 1) nil "No description available." single ((:commit . "33b6d3450bb4b3d0186c2475f6c78269c71fd1ff"))]) (pyvenv . [(1 15) nil "Python virtual environment interface" single ((:commit . "fa76fe18e290e318dbd17fd6f90ae0c492bea8b5") (:keywords "python" "virtualenv" "tools") (:url . "http://github.com/jorgenschaefer/pyvenv"))]) (pythonic . [(0 1 1) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single ((:commit . "c59a158942634d3c07e506b2376d96e8d5d1466f") (:url . "https://github.com/proofit404/pythonic"))]) (python-x . [(1 0) ((python (0 24)) (folding (0))) "python.el extras for interactive evaluation" single ((:commit . "e606469aafec2e6beda8c589540b88a5a6f6f33f") (:keywords "python" "eval" "folding") (:url . "https://github.com/wavexx/python-x.el"))]) (python-pytest . [(0 3 1) ((emacs (24 4)) (dash (2 12 0)) (dash-functional (2 12 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0))) "helpers to run pytest" single ((:commit . "6772ecfaa86f0f4a1a66bfd3a454c9b11956de70") (:keywords "pytest" "test" "python" "languages" "processes" "tools") (:url . "https://github.com/wbolster/emacs-python-pytest"))]) (python-mode . [(6 2 3) nil "Python major mode" tar ((:commit . "a0a534639bc6142c2c2f44bd7ca5878ad5f79518"))]) (python-environment . [(0 0 2) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:commit . "401006584e32864a10c69d29f14414828909362e") (:keywords "applications" "tools"))]) (pynt . [(1 0 0) ((emacs (24 4)) (ein (0 13 1)) (epc (0 1 1)) (deferred (0 5 1)) (helm (2 8 8))) "Generate and scroll EIN buffers from python code" tar ((:commit . "bc750cd244141005ea3b7bb87f75c6f6c5a5778f") (:keywords "convenience") (:url . "https://github.com/ebanner/pynt"))]) (pyimport . [(1 0) ((dash (2 8 0)) (s (1 9 0))) "Manage Python imports!" single ((:commit . "2c05712748f6b6624b15d524323f6391612683f4"))]) (pyim-wbdict . [(0 1) ((pyim (1 0))) "Some wubi dicts for pyim" tar ((:commit . "114489ed97e825ae11a8d09da6e873820cf23106") (:keywords "convenience" "chinese" "pinyin" "input-method" "complete") (:url . "https://github.com/tumashu/pyim-wbdict"))]) (pyim-basedict . [(0 3 1) nil "The default pinyin dict of pyim" tar ((:commit . "f71d0ffd9d2421f2b51cd0ccb89fd9eb43c09585") (:keywords "convenience" "chinese" "pinyin" "input-method" "complete") (:url . "https://github.com/tumashu/pyim-basedict"))]) (pyim . [(1 7) ((emacs (24 3)) (cl-lib (0 5)) (popup (0 1)) (async (1 6)) (pyim-basedict (0 1))) "A Chinese input method which support quanpin, shuangpin, wubi and cangjie." tar ((:commit . "3b1c5fbdf3b910f96771935785e28cf33d8d54cc") (:keywords "convenience" "chinese" "pinyin" "input-method") (:url . "https://github.com/tumashu/pyim"))]) (pyenv-mode . [(0 1 0) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single ((:commit . "b96c15fa1b83cad855e472eda06319ad35e34513") (:url . "https://github.com/proofit404/pyenv-mode"))]) (pydoc . [(0 1) nil "functional, syntax highlighted pydoc navigation" single ((:commit . "5392248e33d83ef05d3b2809b0c6b207786b2644") (:keywords "pydoc" "python") (:url . "https://github.com/statmobile/pydoc"))]) (pycarddavel . [(1 0 1) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single ((:commit . "6ead921066fa0156f20155b7126e5875ce11c328") (:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts"))]) (py-yapf . [(2016 1) nil "Use yapf to beautify a Python buffer" single ((:commit . "a878304202ad827a1f3de3dce1badd9ca8731146") (:url . "https://github.com/paetzke/py-yapf.el"))]) (py-isort . [(2016 1) nil "Use isort to sort the imports in a Python buffer" single ((:commit . "e67306f459c47c53a65604e4eea88a3914596560") (:url . "http://paetzke.me/project/py-isort.el"))]) (py-autopep8 . [(2016 1) nil "Use autopep8 to beautify a Python buffer" single ((:commit . "68e12d8788c91c7ec53a68acf1d23adb2ffa4788") (:url . "http://paetzke.me/project/py-autopep8.el"))]) (pushbullet . [(0 5 2) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:commit . "73c59a0f1dc04875b3e5a2c8afbc26c32128e445") (:keywords "convenience") (:url . "http://www.github.com/theanalyst/revolver"))]) (purescript-mode . [(13 10) nil "No description available." tar ((:commit . "6a4d4bdd178c65183a715c7729941a0b8fe5f253"))]) (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:commit . "d943149691abd7b66c85d58aee9657bfcf822c02") (:keywords "languages") (:url . "https://github.com/lunaryorn/puppet-mode"))]) (pungi . [(1 1) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single ((:commit . "41c9f8b7795e083bfd63ba0d06c789c250998723") (:keywords "convenience"))]) (punctuality-logger . [(0 8) nil "Punctuality logger for Emacs" single ((:commit . "708cae8e67dbae293c7c4be0ca5e49d76fac6714") (:keywords "reminder" "calendar") (:url . "https://gitlab.com/elzair/punctuality-logger"))]) (pug-mode . [(1 0 7) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for jade/pug template files" single ((:commit . "96718f802dad3acd5a3f770b1452b81e39f77d92") (:keywords "markup" "language" "jade" "pug") (:url . "https://github.com/hlissner/emacs-pug-mode"))]) (pt . [(0 0 3) nil "A front-end for pt, The Platinum Searcher." single ((:commit . "a539dc11ecb2d69760ff50f76c96f49895ce1e1e") (:keywords "pt" "ack" "ag" "grep" "search") (:url . "https://github.com/bling/pt.el"))]) (psysh . [(0 0 4) ((emacs (24 3)) (s (1 9 0)) (f (0 17))) "PsySH, PHP interactive shell (REPL)" single ((:commit . "f72d6fe41af2d9566d41b167cda66e97efdf8cfa") (:keywords "processes" "php") (:url . "https://github.com/zonuexe/psysh.el"))]) (psession . [(1 5) ((emacs (24)) (cl-lib (0 5)) (async (1 9 3))) "Persistent save of elisp objects." single ((:commit . "702d20897c0839568201bc6921d5f0f80b8778c0") (:url . "https://github.com/thierryvolpiatto/psession"))]) (psci . [(0 0 6) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:commit . "8c2d5a0ba604ec593f83f632b2830a87f41f84d4") (:keywords "purescript" "psci" "repl" "major" "mode") (:url . "https://github.com/ardumont/emacs-psci"))]) (protocols . [(1 6) ((cl-lib (0 5))) "Protocol database access functions." single ((:commit . "f5549f5d873a683af45a0e19c732524d5b964026") (:keywords "convenience" "net" "protocols") (:url . "https://github.com/davep/protocols.el"))]) (protobuf-mode . [(3 6 0 1) nil "major mode for editing protocol buffers." single ((:commit . "ce044817c7ba0aea27c3fd8e496635d94d20a755") (:keywords "google" "protobuf" "languages"))]) (prop-menu . [(0 1 2) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single ((:commit . "50b102c1c0935fd3e0c465feed7f27d66b21cdf3") (:keywords "convenience") (:url . "https://github.com/david-christiansen/prop-menu-el"))]) (prompt-text . [(0 1 0) nil "Various information in minibuffer prompt" single ((:commit . "bb9265ebfada42d0e3c67c809665e1e5d980691e") (:keywords "utility" "minibuffer") (:url . "https://github.com/10sr/prompt-text-el"))]) (projekt . [(0 1) ((emacs (24))) "some kind of staging for CVS" single ((:commit . "107232c191375b59d065354470d0af83062e2a4c"))]) (projectile-variable . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single ((:commit . "8d348ac70bdd6dc320c13a12941b32b38140e264") (:keywords "project" "convenience") (:url . "https://github.com/zonuexe/projectile-variable"))]) (projectile-trailblazer . [(0 2 0) ((emacs (24 4)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects using trailblazer" single ((:commit . "79299498d74876f2ac3fe8075716b39a5bdd04cd") (:keywords "rails" "projectile" "trailblazer" "languages") (:url . "https://github.com/micdahl/projectile-trailblazer"))]) (projectile-sift . [(0 2 0) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single ((:commit . "8c3f3d14a351a2394027d72ee0599aa73b9f0d13") (:keywords "sift" "projectile") (:url . "https://github.com/nlamirault/sift.el"))]) (projectile-ripgrep . [(0 4 0) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single ((:commit . "73595f1364f2117db49e1e4a49290bd6d430e345") (:keywords "ripgrep" "projectile") (:url . "https://github.com/nlamirault/ripgrep.el"))]) (projectile-rails . [(0 16 0) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single ((:commit . "31c9f90d472e07cb8e49fa8992b187b67c9c9a71") (:keywords "rails" "projectile") (:url . "https://github.com/asok/projectile-rails"))]) (projectile-git-autofetch . [(0 1 1) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single ((:commit . "da02069d906e6e7f28ea1dd6a9196529315a5cba") (:keywords "tools" "vc") (:url . "https://github.com/andrmuel/projectile-git-autofetch"))]) (projectile . [(0 14 0) ((dash (2 11 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:commit . "19fb9fa6590e1dc49afc3c8c5bd69cff6cf743a7") (:keywords "project" "convenience") (:url . "https://github.com/bbatsov/projectile"))]) (project-root . [(0 7) nil "Define a project root and take actions based upon it." single nil]) (project-persist-drawer . [(0 0 4) ((project-persist (0 3))) "Use a project drawer with project-persist." tar ((:commit . "35bbe132a4fab6a0fec15ce6c0fd2fe6a4aa9626"))]) (project-persist . [(0 3 2) nil "A minor mode to allow loading and saving of project settings." tar ((:commit . "a4e5de1833edb60656d8a04357c527d34e81d27c"))]) (project-explorer . [(0 14 3) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:commit . "7c2cc86a81f679dda355110f916366b64893a5d4") (:url . "https://github.com/sabof/project-explorer"))]) (prog-fill . [(1 0 0) ((emacs (25 1)) (cl-lib (0 6 1))) "Smartly format lines to use vertical space." single ((:commit . "3fbf7da6dd826e95c9077d659566ee29814a31d8") (:keywords "ahungry" "convenience" "c" "formatting" "editing") (:url . "https://github.com/ahungry/prog-fill"))]) (prodigy . [(0 7 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:commit . "3bacca898db9b3493883c95f923a87eb1ce807eb") (:url . "http://github.com/rejeep/prodigy.el"))]) (processing-mode . [(1 0) ((yasnippet (0 8 0))) "Major mode for Processing 2.0" single ((:commit . "228bc56369675787d60f637223b50ce3a1afebbd") (:keywords "languages" "snippets"))]) (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." single ((:commit . "4ba8fceb7dd733361ed975d80ac2caa3612fa78b") (:keywords "pretty" "unicode" "symbols") (:url . "https://github.com/akatov/pretty-mode"))]) (presentation . [(0 1 1) ((emacs (24 4)) (cl-lib (0 5))) "Display large character for presentation" single ((:commit . "e9e402d05a8b6d9e1e7fe853503c92fea4cf65cb") (:keywords "environment" "faces" "frames") (:url . "https://github.com/zonuexe/emacs-presentation-mode"))]) (prescient . [(2 0) ((emacs (25 1))) "Better sorting and filtering." single ((:commit . "515959a2523b43608c9d06dcf8adde8911ce42b9") (:keywords "extensions") (:url . "https://github.com/raxod502/prescient.el"))]) (prassee-theme . [(1 0) nil "A dark contrast color theme for Emacs." single ((:commit . "9850c806d39acffdef8e91e1a31b54a7620cbae3") (:url . "http://github.com/prassee/prassee-emacs-theme"))]) (ppd-sr-speedbar . [(0 0 6) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar ((:commit . "19d3e924407f40a6bb38c8fe427a159af755adce"))]) (powershell . [(0 1) nil "No description available." single ((:commit . "7316f44d0b528552f5a0692f778e5f0efd964299"))]) (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:commit . "d3dcfc57a36111d8e0b037d90c6ffce85ce071b2") (:keywords "mode-line") (:url . "http://github.com/milkypostman/powerline/"))]) (pos-tip . [(0 4 6) nil "Show tooltip at point" single ((:commit . "1b81694d1dc29253db0e855b82563f84a32b38d4") (:keywords "tooltip"))]) (popwin . [(1 0 0) nil "Popup Window Manager." single ((:commit . "95dea14c60019d6cccf9a3b33e0dec4e1f22c304") (:keywords "convenience"))]) (popup-imenu . [(0 6) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single ((:commit . "c5e2e69adbd3a630e4cb750965a1aee8c10c1f09") (:keywords "popup" "imenu") (:url . "https://github.com/ancane/popup-imenu"))]) (popup-complete . [(0 2) ((popup (0 5 0))) "completion with popup" single ((:commit . "e362d4a005b36646ffbaa6be604e9e31bc406ca9") (:url . "https://github.com/syohex/emacs-popup-complete"))]) (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:commit . "46632ab9652dacad56fd961cd6def25a015170ae") (:keywords "lisp"))]) (pophint . [(0 9 3) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:commit . "28dc6a76e726f371bcca3160c27ae2017324399c") (:keywords "popup") (:url . "https://github.com/aki2o/emacs-pophint"))]) (ponylang-mode . [(0 0 9) ((dash (2 10 0))) "Major mode for Pony code" single ((:commit . "38786ba7f9f5709d511e27b85028b2dc6aff532d") (:keywords "languages" "programming") (:url . "https://github.com/seantallen/ponylang-mode"))]) (pony-snippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar ((:commit . "56018b23a11563c6766ed706024b22aa5a4556b4") (:keywords "snippets" "pony") (:url . "https://github.com/seantallen/pony-snippets"))]) (pomidor . [(0 2) ((emacs (24 3)) (alert (1 2))) "Simple and cool pomodoro timer" tar ((:commit . "5780ce2aaa98882a79e92f5eefaaf10fd8dbee3a") (:keywords "tools" "time" "applications" "pomodoro technique") (:url . "https://github.com/TatriX/pomidor"))]) (point-pos . [(0 1) nil "Save and restore point positions" single ((:commit . "4cd0f8c8d1296c5c64f708b6a5835e8520c51b68") (:keywords "tools" "convenience") (:url . "https://github.com/alezost/point-pos.el"))]) (pocket-reader . [(0 1 1) ((emacs (25 1)) (dash (2 13 0)) (kv (0 0 19)) (pocket-lib (0 1)) (s (1 10)) (ov (1 0 6)) (rainbow-identifiers (0 2 2)) (org-web-tools (0 1))) "Client for Pocket reading list" single ((:commit . "e65a7e7529ece4fb7a738c062e73d5c07ace9574") (:keywords "pocket") (:url . "https://github.com/alphapapa/pocket-reader.el"))]) (po-mode . [(0 19 8 1) nil "No description available." single ((:commit . "c737bf843616ca984c9416048a2da845e9ad3f50"))]) (plur . [(0 1) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single ((:commit . "5bdd3b9a2f0624414bd596e798644713cd1545f0") (:url . "https://github.com/xuchunyang/plur"))]) (plsense-direx . [(0 2 0) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:commit . "8a2f465264c74e04524cc789cdad0190ace43f6c") (:keywords "perl" "convenience") (:url . "https://github.com/aki2o/plsense-direx"))]) (plsense . [(0 4 7) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:commit . "f6fb22607a5252b2556d2e7fa14f1bcab5d9747a") (:keywords "perl" "completion") (:url . "https://github.com/aki2o/emacs-plsense"))]) (plenv . [(0 32) nil "A plenv wrapper for Emacs" single ((:commit . "ee937d0f3a1a7ba2d035f45be896d3ed8fefaee2") (:keywords "emacs" "perl"))]) (play-routes-mode . [(1 0) nil "Play Framework Routes File Support" single ((:commit . "d7eb682cd474d90b3a3d005290cd6d4fe9f94cae") (:keywords "play" "scala") (:url . "https://github.com/brocode/play-routes-mode/"))]) (play-crystal . [(0 1 2) ((emacs (24 4)) (dash (2 12 0)) (request (0 2 0))) "https://play.crystal-lang.org integration." single ((:commit . "86b54346e7c832c14f8e5654a462f6490a6b11d7") (:keywords "convenience") (:url . "https://github.com/veelenga/play-crystal.el"))]) (platformio-mode . [(0 2 2) ((projectile (0 13 0))) "PlatformIO integration" single ((:commit . "470a80c1d764a6e1680a2b41ca5a847869a07a27") (:url . "https://github.com/zachmassia/platformio-mode"))]) (plantuml-mode . [(1 2 5) nil "Major mode for PlantUML" single ((:commit . "5a2e8d0dd2ba9286fc3c82d8689d25050290f68d") (:keywords "uml" "plantuml" "ascii"))]) (plain-theme . [(8) ((emacs (24))) "Plain theme without syntax highlighting" single ((:commit . "2609a811335d58cfb73a65d6307c156fe09037d3"))]) (pkgbuild-mode . [(0 14) nil "Interface to the ArchLinux package manager" single ((:commit . "6bb7cb3b0599ac0ae3c1d8d5014aefc1ecff7965"))]) (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" single ((:commit . "f9bb471ee95d1c5fe9adc6b0e98db2ddff3ddc0e") (:keywords "convenience") (:url . "https://github.com/lunaryorn/pkg-info.el"))]) (pixiv-novel-mode . [(0 0 3) nil "Major mode for pixiv novel" single ((:commit . "4dd9caf749190fab8f0b33862b3894b635de46c5") (:keywords "novel" "pixiv"))]) (pip-requirements . [(0 5) ((dash (2 8 0))) "A major mode for editing pip requirements files." single ((:commit . "93e0595f037e3a95c1c1cd6f00f7e052a9a25912"))]) (pinyinlib . [(0 1 1) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single ((:commit . "39943d226c2a42a9013421a0b4b6d5d3696bf234") (:keywords "extensions"))]) (pinyin-search . [(1 1 0) nil "Search Chinese by Pinyin" single ((:commit . "5895cccfa6b43263ee243c5642cc16dd9a69fb4e") (:keywords "chinese" "search") (:url . "https://github.com/xuchunyang/pinyin-search.el"))]) (pinboard-popular . [(0 1 2) ((loop (1 4))) "Displays links from the pinboard.in popular page." single ((:commit . "df6f5928f1e5a614fb770f6f4b9aefe0bf4d1c25") (:keywords "pinboard") (:url . "https://github.com/asimpson/pinboard-popular"))]) (pillar . [(1 0 0) ((makey (0 3))) "Major mode for editing Pillar files" tar ((:commit . "13a7f676544cc66005ccd8e6fc1c25e4ccd6f909") (:keywords "markup" "major-mode") (:url . "http://github.com/DamienCassou/pillar-mode"))]) (phpunit . [(0 16 0) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar ((:commit . "a13706733f98be3639c47311fc820b3b50f4bc33") (:keywords "tools" "php" "tests" "phpunit") (:url . "https://github.com/nlamirault/phpunit.el"))]) (phpstan . [(0 2 1) ((emacs (24 3))) "Interface to PHPStan." single ((:commit . "3653f2a316f4199cbd3238e984eea2325e2618d5") (:keywords "tools" "php") (:url . "https://github.com/emacs-php/phpstan.el"))]) (phpcbf . [(0 9 2) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single ((:commit . "b556b548ceb061b002389d6165d2cc63d8bddb5d") (:keywords "tools" "php") (:url . "https://github.com/nishimaki10/emacs-phpcbf"))]) (phpactor . [(0 0 2) ((emacs (24 3)) (cl-lib (0 5))) "Interface to Phpactor" tar ((:commit . "fc301e6388332bb23162adaff2c59bb9214d66a4") (:keywords "tools" "php") (:url . "https://github.com/emacs-php/phpactor.el"))]) (php-runtime . [(0 1 0) ((emacs (25)) (cl-lib (0 5))) "Language binding bridge to PHP" single ((:commit . "fa4312863245511462b75cb31df2f8558288f4df") (:keywords "processes" "php") (:url . "https://github.com/emacs-php/php-runtime.el"))]) (php-mode . [(1 19 1) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing PHP code" tar ((:commit . "aacb133b3d89ed0da8d936a162f49afc2aa5dfd4") (:keywords "languages" "php") (:url . "https://github.com/ejmr/php-mode"))]) (php-cs-fixer . [(1 0 -2 4) ((cl-lib (0 5))) "php-cs-fixer wrapper." single ((:commit . "ca2c075a22ad156c336d2aa093fb6394c9f6c112") (:keywords "languages" "php") (:url . "https://github.com/OVYA/php-cs-fixer"))]) (php-auto-yasnippets . [(2 3 1) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:commit . "1950d83cbcc5c5d62cd3bc432e1595870fe8cabf") (:url . "https://github.com/ejmr/php-auto-yasnippets"))]) (phi-search-mc . [(2 2 1) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:commit . "4c6d2d39feb502febb81fc98b7b5854d88150c69") (:keywords "search" "cursors") (:url . "https://github.com/knu/phi-search-mc.el"))]) (phi-search . [(20160630) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar ((:commit . "40b86bfe9ae15377fbee842b1de3d93c2eb7dd69") (:url . "http://hins11.yu-yake.com/"))]) (phan . [(0 0 4) ((emacs (24)) (composer (0 0 8)) (f (0 17))) "Utility functions for Phan (PHP static analizer)" single ((:commit . "6b077b3421a0b2c0b98a6906b8ab0d14d9d7bf50") (:keywords "tools" "php") (:url . "https://github.com/emacs-php/phan.el"))]) (ph . [(0 1 0) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar ((:commit . "ed45c371642e313810b56c45af08fdfbd71a7dfe"))]) (pfuture . [(1 2) ((emacs (24 4))) "a simple wrapper around asynchronous processes" single ((:commit . "8b5cd8dfb8769d2b24484a313d3d21938afd3dfb") (:url . "https://github.com/Alexander-Miller/pfuture"))]) (perspeen . [(0 1) nil "An Emacs package for multi-workspace" single ((:commit . "30ee14339cf8fe2e59e5384085afee3f8eb58dda") (:keywords "lisp"))]) (perspective . [(2 1) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single ((:commit . "7d1a16fb3058966ac3b2bea52225373bd3aa30cd") (:keywords "workspace" "convenience" "frames") (:url . "http://github.com/nex3/perspective-el"))]) (persp-projectile . [(0 2 0) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:commit . "7686633acf44402fa90429759cca6a155e4df2b9") (:keywords "project" "convenience"))]) (persp-mode . [(2 9 6) nil "windows/buffers sets shared among frames + save/load." single ((:commit . "1dfea0de788f6d25ee47b5c62ddbeaf9e8e92f06") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience") (:url . "https://github.com/Bad-ptr/persp-mode.el"))]) (persp-fr . [(0 0 3) ((emacs (25 0)) (persp-mode (2 9 6))) "In persp-mode, show perspective list in the GUI window title" single ((:commit . "4d2d1a75019f520742da79f1aeed9c4a960677e0") (:keywords "perspectives" "workspace" "windows" "convenience") (:url . "http://github.com/rocher/persp-fr"))]) (persistent-soft . [(0 8 10) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ((:commit . "a1e0ddf2a12a6f18cab565dee250f070384cbe02") (:keywords "data" "extensions") (:url . "http://github.com/rolandwalker/persistent-soft"))]) (persistent-scratch . [(0 3 1) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single ((:commit . "0bfd717d28ce9e262741b06341c61306602c7711") (:url . "https://github.com/Fanael/persistent-scratch"))]) (per-buffer-theme . [(1 5) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes"))]) (pelican-mode . [(20170808) ((emacs (25))) "Minor mode for editing Pelican sites" single ((:commit . "8b13c30c4ec38dd535eadf26e463f8616d5c089c") (:keywords "convenience" "editing") (:url . "https://git.korewanetadesu.com/pelican-mode.git"))]) (peg . [(0 6) nil "Parsing Expression Grammars in Emacs Lisp" single ((:commit . "081efeca91d790c7fbc90871ac22c40935f4833b"))]) (pdf-tools . [(0 80) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar ((:commit . "920e598c1ec6eb9a48dde32282d10adc9cc3b011") (:keywords "files" "multimedia"))]) (pcsv . [(1 3 6) nil "Parser of csv" single ((:commit . "91599aaba70a8e8593fa2f36165af82cbd35e41e") (:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el"))]) (pcre2el . [(1 8) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single ((:commit . "166a10472002010692dbc35f323ffb8110a294c5") (:url . "https://github.com/joddie/pcre2el"))]) (pcomplete-extension . [(1 0) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single ((:commit . "839740c90de857e18db2f578d6660951522faab5") (:url . "https://github.com/thierryvolpiatto/pcomplete-extension"))]) (pcache . [(0 4 2) ((eieio (1 3))) "persistent caching for Emacs." single ((:commit . "025ef2411fa1bf82a9ac61dfdb7bd4cedaf2d740"))]) (paxedit . [(1 1 8) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single ((:commit . "644eb7036a475fbcba4de5d46d6940b1e8ef33cd") (:keywords "lisp" "refactoring" "context") (:url . "https://github.com/promethial/paxedit"))]) (pathify . [(0 1) nil "Symlink your scripts into a PATH directory" single ((:commit . "335332a900717ae01bde5ccb8f3dc97a5350f123") (:keywords "convenience") (:url . "https://gitlab.com/alezost-emacs/pathify"))]) (pastery . [(0 2 1) ((emacs (24 4)) (request (0 2 0))) "paste snippets to pastery.net." tar ((:commit . "4493be98b743b4d062cb4e00760125e394a55022") (:keywords "tools") (:url . "https://github.com/diasbruno/pastery.el"))]) (pastelmac-theme . [(1 0) ((emacs (24 1))) "a soothing theme with a pastel color palette" single ((:commit . "bead21741e3f46f6506e8aef4469d4240a819389") (:keywords "themes") (:url . "https://github.com/bmastenbrook/pastelmac-theme-el"))]) (pastehub . [(0 5 2) nil "A client for the PasteHub cloud service" single ((:commit . "37b045c67659c078f1517d0fbd5282dab58dca23") (:url . "https://github.com/kiyoka/pastehub"))]) (password-store-otp . [(0 1 5) ((emacs (25)) (s (1 9 0)) (password-store (0 1))) "Password store (pass) OTP extension support" single ((:commit . "a39a64a91de36e87b852339635bd3c5fb0e32441") (:keywords "tools" "pass") (:url . "https://github.com/volrath/password-store-otp.el"))]) (password-store . [(1 7 2) ((emacs (24)) (f (0 11 0)) (s (1 9 0)) (with-editor (2 5 11))) "Password store (pass) support" single ((:commit . "8d4604923072c523fbe1ab9ef6cfed61e7ae4bc5") (:keywords "tools" "pass" "password" "password-store") (:url . "https://www.passwordstore.org/"))]) (passthword . [(1 4) ((cl-lib (0 5))) "Simple password manager" single ((:commit . "58a91defdbeec9014b4e46f909a7411b3a627285"))]) (passmm . [(0 3 1) ((emacs (24 4)) (password-store (0))) "A minor mode for pass (Password Store)." single ((:commit . "2e0cd4e8ef7e6017dbc295664c925d32d6fdc688") (:url . "https://github.com/pjones/passmm"))]) (pass . [(1 7) ((emacs (24)) (password-store (0 1)) (f (0 17))) "Major mode for password-store.el" single ((:commit . "2ccf4f68fa4d2aab7efbdc26ebdc45ac1ef1819c") (:keywords "password-store" "password" "keychain"))]) (parseclj . [(0 1 0) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar ((:commit . "93a0f43529598984835f88e64b62fa68bebda89b") (:keywords "lisp"))]) (parsec . [(0 1 3) ((emacs (24)) (cl-lib (0 5))) "Parser combinator library" single ((:commit . "8f0c266d8b9b0ee5fcf9b80c518644b2849ff3b3") (:keywords "extensions") (:url . "https://github.com/cute-jumper/parsec.el"))]) (parsebib . [(2 3 2) ((emacs (24 3))) "A library for parsing bib files" single ((:commit . "c8d59deb20552f9a1885297b5ae0b8f753d191a5") (:keywords "text" "bibtex"))]) (parinfer . [(0 4 10) ((dash (2 13 0)) (cl-lib (0 5))) "Simpler Lisp editing" tar ((:commit . "5b3b247d68eeaf7404598cbcbf2158e07f16e65d") (:keywords "parinfer") (:url . "https://github.com/DogLooksGood/parinfer-mode"))]) (parent-mode . [(2 3) nil "get major mode's parent modes" single ((:commit . "db692cf08deff2f0e973e6e86e26662b44813d1b") (:url . "https://github.com/Fanael/parent-mode"))]) (paren-face . [(1 0 4) nil "a face for parentheses in lisp modes" single ((:commit . "a45d111153a76c481fa0b36d6172ac90e073dfc4") (:url . "https://github.com/tarsius/paren-face"))]) (paredit-everywhere . [(0 4) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:commit . "72b7cd5dcdc02233a32e9f1a6c2d21dc30532170") (:keywords "languages" "convenience"))]) (paredit . [(24) nil "minor mode for editing parentheses" single ((:commit . "82bb75ceb2ddc272d6618d94874b7fc13181a409") (:keywords "lisp"))]) (paradox . [(2 5 2) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:commit . "dfdfbec8b4a3b71966c134f00c3f5edfa87b6245") (:keywords "package" "packages") (:url . "https://github.com/Malabarba/paradox"))]) (paper-theme . [(1 0 0) ((emacs (24)) (hexrgb (0))) "A minimal Emacs colour theme." single ((:commit . "15af5e31492f79dc0d47787150ef39d6318a2608") (:url . "http://gkayaalp.com/emacs.html#paper") (:keywords "theme" "paper"))]) (pangu-spacing . [(0 4) nil "Minor-mode to add space between Chinese and English characters." single ((:commit . "034b4ef8a1b29bf7bfed6a916380941506ed26ed") (:url . "http://github.com/coldnew/pangu-spacing"))]) (pandoc-mode . [(2 25) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar ((:commit . "436a5847df3326436ec546dbb360d23c8e0e2030") (:keywords "text" "pandoc"))]) (pandoc . [(0 0 1) ((emacs (24))) "Pandoc interface" single ((:commit . "0f59533bbd8494fea3172551efb6ec49f61ba285") (:keywords "documentation" "markup" "converter") (:url . "https://github.com/zonuexe/pandoc.el"))]) (panda-theme . [(0 1) ((emacs (24))) "Panda Theme" single ((:commit . "ae24179e7a8a9667b169f00dbd891257530c1d22") (:url . "https://github.com/jamiecollinson/emacs-panda-theme"))]) (pallet . [(0 9 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar ((:commit . "0e1ae11e1ebfe644cbf832df62ac2dbf6ecd0501"))]) (page-break-lines . [(0 11) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:commit . "67b5928a7f14568baf2716b5741e13659a86b9ea") (:keywords "convenience" "faces") (:url . "https://github.com/purcell/page-break-lines"))]) (packed . [(3 0 0) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" single ((:commit . "c41c3dfda86ae33832ffc146923e2a4675cbacfa") (:keywords "compile" "convenience" "lisp" "package" "library") (:url . "https://github.com/emacscollective/packed"))]) (package-utils . [(1 0 1) ((restart-emacs (0 1 1))) "Extensions for package.el" single ((:commit . "5621b95c56b55499f0463fd8b29501da25d861bd") (:keywords "package" "convenience") (:url . "https://github.com/Silex/package-utils"))]) (package-safe-delete . [(0 1 7) ((emacs (24)) (epl (0 7 -4))) "Safely delete package.el packages" single ((:commit . "138171e4fc03c0ef05a8260cbb5cd2e114c1c194") (:url . "https://github.com/Fanael/package-safe-delete"))]) (package-lint . [(0 5) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" single ((:commit . "1cee5135bd9a12e1b28e515a28093a751b4f7dd1") (:keywords "lisp") (:url . "https://github.com/purcell/package-lint"))]) (package-build . [(2 2) ((cl-lib (0 5))) "Tools for assembling a package archive" tar ((:commit . "9aac3517bde14346eadbe2c7d354672a456b9db3") (:keywords "tools"))]) (package+ . [(1 1 0) nil "Extensions for the package library." single ((:commit . "4a9618a44ec4f26a14e0136cd9d3c4855fceb25b") (:keywords "extensions" "tools") (:url . "TBA"))]) (pabbrev . [(4 1) nil "Predictive abbreviation expansion" single ((:commit . "127a8b10cf352b0491fefd2f4178ba78ee587564"))]) (ox-twbs . [(1 1 1) nil "Bootstrap compatible HTML Back-End for Org" single ((:commit . "2414e6b1de7deb6dd2ae79a7be633fdccb9c2f28") (:keywords "org" "html" "publish" "twitter" "bootstrap") (:url . "https://github.com/marsmining/ox-twbs"))]) (ox-pandoc . [(1 150707) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." single ((:commit . "035f1d60a0139349232c382cfd23a96902b7003d") (:keywords "tools") (:url . "https://github.com/kawabata/ox-pandoc"))]) (ox-ioslide . [(0 2) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) "Export org-mode to Google I/O HTML5 slide." tar ((:commit . "e81f7a6dab512da7eaa8c2c50c673538b97db267") (:keywords "html" "presentation") (:url . "http://github.com/coldnew/org-ioslide"))]) (ox-hugo . [(0 8) ((emacs (24 4)) (org (9 0))) "Hugo Markdown Back-End for Org Export Engine" tar ((:commit . "9751d34e1133b89a533a978c085b0715f85db648") (:keywords "org" "markdown" "docs") (:url . "https://ox-hugo.scripter.co"))]) (ox-gfm . [(1 0) nil "Github Flavored Markdown Back-End for Org Export Engine" single ((:commit . "99f93011b069e02b37c9660b8fcb45dab086a07f") (:keywords "org" "wp" "markdown" "github"))]) (ox-epub . [(0 3) ((emacs (24 3)) (org (9))) "Export org mode projects to EPUB" single ((:commit . "3d958203e169cbfb2204c43cb4c5543befec0b9d") (:keywords "hypermedia") (:url . "http://github.com/ofosos/org-epub"))]) (owdriver . [(0 0 6) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:commit . "0479389d9df9e70ff9ce69dff06252d3aa40fc86") (:keywords "convenience") (:url . "https://github.com/aki2o/owdriver"))]) (overseer . [(0 3 0) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) "Ert-runner Integration Into Emacs" single ((:commit . "cf532a4e373e3da2077ccbaa48d4bfacd14661ba") (:url . "http://www.github.com/tonini/overseer.el"))]) (overcast-theme . [(1 1 0) ((emacs (24))) "A dark but vibrant color theme for Emacs" single ((:commit . "009257956522dedf07d9e136ee41ac0b1b0b3518") (:keywords "theme") (:url . "http://ismail.teamfluxion.com"))]) (ov . [(1 0 6) ((emacs (24 3))) "Overlay library for Emacs Lisp" single ((:commit . "4e1c254d74bc1773c92f1613c3865cdcb4bc7095") (:keywords "overlay") (:url . "https://github.com/ShingoFukuyama/ov.el"))]) (outshine . [(2 0) nil "outline with outshine outshines outline" single ((:commit . "cf1097692b3ea0367d3c821769399fec5831e200") (:url . "https://github.com/tj64/outshine"))]) (outorg . [(2 0) nil "Org-style comment editing" single ((:commit . "e946cda497bae53fca6fa1579910237e216170bf") (:url . "https://github.com/tj64/outorg"))]) (outlook . [(0 1) ((emacs (24 4))) "send emails in MS Outlook style" tar ((:commit . "5847c6f13b106cb54529080e9050be5b8b5be867") (:keywords "mail") (:url . "https://github.com/asavonic/outlook.el"))]) (osx-trash . [(0 2) ((emacs (24 1))) "System trash for OS X" tar ((:commit . "529619b84d21e18a38ec5255eb40f6b8ede38b2a") (:keywords "files" "convenience" "tools" "unix") (:url . "https://github.com/lunaryorn/osx-trash.el"))]) (osx-pseudo-daemon . [(2 1) nil "Daemon mode that plays nice with OSX." single ((:commit . "4d10e327cd8ee5bb7f006d68744be21c7097c1fc") (:keywords "convenience" "osx") (:url . "https://github.com/DarwinAwardWinner/osx-pseudo-daemon"))]) (osx-location . [(0 4) nil "Watch and respond to changes in geographical location on OS X" tar ((:commit . "110aee945b53ea550e4debe69bf3c077d940ec8c"))]) (osx-dictionary . [(0 4) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar ((:commit . "0e5e5f1b0077a62673855889d529dd4f0cc8f665") (:keywords "mac" "dictionary") (:url . "https://github.com/xuchunyang/osx-dictionary.el"))]) (osx-clipboard . [(0 1) nil "Use the OS X clipboard from terminal Emacs" single ((:commit . "e46dd31327a3f92f77b013b4c9b1e5fdd0e5c73d") (:url . "https://github.com/joddie/osx-clipboard-mode"))]) (osx-browse . [(0 8 8) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ((:commit . "6186a6020e143e90d557c8d062c44fcdba0516c7") (:keywords "hypermedia" "external") (:url . "http://github.com/rolandwalker/osx-browse"))]) (orgtbl-show-header . [(1 0 0) nil "Show the header of the current column in the minibuffer" single ((:commit . "f0f48ccc0f96d4aa2a676ff609d9dddd71748e6f"))]) (orglink . [(1 1 3) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single ((:commit . "e9e90e16ddaceaf99c9b251a215d6338b9762b4d") (:keywords "hypertext") (:url . "https://github.com/tarsius/orglink"))]) (orgit . [(1 5 1) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single ((:commit . "d909f92d3b1b42184143fd5e6d4c6a2762477ab7") (:url . "https://github.com/magit/orgit"))]) (orgbox . [(0 5 0) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:commit . "ecaf5a064431cf92922338c974df8fce1a8f1734") (:keywords "org") (:url . "https://github.com/yasuhito/orgbox"))]) (org2web . [(0 9 1) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (el2org (0 10)) (simple-httpd (0 1))) "A static site generator based on org mode." tar ((:commit . "5243b399927a4c474bb3b8d1c8a00799df1f27d7"))]) (org2jekyll . [(0 1 9) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar ((:commit . "35e11ffa24b140d2e247df195489fca344bd0c08") (:keywords "org-mode" "jekyll" "blog" "publish") (:url . "https://github.com/ardumont/org2jekyll"))]) (org2blog . [(1 0 2) ((org (8 3)) (xml-rpc (1 6 12)) (metaweblog (1 0 1)) (htmlize (1 51))) "Blog from Org mode to wordpress" tar ((:commit . "bd2028b6a79daa63fc5481deaed63c4efc681be0"))]) (org-wild-notifier . [(0 2 4) ((alert (1 2)) (dash (2 13 0)) (emacs (24 4))) "Customizable org-agenda notifications" single ((:commit . "5da63fc00db20b60eb46a241cc8308547d85b3ad") (:keywords "notification" "alert" "org" "org-agenda" "agenda") (:url . "https://github.com/akhramov/org-wild-notifier.el"))]) (org-vcard . [(0 2 0) nil "org-mode support for vCard export and import." tar ((:commit . "a6ab82ab28fa78f7c985d3ea9c9fafdd17f7ea8b") (:keywords "outlines" "org" "vcard") (:url . "https://github.com/flexibeast/org-vcard"))]) (org-trello . [(0 8 1) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar ((:commit . "c38c36159cdeb2348c4e9ca75246aa9cc1dfd76c"))]) (org-tree-slide . [(2 8 4) nil "A presentation tool for org-mode" single ((:commit . "dccd80418a4444df5e8301695ff0d0dfe86a3c21") (:keywords "org-mode" "presentation" "narrowing"))]) (org-transform-tree-table . [(0 1 2) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single ((:commit . "0a9bf07f01bc5fc3b349aff64e83999a8de83b52") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert") (:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table"))]) (org-tracktable . [(0 3 1) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single ((:commit . "8e0e60a582a034bd66d5efb72d513140b7d4d90a") (:keywords "org" "writing") (:url . "https://github.com/tty-tourist/org-tracktable"))]) (org-toodledo . [(2 1 0) nil "No description available." tar ((:commit . "5473c1a2762371b198862aa8fd83fd3ec57485a4"))]) (org-time-budgets . [(1 0 1) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single ((:commit . "f2a8fe3d9d6104f3dd61fabbb385a596363b360b"))]) (org-themis . [(0 4 1) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single ((:commit . "4b4bf1fa1e853664bf006dda8afe2db00e522aaa") (:keywords "org-mode" "elisp" "project") (:url . "http://github.com/zellio/org-themis"))]) (org-tfl . [(0 4 0) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar ((:commit . "f0d7d39106a1de5457f5160cddd98ab892b61066") (:keywords "org" "tfl") (:url . "https://github.com/storax/org-tfl"))]) (org-table-sticky-header . [(0 1 1) ((org (8 2 10))) "Sticky header for org-mode tables" single ((:commit . "4dba2dc9a3ed63f58aa946aeec84a52d46ca4043") (:keywords "extensions"))]) (org-table-comment . [(0 2 0) nil "Org table comment modes." single ((:commit . "33b9966c33ecbc3e27cca67c2f2cdea04364d74e") (:keywords "org-mode" "orgtbl") (:url . "http://github.com/mlf176f2/org-table-comment.el"))]) (org-sync . [(0 3 0) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar ((:commit . "8c65dceaa2f3d436f83ed591916f22556a6e7f91") (:keywords "org" "synchronization" "issue tracking" "github" "redmine") (:url . "https://github.com/arbox/org-sync"))]) (org-static-blog . [(1 2 1) ((emacs (24 3))) "a simple org-mode based static blog generator" single ((:commit . "f69d2fd6671fb250fbd87df5efa898a7bf5b9bda") (:url . "https://github.com/bastibe/org-static-blog"))]) (org-rich-yank . [(0 2 0) ((emacs (24 4))) "paste with org-mode markup and link to source" single ((:commit . "f6bbf973bef7063c6ab475db25a630bc7ee317da") (:keywords "convenience" "hypermedia" "org"))]) (org-repo-todo . [(0 0 3) nil "Simple repository todo management with org-mode" single ((:commit . "cba6145c6821fd2bbd96a1c9ef2346c281b76ad2") (:keywords "convenience") (:url . "https://github.com/waymondo/org-repo-todo"))]) (org-ref . [(1 1 1) ((dash (2 11 0)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, cross-references and bibliographies in org-mode" tar ((:commit . "db6c52f41faba686a378a8c57356a563f5cef496") (:keywords "org-mode" "cite" "ref" "label") (:url . "https://github.com/jkitchin/org-ref"))]) (org-readme . [(20130322 926) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ((:commit . "15054e42351b5ec6b629c55760a578516e035355") (:keywords "header2" "readme.org" "emacswiki" "git") (:url . "https://github.com/mlf176f2/org-readme"))]) (org-random-todo . [(0 5 2) ((emacs (24 3)) (alert (1 2))) "notify of random TODO's" single ((:commit . "60364c18725d2f3898a9099e7e546ae406dd6578") (:keywords "org" "todo" "notification"))]) (org-protocol-jekyll . [(0 1) nil "Jekyll's handler for org-protocol" single ((:commit . "c1ac46793eb9bf22b1a601e841947428be5c9766"))]) (org-projectile-helm . [(1 1 0) ((org-projectile (1 0 0)) (helm (2 3 1)) (emacs (25))) "helm functions for org-projectile" single ((:commit . "48f621b595e748c5e03431f237facf258ffc9443") (:keywords "org" "projectile" "todo" "helm" "outlines") (:url . "https://github.com/IvanMalison/org-projectile"))]) (org-projectile . [(1 1 0) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24)) (s (1 9 0)) (org-category-capture (0 0 0))) "Repository todo management for org-mode" single ((:commit . "48f621b595e748c5e03431f237facf258ffc9443") (:keywords "org-mode" "projectile" "todo" "tools" "outlines") (:url . "https://github.com/IvanMalison/org-projectile"))]) (org-pomodoro . [(2 1 0) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar ((:commit . "a6d867865f1a033fb5a09cca6643045d7ebac49c") (:url . "https://github.com/lolownia/org-pomodoro"))]) (org-pdfview . [(0 4) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" single ((:commit . "3a96bfb57cb158ac02cfb4225512699c66f5221d") (:keywords "org" "pdf-view" "pdf-tools"))]) (org-password-manager . [(0 0 1) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." single ((:commit . "d3a33ddfe583180bdb76cfb8bbd772e0078b24a3") (:keywords "password") (:url . "https://git.leafac.com/org-password-manager"))]) (org-page . [(0 41) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) "a static site generator based on org mode" tar ((:commit . "09febf89d8dcb226aeedf8164169b31937b64439"))]) (org-outlook . [(0 11) nil "Outlook org" tar ((:commit . "070c37d017ccb71d94c3c69c99632fa6570ec2cc") (:keywords "org-outlook") (:url . "https://github.com/mlf176f2/org-outlook.el"))]) (org-noter . [(1 0 2) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" single ((:commit . "1ee98e210454c02336bda86505480b22a89cb067") (:keywords "lisp" "pdf" "interleave" "annotate" "external" "sync" "notes" "documents" "org-mode") (:url . "https://github.com/weirdNox/org-noter"))]) (org-multiple-keymap . [(0 2) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single ((:commit . "20eb3be6be9f0abbad9f0d007e40cb00c8109201") (:keywords "convenience" "org-mode") (:url . "https://github.com/myuhe/org-multiple-keymap.el"))]) (org-mru-clock . [(0 2 1) ((emacs (24 3))) "clock in/out of tasks with completion and persistent history" single ((:commit . "72e6cd0a6458ae0392f587026233f553278ab481") (:keywords "convenience" "calendar"))]) (org-mime . [(0 1 1) ((emacs (24 3)) (cl-lib (0 5))) "org html export for text/html MIME emails" single ((:commit . "0752659f7a19cead182584fabc9544464f69b83e") (:keywords "mime" "mail" "email" "html") (:url . "http://github.com/org-mime/org-mime"))]) (org-make-toc . [(0 2) ((emacs (25 1)) (dash (2 12)) (s (1 10 0)) (org (9 0))) "Automatic tables of contents for Org files" single ((:commit . "c27e3600473100daa3007fb134cd3fe13e821d90") (:keywords "org" "convenience") (:url . "http://github.com/alphapapa/org-make-toc"))]) (org-linkany . [(0 0 2) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:commit . "ed4a6614b56c9baef31647ea728b3d5fae6ed3a2") (:keywords "org" "completion") (:url . "https://github.com/aki2o/org-linkany"))]) (org-link-travis . [(0 0 1) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:commit . "596615ad8373d9090bd4138da683524f0ad0bda5") (:keywords "org") (:url . "https://github.com/aki2o/org-link-travis"))]) (org-kanban . [(0 4 3) ((dash (2 13 0)) (emacs (24 4))) "kanban dynamic block for org-mode." single ((:commit . "e391db5c4db31b23d542fe31b4e93a7fc8712d86") (:keywords "org-mode" "org" "kanban" "tools") (:url . "http://github.com/gizmomogwai/org-kanban"))]) (org-journal . [(1 14 2) ((emacs (25 1))) "a simple org-mode based journaling mode" single ((:commit . "2395db4deb255c05d0d3a75c95f53263b74939c9") (:url . "http://github.com/bastibe/org-journal"))]) (org-jira . [(3 1 1) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0)) (s (0 0 0))) "Syncing between Jira and Org-mode." tar ((:commit . "03d6ebcf177db7b208c6a99386695e839f314314") (:keywords "ahungry" "jira" "org" "bug" "tracker") (:url . "https://github.com/ahungry/org-jira"))]) (org-index . [(5 8 9) ((emacs (24 4))) "A personal adaptive index for org" single ((:commit . "c26f48ec26f5d345e354845c7686fed4751d2136") (:url . "https://github.com/marcIhm/org-index"))]) (org-if . [(0 2 0) nil "Interactive Fiction Authoring System for Org-Mode." tar ((:commit . "fab602cc1bbee7a4e99c0083e129219d3f9ed2e8"))]) (org-gnome . [(0 3) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ((:commit . "1012d47886cfd30eed25b73d9f18e475e0155f88") (:keywords "org" "gnome"))]) (org-gcal . [(0 2) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single ((:commit . "badd3629e6243563c30ff1dd0452b7601f6cc036") (:keywords "convenience") (:url . "https://github.com/myuhe/org-gcal.el"))]) (org-evil . [(0 5 0) ((dash (2 13 0)) (evil (0)) (monitor (0)) (org (0))) "Evil extensions for Org." tar ((:commit . "3b4620edc606412ef75c0b5aa637af22486eb126") (:keywords "convenience" "evil" "org") (:url . "https://github.com/guiltydolphin/org-evil"))]) (org-elisp-help . [(1 0 0) ((cl-lib (0 5)) (org (9 0))) "org links to emacs-lisp documentation" single ((:commit . "3e33ab1a2933dd7f2782ef91d667a37f12d633ab") (:keywords "org" "remember" "lisp") (:url . "https://github.com/tarsius/org-elisp-help"))]) (org-edit-latex . [(0 8 3) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" single ((:commit . "39cbc9a99acb030f537c7269ab93958187321871") (:keywords "org" "latex") (:url . "https://github.com/et2010/org-edit-latex"))]) (org-dp . [(1) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar ((:commit . "d740c2065120f71762c48877da1a31dea881e98e") (:url . "https://github.com/tj64/org-dp"))]) (org-download . [(0 1 0) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single ((:commit . "a57beffd0f09b218a9487d1750960878c1d5b12c") (:keywords "images" "screenshots" "download") (:url . "https://github.com/abo-abo/org-download"))]) (org-doing . [(0 1) nil "Keep track of what you're doing" tar ((:commit . "e099514cfc162f8fe3d383456a7964743b0455d5") (:keywords "tools" "org") (:url . "https://github.com/omouse/org-doing"))]) (org-commentary . [(0 3 0) ((dash (2 0)) (emacs (24 4)) (org (8 0))) "generate or update conventional library headers using Org mode files" tar ((:commit . "2eeeb0f506e30ef82263e67279d837a79cbde021") (:keywords "convenience" "docs" "tools") (:url . "https://github.com/smaximov/org-commentary"))]) (org-clock-csv . [(1 1) ((org (8 3)) (s (1 0))) "Export `org-mode' clock entries to CSV format." single ((:commit . "20ab6ee4395bedc0a7b8dfaf7b51f2c63dc8d2c6") (:keywords "calendar" "data" "org") (:url . "https://github.com/atheriel/org-clock-csv"))]) (org-category-capture . [(1 1 0) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." single ((:commit . "48f621b595e748c5e03431f237facf258ffc9443") (:keywords "org-mode" "todo" "tools" "outlines") (:url . "https://github.com/IvanMalison/org-projectile"))]) (org-bullets . [(0 2 4) nil "Show bullets in org-mode as UTF-8 characters" single ((:commit . "b70ac2ec805bcb626a6e39ea696354577c681b36") (:url . "https://github.com/sabof/org-bullets"))]) (org-bookmark-heading . [(1 0 0) ((emacs (24 4))) "Emacs bookmark support for org-mode" single ((:commit . "70b014e09977371a8c9bad03085c116693062b19") (:keywords "hypermedia" "outlines") (:url . "http://github.com/alphapapa/org-bookmark-heading"))]) (org-board . [(1018) nil "bookmarking and web archival system for Org mode." single ((:commit . "405bfd630f1b31bd77158bc8e79aab86812cba65") (:keywords "org" "bookmarks" "archives") (:url . "https://github.com/scallywag/org-board"))]) (org-beautify-theme . [(0 3 1) nil "A sub-theme to make org-mode more beautiful." single ((:commit . "7b7a7cbd4f25f77e8bd81783f517b2b182220fd9") (:keywords "org" "theme"))]) (org-babel-eval-in-repl . [(1 4) ((eval-in-repl (0 9 2)) (matlab-mode (3 3 6)) (ess (16 10)) (emacs (24))) "Eval org-mode babel code blocks in various REPLs." tar ((:commit . "3f26e3cf8bed9ec8e025e4143e708e6e470258d4") (:keywords "literate programming" "reproducible research" "async execution") (:url . "https://github.com/diadochos/org-babel-eval-in-repl"))]) (org-autolist . [(0 14) nil "Improved list management in org-mode" single ((:commit . "c82d1e83e982b5f0c106b8800e5b0cfd5f73fdc1") (:keywords "lists" "checklists" "org-mode") (:url . "https://github.com/calvinwyoung/org-autolist"))]) (org-alert . [(0 1 0) ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) "Notify org deadlines via notify-send" single ((:commit . "685c18aa5ce994360c7f9e8bbf49590c412187ac") (:keywords "org" "org-mode" "notify" "notifications") (:url . "https://github.com/groksteve/org-alert"))]) (org-agenda-property . [(1 3 1) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:commit . "2ff628a14a3e758863bbd88fba4db9f77fd2c3a8") (:keywords "calendar") (:url . "http://github.com/Bruce-Connor/org-agenda-property"))]) (org-ac . [(0 0 2) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:commit . "9cbbda79e2fe964ded3f39cf7a2e74f1be3d6b9a") (:keywords "org" "completion") (:url . "https://github.com/aki2o/org-ac"))]) (operate-on-number . [(1 1 0) nil "Operate on number at point with arithmetic functions" single ((:commit . "6a17272e2b6e23260edb1b5eeb01905a1f37e0a6") (:keywords "editing") (:url . "https://github.com/knu/operate-on-number.el"))]) (opensource . [(0 2 0) ((s (1 11 0)) (dash (2 12 1)) (pkg-info (0 6 0)) (request (0 2 0))) "Client for Opensource API" tar ((:commit . "27d06be45c852e84e47c33cbd0f4c344fd9a0370") (:keywords "opensource") (:url . "https://github.com/nlamirault/opensource.el"))]) (opener . [(0 2 2) ((request (0 2 0)) (emacs (24)) (cl-lib (0 5))) "opening urls as buffers" tar ((:commit . "c384f67278046fdcd220275fdd212ab85672cbeb") (:keywords "url" "http" "files") (:url . "https://github.com/0robustus1/opener.el"))]) (opencl-mode . [(1 0) nil "Syntax coloring for opencl kernels" single ((:commit . "14109a4bb56105a9c052ae49ad4c638b4cc210b2") (:keywords "c" "opencl") (:url . "https://github.com/salmanebah/opencl-mode"))]) (opam . [(0 1) ((emacs (24 1))) "OPAM tools" single ((:commit . "83fb2850d29ec792754e0af18b015e089aad2695") (:keywords "convenience") (:url . "https://github.com/lunaryorn/opam.el"))]) (omnisharp . [(4 2) ((emacs (24 4)) (flycheck (30)) (dash (2 12 0)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (shut-up (0 3 2)) (f (0 19 0))) "Omnicompletion (intellisense) and more for C#" tar ((:commit . "588b8482685adedbc56933cb13c58d9cc6a82456") (:keywords "languages" "csharp" "c#" "ide" "auto-complete" "intellisense") (:url . "https://github.com/Omnisharp/omnisharp-emacs"))]) (omni-tags . [(0 1 2) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar ((:commit . "a7078bfbc9a6256efd0e57530df9fd7808bc2185") (:keywords "convenience") (:url . "http://github.com/AdrieanKhisbe/omni-tags.el"))]) (omni-scratch . [(0 6 0) nil "Easy and mode-specific draft buffers" single ((:commit . "636374c59c7d33c2f72c97ad8ba9fb4854f2324d") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/AdrieanKhisbe/omni-scratch.el"))]) (omni-quotes . [(0 5 0) ((dash (2 8)) (omni-log (0 3 3)) (f (0 19 0)) (s (1 11 0)) (ht (2 1))) "Random quotes displayer" tar ((:commit . "454116c1dd6581baaeefd6b9310b1b6b7a5c36d0") (:keywords "convenience") (:url . "https://github.com/AdrieanKhisbe/omni-quotes.el"))]) (omni-log . [(0 3 6) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (2 13 0))) "Logging utilities" tar ((:commit . "20021eb788cbeec0371145468430b259686f519d") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/AdrieanKhisbe/omni-log.el"))]) (omni-kill . [(0 6 0) nil "Kill all the things" single ((:commit . "904549c8fd6ac3cf22b5d7111ca8944e179cffea") (:keywords "convenience" "editing" "tools"))]) (olivetti . [(1 6 1) ((emacs (24 4))) "Minor mode for a nice writing environment" single ((:commit . "02272654f1d920ea2da5a4b553acd5e5cc096ab1") (:keywords "wp" "text") (:url . "https://github.com/rnkn/olivetti"))]) (offlineimap . [(1) nil "Run OfflineIMAP from Emacs" single ((:commit . "646482203aacdf847d57d0a96263fddcfc33fb61") (:url . "http://julien.danjou.info/offlineimap-el.html"))]) (octicons . [(0 1) ((cl-lib (0 5))) "octicons utility" tar ((:commit . "77bb1a49045f89b3eaf9bcffeefbb9e1abaee556") (:url . "https://github.com/syohex/emacs-octicons"))]) (ocp-indent . [(1 6 1) nil "automatic indentation with ocp-indent" single ((:commit . "5d83bc71d12c89850cb0fdff50d4830adb705b6c") (:keywords "ocaml" "languages") (:url . "http://www.typerex.org/ocp-indent.html"))]) (ocodo-svg-modelines . [(0 1 4) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar ((:commit . "a6c5b9a7536c7a8fa3bd9d9dafdebc8d99903018"))]) (obfusurl . [(2 1) ((cl-lib (0 5))) "Obfuscate URLs so they aren't spoilers" single ((:commit . "7a5a41905000ce2ec1fd72509a5567e5fd9f47e5") (:keywords "convenience" "web" "text") (:url . "https://github.com/davep/obfusurl.el"))]) (ob-uart . [(0 1 0) nil "org-babel support for UART communication" single ((:commit . "90daeac90a9e75c20cdcf71234c67b812110c50e") (:keywords "tools" "comm" "org-mode" "uart" "literate programming" "reproducible development") (:url . "https://www.0x7.ch"))]) (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ((:commit . "6b39cc1a94a1071107a4391684b1bffb5b9826f3") (:keywords "org" "babel" "translate" "translation") (:url . "https://github.com/krisajenkins/ob-translate"))]) (ob-sml . [(0 2) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:commit . "5dc966acbe65e9e158bfa90018035bf52d4dafd4") (:keywords "literate programming" "reproducible research") (:url . "http://orgmode.org"))]) (ob-sagemath . [(0 4) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar ((:commit . "450d510a5eb1fd644d0037e9f02271ca33639fb0") (:keywords "sagemath" "org-babel") (:url . "https://github.com/stakemori/ob-sagemath"))]) (ob-prolog . [(1 0 2) nil "org-babel functions for prolog evaluation." single ((:commit . "efa86bb70fd1907806f3e43705aff54d35582442") (:keywords "literate programming" "reproducible research") (:url . "https://github.com/ljos/ob-prolog"))]) (ob-hy . [(1 0 0) ((emacs (24 4))) "org-babel functions for Hy-lang evaluation" tar ((:commit . "a3512f274709dc4ab6c18d7955d361f8715505f0") (:keywords "hy" "literate programming" "reproducible research") (:url . "https://github.com/brantou/ob-hy"))]) (ob-http . [(0 2 0) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar ((:commit . "20393dd8130d21a3f06d8514da14c5ffdd88ae44") (:url . "http://github.com/zweifisch/ob-http"))]) (ob-coffeescript . [(1 0 0) nil "org-babel functions for coffee-script evaluation, and fully implementation!" single ((:commit . "b70f3d822c707cb02333fcb739ba4874614cad2a") (:keywords "coffee-script" "literate programming" "reproducible research") (:url . "https://github.com/brantou/ob-coffeescript"))]) (ob-blockdiag . [(20170728 113) nil "org-babel functions for blockdiag evaluation" single ((:commit . "634fcf64a4ae735afe7001d865b03f5d71e23046") (:keywords "tools" "convenience") (:url . "https://github.com/corpix/ob-blockdiag.el"))]) (ob-async . [(1 0 0) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" single ((:commit . "5984d6172c179528adf9aeba414598604dfb5c9a") (:keywords "tools") (:url . "https://github.com/astahlman/ob-async"))]) (o-blog . [(2 0) nil "" tar ((:commit . "5db9594c6e3439c000b183551d7975c2e29131f4") (:keywords "emacs"))]) (nyan-mode . [(1 1 2) nil "Nyan Cat shows position in current buffer in mode-line." tar ((:commit . "4195cd368aca8f05a71cbff4e60cfa9dde10319a") (:keywords "nyan" "cat" "lulz" "scrolling" "pop tart cat" "build something amazing") (:url . "https://github.com/TeMPOraL/nyan-mode/"))]) (nvm . [(0 2 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single ((:commit . "d18b13e8275a57ee6c55dc71b671f02a8e6522ad") (:keywords "node" "nvm") (:url . "http://github.com/rejeep/nvm.el"))]) (numbers . [(1 4) ((emacs (24))) "Display information and trivia about numbers" single ((:commit . "74be68b94143f042ce461b2a69202f515acaf20c") (:keywords "games" "trivia" "maths" "numbers") (:url . "https://github.com/davep/numbers.el"))]) (number-lock . [(1 0 0) nil "Enter symbols on your number keys without pressing shift" single ((:commit . "846e86e2b3b07410f69e70d3ba7afb072b5585da") (:keywords "convenience") (:url . "https://github.com/Liu233w/number-lock.el"))]) (nsis-mode . [(0 44) nil "NSIS-mode" tar ((:commit . "f1bf701c37680553c8f51462e0829d0dd6c53187") (:keywords "nsis") (:url . "http://github.com/mlf176f2/nsis-mode"))]) (nrepl-sync . [(0 3 1) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:commit . "471a08df87687a3eab61b3b8bf25a2e0962b5d5b") (:url . "https://github.com/phillord/lein-sync"))]) (npm-mode . [(0 6 0) ((emacs (24 1))) "minor mode for working with npm projects" single ((:commit . "84b35211cba4f2d5f03b8dc2b60ae4b03d90bf8a") (:keywords "convenience" "project" "javascript" "node" "npm") (:url . "https://github.com/mojochao/npm-mode"))]) (noxml-fold . [(0 0 2) nil "Fold away XML things." single ((:commit . "56fbc44b25cee9f8719edb3c7f8b1c4327dc1051") (:keywords "xml" "folding") (:url . "https://github.com/paddymcall/noxml-fold"))]) (nov . [(0 2 4) ((dash (2 12 0)) (esxml (0 3 3)) (emacs (24 4))) "Featureful EPUB reader mode" single ((:commit . "3be6e8cd1a6311b0782ca2aa3d9961bec6183632") (:keywords "hypermedia" "multimedia" "epub") (:url . "https://github.com/wasamasa/nov.el"))]) (notmuch-labeler . [(0 1) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ((:commit . "d65d1129555d368243df4770ecc1e7ccb88efc58") (:keywords "emacs" "package" "elisp" "notmuch" "emails") (:url . "https://github.com/DamienCassou/notmuch-labeler"))]) (notmuch . [(0 27) nil "run notmuch within emacs" tar ((:commit . "079826f124823f134e5877173e9380edc2eeb3dc") (:url . "https://notmuchmail.org/"))]) (nose . [(0 1 1) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing"))]) (nord-theme . [(0 3 0) ((emacs (24))) "An arctic, north-bluish clean and elegant theme" single ((:commit . "290aa9221a10e107acb0f06d0ec338fcb3e44785") (:url . "https://github.com/arcticicestudio/nord-emacs"))]) (nofrils-acme-theme . [(0 1 0) ((emacs (24))) "Port of \"No Frils Acme\" Vim theme." single ((:commit . "7825f88cb881a84eaa5cd1689772819a18eb2943") (:url . "https://gitlab.com/esessoms/nofrils-theme"))]) (nodemcu-mode . [(0 1 0) ((emacs (25))) "Minor mode for NodeMCU" single ((:commit . "8effd9f3df40b6b92a2f05e4d54750b624afc4a7") (:keywords "tools") (:url . "https://github.com/andrmuel/nodemcu-mode"))]) (nodejs-repl . [(0 1 6) nil "Run Node.js REPL" single ((:commit . "16770656a4072f8fbbd29d0cace4893a3d5541b1"))]) (noccur . [(0 2) nil "Run multi-occur on project/dired files" single ((:commit . "6cc02ce07178a61ae38a849f80472c01969272bc") (:keywords "convenience"))]) (no-littering . [(0 5 14) ((cl-lib (0 5))) "help keeping ~/.emacs.d clean" single ((:commit . "9bffebc0f4858a06ba374f1d48a7dffd3537b93e") (:url . "https://github.com/emacscollective/no-littering"))]) (nixos-options . [(0 0 1) ((emacs (24)) (json (1 4))) "Interface for browsing and completing NixOS options." single ((:commit . "5fc8fa29bea9dd8e9c822af92f9bc6ddc223635f") (:keywords "unix") (:url . "http://www.github.com/travisbhartwell/nix-emacs/"))]) (nix-mode . [(1 11 13) nil "Major mode for editing Nix expressions" single ((:commit . "0ec723375bc6008a8a88024962b052c3fbbaf4b8") (:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (nix-buffer . [(3 1 1) ((f (0 17 3)) (emacs (24 4))) "Set up buffer environments with nix" single ((:commit . "db57cda36e7477bdc7ef5a136357b971b1d4d099") (:url . "https://github.com/shlevy/nix-buffer/tree/master/"))]) (ninja-mode . [(1 8 2) ((emacs (24))) "Major mode for editing .ninja files" single ((:commit . "253e94c1fa511704baeb61cf69995bbf09ba435e"))]) (nim-mode . [(0 4 1) ((emacs (24 4)) (epc (0 1 1)) (let-alist (1 0 1)) (commenter (0 5 1)) (flycheck (28))) "A major mode for the Nim programming language" tar ((:commit . "86abed21b9b718ac65cc167f208e0bd5b92c79ed") (:keywords "nim" "languages"))]) (night-owl-theme . [(0 1 0) ((emacs (24))) "A color theme for the night owls out there" single ((:commit . "3d1b6b319173c2f0aaf42a294ab01fba473f11c4") (:url . "http://github.com/aaronjensen/night-owl-theme"))]) (niceify-info . [(1 0 1) nil "improve usability of Info pages" single ((:commit . "66b45916f1994e16ee023d29fa7cf8fec48078f1"))]) (nginx-mode . [(1 1 9) nil "major mode for editing nginx config files" single ((:commit . "a2bab83c2eb233d57d76b236e7c141c2ccc97005") (:keywords "languages" "nginx"))]) (netease-music . [(1 0) nil "listen netease music" single ((:commit . "f3bba59664e1c4c4ed47f16fa786151272d99a70") (:keywords "tools") (:url . "https://github.com/nicehiro/netease-music"))]) (neotree . [(0 5 2) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar ((:commit . "5e1271655170f4cdc6849258e383c548a4e6e3d0") (:url . "https://github.com/jaypei/emacs-neotree"))]) (neon-mode . [(1 3 0) nil "Simple major mode for editing neon files" single ((:commit . "99d15e46beaf1e7d71e39a00cce810df1f33229d") (:keywords "conf"))]) (nemerle . [(1 2) nil "major mode for editing nemerle programs" single ((:commit . "556270ce8b97668a65e9ec20a05f78c3dffeac60") (:keywords "nemerle" "mode" "languages"))]) (ncl-mode . [(0 99 2) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar ((:commit . "164e504e25cec1812fbae5c3dae164d9f6018ece"))]) (navorski . [(0 2 7) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:commit . "4546d4e4dfbec20ee8c423c045408a3388a9eab9") (:keywords "terminal"))]) (navi-mode . [(2 0) nil "major-mode for easy buffer-navigation" single ((:commit . "5c979b3b3873b0e67751a1321a9e271d066f2022") (:url . "https://github.com/tj64/navi"))]) (nav-flash . [(1 1 0) nil "Briefly highlight the current line" single ((:commit . "9054a0f9b51da9e5207672efc029ba265ba28f34") (:keywords "extensions" "navigation" "interface") (:url . "http://github.com/rolandwalker/nav-flash"))]) (nasm-mode . [(1 1 1) ((emacs (24 3))) "NASM x86 assembly major mode" single ((:commit . "d990ed94d902b74a5c834fb567e03307607cee45") (:url . "https://github.com/skeeto/nasm-mode"))]) (narrowed-page-navigation . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single ((:commit . "b215adbac4873f56fbab65772062f0f5be8058a1") (:keywords "outlines"))]) (narrow-reindent . [(0 2 0) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single ((:commit . "87466aac4dbeb79597124dd077bf5c704872fd3d") (:url . "https://github.com/emallson/narrow-reindent.el"))]) (names . [(20151201 0) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar ((:commit . "00862c57ae6363ba86d1e5ce138929a1b6d5c7e6") (:keywords "extensions" "lisp") (:url . "https://github.com/Malabarba/names"))]) (nameless . [(1 0 2) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single ((:commit . "ab1a5c589378334eafca105af1a17f73b9065423") (:keywords "convenience" "lisp") (:url . "https://github.com/Malabarba/nameless"))]) (name-this-color . [(0 3 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single ((:commit . "e37cd1291d5d68d4c8d6386eab9cb9d94fd3bcfa") (:keywords "lisp" "color" "hex" "rgb" "shade" "name") (:url . "https://github.com/knl/name-this-color.el"))]) (myterminal-controls . [(1 0 0) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single ((:commit . "59ff3a02e34969a2ac608906937cb65cb514f9f1") (:keywords "convenience" "shortcuts") (:url . "http://ismail.teamfluxion.com"))]) (mysql-to-org . [(1 0 0) ((emacs (24 3)) (s (1 11 0))) "Minor mode to output the results of mysql queries to org tables" single ((:commit . "0f51b174a0ee6c9820baf9d79783923b270f3ffc"))]) (mykie . [(0 3 1) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar ((:commit . "ab8f7549f9018c26278d101af1b90997c9e5e0b3") (:keywords "emacs" "configuration" "keybind") (:url . "https://github.com/yuutayamada/mykie-el"))]) (mwim . [(0 4) nil "Switch between the beginning/end of line or code" single ((:commit . "462207227b98a6a4356d51419f5ad5ba9356e5cf") (:keywords "convenience") (:url . "https://github.com/alezost/mwim.el"))]) (mustache-mode . [(1 3) nil "A major mode for editing Mustache files." single ((:commit . "bf9897eb287ca47ced65d7d4e07ea61ea0aec39f"))]) (mustache . [(0 23) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar ((:commit . "b0ea352813592424164520a49e86c04600242752"))]) (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar ((:commit . "b3bd49c756cd959c0fb998d27eaf3d273570b05e"))]) (multi-web-mode . [(0 2 1) nil "multiple major mode support for web editing" tar ((:commit . "0517b9e2b3052533ac0cb71eba7073ed309fce06") (:keywords "convenience" "languages" "wp"))]) (multi-term . [(1 2) nil "Managing multiple terminal buffers in Emacs." single ((:commit . "c9e67edb772f2d9f9da8d887dc746459cfbce244") (:keywords "term" "terminal" "multiple buffer") (:url . "http://www.emacswiki.org/emacs/download/multi-term.el"))]) (multi-run . [(1) ((emacs (24)) (window-layout (1 4))) "Manage multiple terminals and run commands on them" single ((:commit . "87d9eed414999fd94685148d39e5308c099e65ca") (:keywords "tools" "terminals") (:url . "https://www.github.com/sagarjha/multi-run"))]) (multi-project . [(0 0 26) ((emacs (25))) "Find files, compile, search, and switch between" single ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "convenience" "project" "management"))]) (multi-line . [(0 1 5) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar ((:commit . "778c7510b7f066f53cf1f96a6ad1079fda5dc1f7") (:keywords "multi" "line" "length" "whitespace" "programming") (:url . "https://github.com/IvanMalison/multi-line"))]) (multi . [(2 0 1) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:commit . "884203b11fdac8374ec644cca975469aab263404") (:keywords "multimethod" "generic" "predicate" "dispatch") (:url . "http://github.com/kurisuwhyte/emacs-multi"))]) (mu4e-maildirs-extension . [(0 8) nil "Show mu4e maildirs summary in mu4e-main-view" single ((:commit . "8b384b0bbda46c473dea3ee7dc68c2b3f2548528") (:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mu4e-alert . [(1 0) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" single ((:commit . "3453e25ff6c07c1b768b2a79fdb9fc5c97100e76") (:keywords "mail" "convenience") (:url . "https://github.com/iqbalansari/mu4e-alert"))]) (mtg-deck-mode . [(0 2) ((emacs (24 4))) "Major mode to edit MTG decks" tar ((:commit . "7774641630ef85999ab2f6d57eebddbc7c1e7244") (:keywords "data" "mtg" "magic") (:url . "https://github.com/mattiasb/mtg-deck-mode"))]) (msvc . [(1 3 7) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (2 0 0))) "Microsoft Visual C/C++ mode" tar ((:commit . "dfc529aa6da8b46b0a0c7db9a0e5e9bc33ab1fb3") (:keywords "languages" "completion" "syntax check" "mode" "intellisense") (:url . "https://github.com/yaruopooner/msvc"))]) (mqtt-mode . [(0 1 0) ((emacs (25)) (dash (2 12 0))) "client for interaction with MQTT servers" single ((:commit . "613e70e9b9940e635e779994b5c83f86eb62c8e6") (:keywords "tools") (:url . "https://github.com/andrmuel/mqtt-mode"))]) (mpv . [(0 1 0) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single ((:commit . "059135de3979e044f14503806047476d9be9f0e8") (:keywords "tools" "multimedia") (:url . "https://github.com/kljohann/mpv.el"))]) (mpmc-queue . [(0 1 1) ((emacs (26 0)) (queue (0 2 0))) "a multiple-producer-multiple-consumer queue" single ((:commit . "4775ddcb120528828ef1fcb7ee761524a0907a31") (:keywords "lisp" "async") (:url . "https://github.com/smizoe/mpmc-queue"))]) (mpdel . [(0 6 0) ((emacs (25 1)) (libmpdel (0 7 0))) "Play and control your MPD music" tar ((:commit . "a1e05828e3bc03679530b4cfff1306706171cb78") (:keywords "multimedia") (:url . "https://gitlab.petton.fr/mpdel/mpdel"))]) (mozc-temp . [(1 0 0) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single ((:commit . "7f5dd5fc8ceeca9b1822f7e056a4be67e2e74959") (:url . "https://github.com/HKey/mozc-temp"))]) (moz-controller . [(1 0) ((moz (0))) "Control Firefox from Emacs" single ((:commit . "42fd842039620de7fb122f7e4ffc1ab802ee97c5") (:url . "https://github.com/RenWenshan/emacs-moz-controller"))]) (moz . [(1 1 0) nil "Lets current buffer interact with inferior mozilla." single ((:commit . "646208b67e6c9c56d188db1eba999846d518935f") (:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el"))]) (mowedline . [(3 3 0) nil "elisp utilities for using mowedline" single ((:commit . "c17501b48ded8261d815ab60bf14cddf7040be72"))]) (move-text . [(2 0 8) nil "Move current line or region with M-up or M-down." single]) (move-dup . [(1 0 0) nil "Eclipse-like moving and duplicating lines or rectangles." single]) (mosey . [(0 2) ((emacs (24 4))) "Mosey around your buffers" single]) (morlock . [(1 0 2) nil "more font-lock keywords for elisp" single]) (moom . [(1 2 0) ((emacs (25 1))) "Commands to control frame position and size" tar]) (moody . [(0 3 0) ((emacs (25 3))) "Tabs and ribbons for the mode line" single]) (monroe . [(0 3 1) nil "Yet another client for nREPL" single]) (monokai-theme . [(3 5 3) nil "A fruity color theme for Emacs." single]) (monitor . [(0 3 0) ((dash (2 13 0))) "Utilities for monitoring expressions." tar]) (moe-theme . [(1 0 0) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar]) (modern-cpp-font-lock . [(0 1 3) nil "Font-locking for \"Modern C++\"" single]) (mode-line-debug . [(1 2 3) nil "show status of `debug-on-error' in the mode-line" single]) (mode-icons . [(0 4 0) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar]) (modalka . [(0 1 5) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single]) (mocker . [(0 3 1) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single]) (mocha-snippets . [(1 0 0) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar]) (mocha . [(1 1) ((js2-mode (20150909))) "Run Mocha or Jasmine tests" single]) (mmt . [(0 2 0) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single]) (mmm-mako . [(1 1) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mmm-jinja2 . [(0 1) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single]) (mips-mode . [(1 1 1) nil "Major-mode for MIPS assembly" single]) (minitest . [(0 8 0) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar]) (minions . [(0 2 0) ((emacs (25 3)) (dash (2 13 0))) "A minor-mode menu for the mode line" single]) (minimal-session-saver . [(0 6 2) nil "Very lean session saver" single]) (miniedit . [(2 0) nil "Enhanced editing for minibuffer fields." single]) (minibuffer-cua . [(1 0 0) nil "Make CUA mode's S-up/S-down work in minibuffer" single]) (minibuffer-complete-cycle . [(1 25 20130814) nil "Cycle through the *Completions* buffer" single]) (milkode . [(0 4) nil "Command line search and direct jump with Milkode" single]) (migemo . [(1 9 1) nil "Japanese incremental search through dynamic pattern expansion" single]) (mic-paren . [(3 10) nil "advanced highlighting of matching parentheses" single ((:commit . "e4cf6e1a0ee91e849a9d42ecdcd6ed0287f8a521") (:keywords "languages" "faces" "parenthesis" "matching"))]) (mhc . [(1 1 1) ((calfw (20150703))) "Message Harmonized Calendaring system." tar]) (mgmtconfig-mode . [(0 0 15) ((emacs (24 3))) "mgmt configuration management language" single]) (mew . [(6 8) nil "Messaging in the Emacs World" tar]) (metaweblog . [(1 0 1) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar]) (meta-presenter . [(1 0 0) nil "A simple multi-file presentation tool for Emacs" single]) (meson-mode . [(0 1) ((emacs (24 3))) "Major mode for the Meson build system files" single]) (merlin-eldoc . [(1 2) ((emacs (24 4))) "eldoc for OCaml and Reason" single]) (merlin . [(3 1 0) nil "Mode for Merlin, an assistant for OCaml." tar]) (mentor . [(0 3 1) ((xml-rpc (1 6 9)) (seq (1 11)) (cl-lib (0 5))) "Frontend for the rTorrent bittorrent client" tar]) (memoize . [(1 1) nil "Memoization functions" single]) (melpa-upstream-visit . [(1 0 0) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single]) (meghanada . [(1 0 7) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar]) (mediawiki . [(2 2 5) nil "mediawiki frontend" single]) (mc-extras . [(1 2 4) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar]) (mbe . [(0 1) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single]) (mb-url . [(0 1 0) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar]) (maxframe . [(0 5) nil "No description available." single]) (maven-test-mode . [(0 1 5) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single]) (math-symbol-lists . [(1 2) nil "Lists of Unicode math symbols and latex commands" tar]) (material-theme . [(1 2) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar]) (mastodon . [(0 7 2) ((emacs (24 4))) "Client for Mastodon" tar]) (marshal . [(0 8 2) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single]) (markup-faces . [(1 0 0) nil "collection of faces for markup language modes" single]) (markup . [(2 0 1) ((cl-lib (0 5))) "Simple markup generation helpers." single]) (markdown-toc . [(0 1 2) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar]) (markdown-preview-mode . [(0 9) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar]) (markdown-mode . [(2 3) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single]) (markdown-mode+ . [(0 8) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar]) (mark-tools . [(0 3) nil "Some simple tools to access the mark-ring in Emacs" single]) (marcopolo . [(0 3 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Docker API" tar]) (map-regexp . [(0 3 0) ((cl-lib (0 2))) "map over matches of a regular expression" single]) (map-progress . [(0 5 0) nil "mapping macros that report progress" single]) (mallard-mode . [(0 3 0) nil "Major mode for editing Mallard files" tar]) (malinka . [(0 3 1) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single]) (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" single]) (make-color . [(0 4) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single]) (magithub . [(0 1 7) ((emacs (25)) (magit (2 12)) (s (1 12 0)) (ghub+ (0 3)) (git-commit (2 12)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar]) (magit-topgit . [(2 1 2) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single]) (magit-tbdiff . [(0 2 0) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single]) (magit-svn . [(2 2 1) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single]) (magit-stgit . [(2 1 3) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single]) (magit-popup . [(2 12 3) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar]) (magit-org-todos . [(0 1 2) ((magit (2 0 0)) (emacs (24))) "Add local todo items to the magit status buffer" single]) (magit-imerge . [(0 3 1) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-imerge" single]) (magit-gitflow . [(2 2 3) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single]) (magit-gh-pulls . [(0 5 3) ((emacs (24 4)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single]) (magit-gerrit . [(0 3) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single]) (magit-find-file . [(2 1 0) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single]) (magit-filenotify . [(0 1) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single]) (magit-annex . [(1 5 0) ((cl-lib (0 3)) (magit (2 12 0))) "Control git-annex from Magit" single]) (magit . [(2 13 0) ((emacs (24 4)) (async (1 9 3)) (dash (2 14 1)) (ghub (2 0 1)) (git-commit (2 12 1)) (let-alist (1 0 5)) (magit-popup (2 12 3)) (with-editor (2 7 3))) "A Git porcelain inside Emacs." tar]) (magic-filetype . [(0 3 0) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single]) (macrostep . [(0 9) ((cl-lib (0 5))) "interactive macro expander" tar]) (macro-math . [(1 0) nil "in-buffer mathematical operations" single]) (mac-pseudo-daemon . [(2 1) ((cl-lib (2 0))) "Daemon mode that plays nice with Mac OS." single]) (m-buffer . [(0 15) ((seq (2 14))) "List-Oriented, Functional Buffer Manipulation" tar]) (lxc-tramp . [(0 1 0) ((emacs (24)) (cl-lib (0 6))) "TRAMP integration for LXC containers" single]) (lusty-explorer . [(3 0) nil "Dynamic filesystem explorer and buffer switcher" single]) (lua-mode . [(20151025) nil "a major-mode for editing Lua scripts" tar]) (lsp-ocaml . [(0 2 0) ((emacs (25 1)) (lsp-mode (3 0))) "OCaml support for lsp-mode" single]) (lsp-mode . [(4 2) ((emacs (25 1))) "Minor mode for interacting with Language Servers" tar]) (love-minor-mode . [(1 2) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single]) (loop . [(1 3) nil "friendly imperative loop structures" single]) (logview . [(0 11 1) ((emacs (24 4)) (datetime (0 3))) "Major mode for viewing log files" single]) (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs" single]) (logalimacs . [(1 0 0) nil "Front-end to logaling-command for Ruby gems" single]) (log4j-mode . [(1 3) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java"))]) (log4e . [(0 3 0) nil "provide logging framework for elisp" single]) (loc-changes . [(1 1) nil "Helps users and programs keep track of positions even after buffer changes." single]) (load-relative . [(1 0) nil "relative file load (within a multi-file Emacs package)" tar]) (lms . [(0 7) ((emacs (25 1))) "Squeezebox / Logitech Media Server frontend" single ((:url . "https://bitbucket.com/inigoserna/lms.el") (:keywords "multimedia"))]) (lively . [(0 2) nil "interactively updating text" single]) (live-py-mode . [(2 22 0) ((emacs (24 3))) "Live Coding in Python" tar]) (live-code-talks . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single]) (literate-coffee-mode . [(0 4) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single]) (literal-string . [(0 1) ((markdown-mode (2 0)) (emacs (25))) "edit string literals in a dedicated buffer" single]) (lit-mode . [(0 1 1) nil "Major mode for lit" single]) (list-utils . [(0 4 4) nil "List-manipulation utility functions" single]) (list-unicode-display . [(0 1) ((cl-lib (0 5))) "Search for and list unicode characters by name" single]) (list-packages-ext . [(0 1 0) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single]) (lispyscript-mode . [(0 3 5) nil "Major mode for LispyScript code." single]) (lispy . [(0 26 0) ((emacs (24 1)) (ace-window (0 8 0)) (hydra (0 12 1)) (iedit (0 97)) (multiple-cursors (1 3 0)) (swiper (0 2 0))) "vi-like Paredit" tar]) (linum-relative . [(0 6) nil "display relative line number in emacs." single]) (link . [(1 10) nil "No description available." single]) (lingr . [(0 2) nil "Lingr Client for GNU Emacs" single]) (line-up-words . [(1 0 0) nil "Align words in an intelligent way" single]) (lice . [(0 2) nil "License And Header Template" tar]) (libmpdel . [(0 7 0) ((emacs (25 1))) "Communication with an MPD server" single]) (libelcouch . [(0 8 0) ((emacs (25 1)) (request (0 3 0))) "Communication with CouchDB" single]) (lfe-mode . [(1 3) nil "Lisp Flavoured Erlang mode" tar]) (letcheck . [(0 4) nil "Check the erroneous assignments in let forms" single]) (less-css-mode . [(0 21) nil "Major mode for editing LESS CSS files (lesscss.org)" single]) (lentic . [(0 11) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar]) (ledger-mode . [(3 1 1) nil "Helper code for use with the \"ledger\" command-line tool" tar]) (leanote . [(0 4 0) ((emacs (24 4)) (cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3)) (pcache (0 4 0)) (s (1 10 0)) (async (1 9))) "A minor mode writing markdown leanote" single]) (lcr . [(0 9) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" single]) (lcb-mode . [(0 1 1) ((emacs (24))) "LiveCode Builder major mode" single]) (latex-unicode-math-mode . [(0 3 1) nil "Input method for Unicode math symbols" tar]) (latex-math-preview . [(0 7 2) nil "preview LaTeX mathematical expressions." single]) (latex-extra . [(1 14) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single]) (langtool . [(2 0 0) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single]) (labburn-theme . [(1 0 0) nil "A lab color space zenburn theme." single]) (kurecolor . [(1 2 6) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single]) (kubernetes-evil . [(0 12 0) ((kubernetes (0 12 0)) (evil (1 2 12))) "Kubernetes keybindings for evil-mode." single]) (kubernetes . [(0 12 0) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0))) "Magit-like porcelain for Kubernetes." tar]) (ksp-cfg-mode . [(0 5 1) ((cl-lib (0 5))) "major mode for editing KSP CFG files" single]) (know-your-http-well . [(0 5 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar]) (kiwix . [(0 4 0) ((emacs (24 3)) (cl-lib (2 0))) "Kiwix interface and support." tar]) (kivy-mode . [(1 10 1) nil "Emacs major mode for editing Kivy files" single]) (killer . [(0 2 2) nil "kill and delete text" single]) (kill-ring-search . [(1 1) nil "incremental search for the kill ring" single]) (kill-or-bury-alive . [(0 1 3) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single]) (kibit-helper . [(0 1 1) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single]) (keyset . [(0 1 2) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single]) (keymap-utils . [(3 0 1) ((cl-lib (0 3))) "keymap utilities" single]) (keyfreq . [(1 8) nil "track command frequencies" single]) (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single]) (keychain-environment . [(2 4 1) nil "load keychain environment variables" single]) (keycast . [(0 1 1) ((emacs (25 3))) "Show current command and its key in the mode line" single]) (key-seq . [(1 0 1) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single]) (key-combo . [(1 6) nil "map key sequence to commands" single]) (key-chord . [(0 6) nil "map pairs of simultaneously pressed keys to commands" single]) (karma . [(0 1 0) nil "Karma Test Runner Emacs Integration" single]) (kaolin-themes . [(1 3 5) ((emacs (25 1)) (autothemer (0 2 2)) (cl-lib (0 6))) "A set of eye pleasing themes" tar]) (kakapo-mode . [(1 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single]) (kaesar-mode . [(0 9 0) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single]) (kaesar-file . [(0 9 0) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single]) (kaesar . [(0 9 0) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single]) (jvm-mode . [(0 2 0) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single]) (jump-to-line . [(0 2 0) nil "Jump to line number at point." single]) (jump . [(2 5) ((findr (0 7)) (inflections (2 4)) (cl-lib (0 5))) "build functions which contextually jump between files" single]) (julia-mode . [(0 4 5) nil "Major mode for editing Julia source code" single ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages"))]) (jsx-mode . [(0 1 10) nil "major mode for JSX" single]) (jsonnet-mode . [(0 0 1) ((emacs (24))) "Major mode for editing jsonnet files" single]) (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single]) (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" single]) (json-navigator . [(0 1 0) ((emacs (24 3)) (hierarchy (0 6 0))) "View and navigate JSON structures" single]) (json-mode . [(1 7 0) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" single]) (jsfmt . [(0 2 0) nil "No description available." single]) (js3-mode . [(1 1 0) nil "An improved JavaScript editing mode" tar]) (js2-refactor . [(0 9 0) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar]) (js2-mode . [(20180301) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar]) (js2-highlight-vars . [(0 1 0) ((js2-mode (20150909))) "highlight occurrences of the variable under cursor" single]) (js2-closure . [(2 2 1) ((js2-mode (20150909))) "Google Closure dependency manager" single]) (js-comint . [(1 1 1) ((emacs (24 3))) "JavaScript interpreter in window." single]) (js-auto-format-mode . [(1 1 0) ((emacs (24))) "Minor mode for auto-formatting JavaScript code" single]) (jq-mode . [(0 3 0) ((emacs (25 1))) "Edit jq scripts." tar]) (jpop . [(3 2 3) ((emacs (24)) (dash (2 11 0))) "Lightweight project cacheing and navigation framework" tar]) (jinja2-mode . [(0 2) nil "A major mode for jinja2" single]) (jetbrains . [(0 0 2) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "JetBrains IDE bridge" single]) (jedi-core . [(0 2 7) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar]) (jedi . [(0 2 7) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single]) (jdecomp . [(0 2 0) ((emacs (24 5))) "Interface to Java decompilers" single]) (javadoc-lookup . [(1 1 0) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar]) (java-imports . [(0 1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single]) (japanlaw . [(0 9 1) nil "Japan law from law.e-gov.go.jp" single]) (jammer . [(0 1 1) nil "Punish yourself for using Emacs inefficiently" single]) (jade-mode . [(1 0 0) nil "Major mode for editing .jade files" single]) (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar ((:commit . "2999f58619dd9c20cc6cac8060c4c850a504cbbd"))]) (j-mode . [(1 1 1) nil "Major mode for editing J programs" tar]) (iy-go-to-char . [(3 2 1) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single]) (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single]) (ivy-youtube . [(0 3 2) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single]) (ivy-rtags . [(2 18) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single]) (ivy-purpose . [(0 1) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single]) (ivy-prescient . [(2 0) ((emacs (25 1)) (prescient (2 0)) (ivy (0 10 0))) "prescient.el + Ivy" single]) (ivy-pages . [(0 1 1) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single]) (ivy-mpdel . [(0 4 0) ((emacs (25 1)) (ivy (0 10 0)) (libmpdel (0 5 0)) (mpdel (0 4 0))) "Ivy interface to navigate MPD" single]) (ivy-hydra . [(0 10 0) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single]) (ivy-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single]) (ivy-feedwrangler . [(0 4 2) nil "No description available." single]) (ivy-erlang-complete . [(0 3 1) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar]) (ivy-dired-history . [(1 0) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single]) (ivy-bibtex . [(2 0 0) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Ivy" tar]) (ivy . [(0 10 0) ((emacs (24 1))) "Incremental Vertical completYon" tar]) (iter2 . [(0 9 7) ((emacs (25 1))) "Reimplementation of Elisp generators" single]) (isgd . [(1 1) nil "Shorten URLs using the isgd.com shortener service" single]) (irony . [(1 2 0) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar]) (ir-black-theme . [(1 0 1) nil "Port of ir-black theme" single]) (ipython-shell-send . [(1 0 2) ((emacs (24))) "Send code (including magics) to ipython shell" single]) (iplayer . [(0 1) nil "Browse and download BBC TV/radio shows" single]) (intero . [(0 1 31) ((flycheck (0 25)) (company (0 8)) (emacs (24 4)) (haskell-mode (13 0))) "Complete development mode for Haskell" single]) (interleave . [(1 1 0) nil "Interleaving text books since 2015" single]) (intellij-theme . [(1 3) nil "Inspired by IntelliJ's default theme" single]) (intel-hex-mode . [(0 1 3) nil "Mode for Intel Hex files." single]) (instapaper . [(0 9 5) nil "No description available." single nil]) (insert-shebang . [(0 9 6) nil "Insert shebang line automatically." single]) (inlineR . [(1 0) nil "insert Tag for inline image of R graphics" single]) (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar]) (initsplit . [(1 6) nil "No description available." single]) (init-open-recentf . [(0 0 3) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single]) (init-loader . [(0 2) nil "Loader for configuration files" single]) (inherit-local . [(1 1 1) ((emacs (24 3))) "Inherited buffer-local variables" single]) (info-colors . [(0 2) ((emacs (24))) "Extra colors for Info-mode" single]) (info-buffer . [(0 2) nil "Display info topics in separate buffers" single]) (inflections . [(2 5) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" single]) (inf-ruby . [(2 5 1) nil "Run a Ruby process in a buffer" single]) (inf-crystal . [(0 1 0) ((emacs (24 3)) (crystal-mode (0 1 0))) "Run a Inferior-Crystal process in a buffer" single]) (inf-clojure . [(2 1 0) ((emacs (24 4)) (clojure-mode (5 6))) "Run an external Clojure process in an Emacs buffer" single]) (indium . [(1 2 0) ((emacs (25)) (seq (2 16)) (js2-mode (20140114)) (company (0 9 0)) (websocket (1 6))) "JavaScript Awesome Development Environment" tar]) (indent-guide . [(20160630) nil "show vertical lines to guide indentation" single]) (importmagic . [(1 1) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar]) (import-popwin . [(0 10) ((emacs (24 3)) (popwin (0 6))) "popwin buffer near by import statements with popwin" single]) (import-js . [(2 0 0) ((grizzl (0 1 0)) (emacs (24))) "Import Javascript dependencies" single]) (impatient-mode . [(1 1) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar]) (immutant-server . [(1 2 0) nil "Run your Immutant server in Emacs" single]) (imenus . [(0 2) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single]) (imenu-list . [(0 8) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single]) (imenu-anywhere . [(1 1 4) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" single]) (imapfilter . [(1 0 3) nil "run the imapfilter executable" single]) (imake . [(1 0 1) ((emacs (24 3))) "Simple, opinionated make target runner" single]) (image-dired+ . [(0 7 2) ((cl-lib (0 3))) "Image-dired extensions" single]) (image-archive . [(0 0 7) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single]) (image+ . [(0 6 2) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single]) (ignoramus . [(0 7 4) nil "Ignore backups, build files, et al." single]) (iflipb . [(1 4) nil "interactively flip between recently visited buffers" single]) (iedit . [(0 9 9 9) nil "Edit multiple regions in the same way simultaneously." tar]) (idris-mode . [(0 9 19) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar]) (idomenu . [(0 1) nil "imenu tag selection with ido" single]) (ido-yes-or-no . [(1 4) ((ido-completing-read+ (0))) "Use Ido to answer yes-or-no questions" single]) (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." single]) (ido-occur . [(0 2 0) ((dash (2 13 0))) "Yet another `occur' with `ido'." single]) (ido-load-library . [(0 2 0) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single]) (ido-grid-mode . [(1 1 5) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single]) (ido-describe-bindings . [(0 0 11) ((dash (2 13 0))) "Yet another `describe-bindings' with `ido'." single]) (ido-completing-read+ . [(4 11) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completing-read-function using ido" single]) (ido-complete-space-or-hyphen . [(1 1) nil "No description available." single]) (ido-at-point . [(1 0 0) ((emacs (24))) "ido-style completion-at-point" single]) (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single]) (identica-mode . [(1 3 1) nil "Major mode API client for status.net open microblogging" tar]) (ibuffer-vc . [(0 10) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single]) (ibuffer-tramp . [(1 0 0) nil "Group ibuffer's list by TRAMP connection" single]) (ibuffer-projectile . [(0 2) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single]) (ialign . [(0 4 2) ((emacs (24 4))) "visual align-regexp" single]) (hydra . [(0 14 0) ((cl-lib (0 5))) "Make bindings that stick around." tar]) (hyde . [(0 2) nil "No description available." tar]) (hydandata-light-theme . [(0 9 0) nil "A light color theme that is easy on your eyes" single]) (hyai . [(1 0 0) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single]) (hy-mode . [(1 0 3) ((dash (2 13 0)) (dash-functional (1 2 0)) (s (1 11 0)) (emacs (24))) "Major mode for Hylang" tar]) (hungry-delete . [(1 1 5) nil "hungry delete minor mode" single]) (hugsql-ghosts . [(0 1 3) ((s (1 9 0)) (dash (2 10 0)) (cider (0 14 0))) "Display hugsql defqueries in clojure code as an overlay." single]) (httprepl . [(1 1) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single]) (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single]) (htmlize . [(1 53) nil "Convert buffer text and decorations to HTML." single]) (html-to-markdown . [(1 5 1) nil "HTML to Markdown converter written in Emacs-lisp." single]) (ht . [(2 2) ((dash (2 12 0))) "The missing hash table library for Emacs" single]) (hound . [(1 1 0) ((request (0 2 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single]) (hookify . [(0 2 1) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single]) (homebrew-mode . [(1 3 6) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single]) (hoa-pp-mode . [(0 3 0) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single]) (hl-todo . [(1 9 0) nil "highlight TODO and similar keywords" single]) (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single]) (hl-anything . [(0 0 9) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar]) (historyf . [(0 0 9) nil "file history library like browser" single]) (history . [(1 0 0) ((emacs (24 3))) "History utility for source code navigation" tar]) (hippie-namespace . [(0 5 8) nil "Special treatment for namespace prefixes in hippie-expand" single]) (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single]) (hindent . [(5 2 6) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single]) (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" single]) (highlight-quoted . [(0 1) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single]) (highlight-parentheses . [(1 1 0) nil "highlight surrounding parentheses" single]) (highlight-numbers . [(0 2 3) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single]) (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" single]) (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single]) (highlight-blocks . [(0 1 16) ((emacs (24))) "Highlight the blocks point is in" single]) (highlight . [(3704) nil "Highlighting commands." single ((:commit . "066ac05268185eb8a33acb1713784a9ae5cbbe5c") (:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local"))]) (hierarchy . [(0 7 0) ((emacs (25 1))) "Library to create and display hierarchy structures" single]) (hide-mode-line . [(1 0 1) ((emacs (24 4))) "minor mode that hides/masks your modeline" single]) (hide-lines . [(20130623 1701) nil "Commands for hiding lines based on a regexp" single]) (hi2 . [(1 0) nil "indentation module for Haskell Mode" single]) (hfst-mode . [(0 4 0) nil "major mode for editing HFST files" single]) (helpful . [(0 11) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single]) (helm-zhihu-daily . [(0 3) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single]) (helm-w3m . [(1 0) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single]) (helm-w32-launcher . [(0 1 6) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar]) (helm-unicode . [(0 0 3) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single]) (helm-tramp . [(1 0 5) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single]) (helm-themes . [(0 5) ((helm (1 0))) "Color theme selection with helm interface" single]) (helm-system-packages . [(1 10 0) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for system package managers." tar]) (helm-swoop . [(1 7 4) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single]) (helm-spaces . [(0 4) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single]) (helm-smex . [(0 3) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single]) (helm-sage . [(0 0 4) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) "A helm extension for sage-shell-mode." single]) (helm-rubygems-org . [(0 0 1) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single]) (helm-rtags . [(2 18) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single]) (helm-robe . [(0 2) ((helm (1 7 7))) "completing read function for robe" single]) (helm-rg . [(0 1) ((emacs (25)) (helm (2 8 8)) (cl-lib (0 5)) (dash (2 13 0))) "a helm interface to ripgrep" single]) (helm-recoll . [(0 5) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single]) (helm-rdefs . [(1 0 1) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single]) (helm-qiita . [(1 0 2) ((helm (2 8 2))) "Qiita with helm interface" single]) (helm-pydoc . [(0 7) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar]) (helm-purpose . [(0 1) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single]) (helm-pt . [(0 2) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar]) (helm-projectile . [(0 14 0) ((helm (1 7 7)) (projectile (0 14 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" single]) (helm-project-persist . [(1 0 0) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single]) (helm-proc . [(0 0 5) ((helm (1 6 0))) "Helm interface for managing system processes" tar]) (helm-perspeen . [(0 1 2) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single]) (helm-perldoc . [(0 7) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar]) (helm-pages . [(0 1 1) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single]) (helm-orgcard . [(0 2) ((helm-core (1 7 7))) "browse the orgcard by helm" single]) (helm-org-rifle . [(1 5 2) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single]) (helm-open-github . [(0 15) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single]) (helm-notmuch . [(1 1) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single]) (helm-nixos-options . [(0 0 1) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single]) (helm-mt . [(0 9) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single]) (helm-mode-manager . [(1 0 0) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single]) (helm-migemo . [(1 22) ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single]) (helm-make . [(0 1 0) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single]) (helm-ls-hg . [(1 8 0) ((helm (1 7 8))) "List hg files in hg project." single]) (helm-ls-git . [(1 9 1) ((helm (1 7 8))) "list git files." single]) (helm-ispell . [(0 1) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single]) (helm-hayoo . [(0 0 5) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single]) (helm-hatena-bookmark . [(2 2 3) ((helm (2 8 2))) "Hatena::Bookmark with helm interface" single]) (helm-gtags . [(1 5 6) ((emacs (24 3)) (helm (1 7 7))) "GNU GLOBAL helm interface" single]) (helm-go-package . [(0 3 0) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single]) (helm-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single]) (helm-github-stars . [(1 3 2) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single]) (helm-git-grep . [(0 10 1) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single]) (helm-ghq . [(1 7 0) ((helm (2 2 0))) "ghq with helm interface" single]) (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single]) (helm-flycheck . [(0 4) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single]) (helm-firefox . [(1 3) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single]) (helm-ext . [(0 1 2) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar]) (helm-etags-plus . [(1 1) ((helm (1 7 8))) "Another Etags helm.el interface" single]) (helm-emms . [(1 3) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single]) (helm-dired-history . [(1 3) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single]) (helm-directory . [(0 6 4) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single]) (helm-descbinds . [(1 13) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single]) (helm-dash . [(1 3 0) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single]) (helm-cscope . [(0 1 1) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single]) (helm-core . [(2 9 7) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar]) (helm-company . [(0 2 2) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single]) (helm-commandlinefu . [(0 3) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single]) (helm-codesearch . [(0 4 0) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single]) (helm-circe . [(0 4) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single]) (helm-cider . [(0 4 0) ((emacs (24 4)) (cider (0 12)) (helm-core (2 4))) "Helm interface to CIDER" tar]) (helm-c-yasnippet . [(0 6 7) ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single]) (helm-bundle-show . [(1 1 5) ((helm (1 8 0))) "bundle show with helm interface" single]) (helm-books . [(1 0 1) ((helm (1 7 7))) "Helm interface for searching books" single]) (helm-bm . [(0 3) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single]) (helm-bibtex . [(2 0 0) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar]) (helm-bbdb . [(1 1) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single]) (helm-backup . [(1 0 0) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single]) (helm-aws . [(1 0 0) ((helm (1 5 3))) "Manage AWS EC2 server instances directly from Emacs" single]) (helm-ag . [(0 58) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single]) (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single]) (helm . [(2 9 7) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (2 9 7))) "Helm is an Emacs incremental and narrowing framework" tar]) (heaven-and-hell . [(0 0 4) ((emacs (24 4))) "easy toggle light/dark themes" single]) (hcl-mode . [(0 3) ((emacs (24 3))) "Major mode for Hashicorp" single]) (haxor-mode . [(0 7 0) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single]) (hasky-stack . [(0 8 0) ((emacs (24 4)) (f (0 18 0)) (magit-popup (2 10))) "Interface to the Stack Haskell development tool" single]) (hasky-extensions . [(0 2 0) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single]) (haskell-tab-indent . [(0 1 0) nil "tab-based indentation for haskell-mode" single]) (haskell-snippets . [(0 1 0) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar]) (haskell-mode . [(16 1) ((emacs (24 3))) "A Haskell editing mode" tar]) (haskell-emacs-text . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar]) (haskell-emacs-base . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar]) (haskell-emacs . [(4 0 3) nil "Write emacs extensions in haskell" tar]) (harvest . [(0 3 8) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single]) (hardhat . [(0 4 6) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single]) (hardcore-mode . [(0 1 0) nil "Disable arrow keys + optionally backspace and return" single]) (haml-mode . [(3 1 9) ((ruby-mode (1 0))) "Major mode for editing Haml files" single]) (hamburger-menu . [(1 0 5) ((emacs (24 5))) "Mode line hamburger menu" single]) (ham-mode . [(1 1 2) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single]) (hackernews . [(0 4 0) ((json (1 2))) "Access the Hacker News aggregator from Emacs" tar]) (hacker-typer . [(1 0 6) ((emacs (24))) "Pretend to write code like a pro" tar]) (gxref . [(0 1) ((emacs (25))) "xref backend using GNU Global." single]) (guru-mode . [(0 2) nil "Become an Emacs guru" single]) (gulp-task-runner . [(1 0) nil "Gulp task runner" single ((:commit . "8f5c52a7180634a99e16822bbc9f6d5e014c87d2") (:keywords "convenience" "javascript"))]) (guix . [(0 4 1) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0)) (edit-indirect (0 1 4))) "Interface for GNU Guix" tar]) (guide-key-tip . [(0 0 1) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single]) (guide-key . [(1 2 5) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single]) (gscholar-bibtex . [(0 3 3) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single]) (gruvbox-theme . [(1 26 0) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" tar]) (grunt . [(1 3 2) ((dash (2 9 0)) (ansi-color (3 4 2))) "Some glue to stick Emacs and Gruntfiles together" single]) (gruber-darker-theme . [(0 6) nil "Gruber Darker color theme for Emacs 24." single]) (groovy-mode . [(2 0) ((s (1 12 0)) (emacs (24 3))) "Major mode for Groovy source files" tar]) (groovy-imports . [(1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single]) (grizzl . [(0 1 1) nil "Fuzzy Search Library & Completing Read" tar]) (grin . [(1 0) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (grep-context . [(0 1 0) ((emacs (24 4)) (dash (2 12 0)) (cl-lib (0 5 0))) "Increase context in compilation and grep buffers" single]) (green-screen-theme . [(1 0 24) nil "A nice color theme for those who miss green CRTs" single]) (green-is-the-new-black-theme . [(0 0 6) nil "A cool and minimalist green blackened theme engine" single]) (grass-mode . [(0 1) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single]) (graphviz-dot-mode . [(0 4) nil "Mode for the dot-language used by graphviz (att)." single]) (graphene-meta-theme . [(0 0 5) nil "Integrated theming for common packages" single]) (graphene . [(1 0 0) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-completing-read+ (4 3)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar]) (grandshell-theme . [(1 3) nil "Dark color theme for Emacs > 24 with intensive colors." tar]) (grails-projectile-mode . [(1 1 2) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar]) (grails-mode . [(2 0) nil "minor-mode that adds some Grails project management to a grails project" single]) (grails . [(0 4 1) ((emacs (24))) "Minor mode for Grails projects" single]) (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" single]) (grab-x-link . [(0 5) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single]) (grab-mac-link . [(0 2) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single]) (gpastel . [(0 3 0) ((emacs (24 3))) "Integrates GPaste with the kill-ring" single]) (govc . [(0 18 0) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single]) (goto-last-change . [(1 2 1) nil "Move point through buffer-undo-list positions" single]) (goto-gem . [(1 2) ((s (1 9 0))) "Open dired in gem directory" single]) (goto-chg . [(1 7 2) nil "goto last change" single]) (gotham-theme . [(1 1 8) nil "A very dark Emacs color theme." single]) (gotest . [(0 14 0) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 5 0))) "Launch GO unit tests" single]) (gorepl-mode . [(1 0 0) ((emacs (24))) "Go REPL Interactive Development in top of Gore" single]) (goose-theme . [(1 0 0) ((emacs (24 1))) "A gray color theme for Emacs." single ((:commit . "52244bd5ee3e7b42599d9697007a5df3b026aafc") (:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(0 11 14) nil "Emacs interface to Google Translate." tar]) (google-this . [(1 12) ((emacs (24 1))) "A set of functions and bindings to google under point." single]) (google-maps . [(1 0 0) nil "Access Google Maps from Emacs" tar]) (golden-ratio . [(1 0) nil "Automatic resizing of Emacs windows to the golden ratio" single]) (godoctor . [(0 0 10) nil "Frontend for godoctor" single]) (go-tag . [(1 1 0) ((emacs (24 0)) (go-mode (1 5 0))) "Edit Golang struct field tag" single]) (go-scratch . [(0 0 1) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single]) (go-rename . [(1 5 0) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single]) (go-playground . [(1 3) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single]) (go-mode . [(1 5 0) nil "Major mode for the Go programming language" single]) (go-impl . [(0 14) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single]) (go-guru . [(1 5 0) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single]) (go-fill-struct . [(0 1) ((emacs (24))) "Fill struct for golang." single]) (go-errcheck . [(1 1 2) nil "errcheck integration for go-mode" single]) (go-eldoc . [(0 30) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single]) (go-dlv . [(0 1 0) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single]) (go-direx . [(0 4) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single]) (go-autocomplete . [(20170907) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single]) (go-add-tags . [(0 4) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single]) (gnus-x-gm-raw . [(0 0 1) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single]) (gnus-desktop-notify . [(1 4) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single]) (gnuplot . [(0 7 0) nil "drive gnuplot from within emacs" tar]) (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" single]) (gnome-calendar . [(0 2) nil "Integration with the GNOME Shell calendar" single ((:commit . "58c3a3c32aff9901c679bdf9091ed934897b84a0") (:keywords "gnome" "calendar"))]) (gmpl-mode . [(0 1 0) nil "Major mode for editing GMPL(MathProg) files" single]) (gmail2bbdb . [(0 0 6) nil "import email and name into bbdb from vcard." single]) (gmail-message-mode . [(1 4) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single]) (glab . [(2 0 1) ((emacs (24 4)) (ghub (2 0))) "minuscule client library for the Gitlab API" single]) (gl-conf-mode . [(0 3) nil "No description available." single]) (gitter . [(1) ((emacs (24 1)) (let-alist (1 0 4))) "An Emacs Gitter client" single]) (gitpatch . [(0 5 1) ((emacs (24 3))) "Git-format patch toolkit" single]) (gitlab-ci-mode-flycheck . [(20180304 1) ((emacs (25)) (flycheck (31)) (gitlab-ci-mode (1))) "Flycheck support for ‘gitlab-ci-mode’" single]) (gitlab-ci-mode . [(20180306 1) ((emacs (25)) (yaml-mode (0 0 12))) "mode for editing GitLab CI files" single]) (gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar]) (gitignore-mode . [(1 2 7) nil "Major mode for editing .gitignore files" single]) (github-search . [(0 0 1) ((magit (2 1 0)) (gh (1 0 0))) "Clone repositories by searching github" single]) (github-notifier . [(0 1) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single]) (github-elpa . [(0 0 1) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar]) (github-clone . [(0 2) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single]) (github-browse-file . [(0 5 0) ((cl-lib (0 5))) "View the file you're editing on GitHub" single]) (gitconfig-mode . [(1 2 7) nil "Major mode for editing .gitconfig files" single]) (gitconfig . [(1 0 0) nil "Emacs lisp interface to work with git-config variables" single]) (gitattributes-mode . [(1 2 7) nil "Major mode for editing .gitattributes files" single]) (git-wip-timemachine . [(1 0) ((s (1 9 0))) "Walk through git-wip revisions of a file" single]) (git-timemachine . [(4 5) ((emacs (24 3))) "Walk through git revisions of a file" single]) (git-ps1-mode . [(0 2 2) nil "Global minor-mode to print __git_ps1" single]) (git-messenger . [(0 18) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single]) (git-link . [(0 7 0) ((emacs (24 3))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single]) (git-lens . [(0 7 0) ((emacs (24 4))) "Show new, deleted or modified files in branch" single]) (git-gutter-fringe . [(0 23) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single]) (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single]) (git-gutter . [(0 90) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single]) (git-gutter+ . [(0 4) ((git-commit (0))) "Manage Git hunks straight from the buffer" single]) (git-commit-insert-issue . [(0 3 1) ((helm (0)) (projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single]) (git-commit . [(2 13 0) ((emacs (24 4)) (dash (2 14 1)) (with-editor (2 7 3))) "Edit Git commit messages" single]) (git-command . [(0 2 0) ((term-run (0 1 4)) (with-editor (2 3 1)) (git-ps1-mode (0 2 0))) "Yet another Git interface" single]) (git-auto-commit-mode . [(4 4 0) nil "Emacs Minor mode to automatically commit and push" single]) (git-attr . [(0 0 3) ((emacs (24 3))) "Git attributes of buffer file" tar]) (git-annex . [(1 1) nil "Mode for easy editing of git-annex'd files" single]) (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single]) (gist . [(1 4 0) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single]) (ghub . [(2 0 1) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar]) (ghub+ . [(0 3) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" single]) (ghq . [(0 1 2) nil "Ghq interface for emacs" single]) (ghc-imported-from . [(0 1 2) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single]) (ghc . [(5 8 0 0) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar]) (gh . [(0 10 0) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar]) (ggtags . [(0 8 12) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single]) (ggo-mode . [(20130521) nil "Gengetopt major mode" single]) (gf . [(1 0 1) ((s (1 0)) (ht (2 0))) "Major mode for editing GF code" single]) (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" single]) (genrnc . [(0 1 0) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar]) (geiser . [(0 10) nil "GNU Emacs and Scheme talk to each other" tar]) (geben-helm-projectile . [(0 0 4) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single]) (geben . [(1 1 1) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar]) (gather . [(1 1 0) nil "Gather string in buffer." single]) (gams-mode . [(6 5) ((emacs (24 3))) "Major mode for General Algebraic Modeling System (GAMS)." single]) (fzf . [(0 2) ((emacs (24 4))) "A front-end for fzf." single]) (fxrd-mode . [(1 0) ((s (1 2))) "Major mode for editing fixed field width files" tar]) (fwb-cmds . [(1 1 1) nil "misc frame, window and buffer commands" single]) (fvwm-mode . [(1 6 4) nil "major mode for editing Fvwm configuration files" single]) (fuzzy . [(0 1) nil "Fuzzy Matching" single]) (futhark-mode . [(0 5 2) ((cl-lib (0 5))) "major mode for editing Futhark source files" single ((:commit . "c25d6bf26a8fa8a13e5658bee8defc72521852ab") (:keywords "languages") (:url . "https://github.com/diku-dk/futhark"))]) (function-args . [(0 6 0) ((ivy (0 9 1))) "C++ completion for GNU Emacs" tar]) (fullframe . [(0 5 0) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single]) (full-ack . [(1 0) nil "a front-end for ack" single]) (fuel . [(0 96) nil "No description available." tar ((:commit . "905ec06d864537fb6be9c46ad98f1b6d101dfbf0"))]) (fstar-mode . [(0 9 4 0) ((emacs (24 3)) (dash (2 11))) "Support for F* programming" single]) (fsharp-mode . [(1 9 12) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar]) (fsbot-data-browser . [(0 3) nil "browse the fsbot database using tabulated-list-mode" single]) (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" single]) (free-keys . [(1 0 0) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single]) (frameshot . [(0 1 1) ((emacs (25 3))) "Take screenshots of a frame" single]) (frames-only-mode . [(1 0 0) ((emacs (24 4)) (seq (2 3))) "Use frames instead of Emacs windows" single]) (fountain-mode . [(2 5 3) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single]) (fortune-cookie . [(1 0 0) nil "Print a fortune in your scratch buffer." single]) (format-sql . [(0 4) nil "Use format-sql to make your SQL readable in directly Emacs." single]) (form-feed . [(0 2 2) nil "Display ^L glyphs as horizontal lines" single]) (foreman-mode . [(0 0 1) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single]) (forecast . [(0 6 4) ((emacs (24 4))) "Weather forecasts" single ((:commit . "5bfef1550e758000be900bda957aa41b49f5bd40") (:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontify-face . [(1 0 0) nil "Fontify symbols representing faces with that face." single]) (fontawesome . [(0 4) ((helm-core (1 7 7)) (emacs (24 4))) "fontawesome utility" tar]) (font-utils . [(0 7 8) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single]) (fold-this . [(0 3 0) nil "Just fold this region please" single]) (fold-dwim-org . [(0 6) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single]) (fold-dwim . [(1 2) nil "No description available." single ((:commit . "4764b0246a722d37eb8ec9f204ffaccaad1755d0"))]) (focus . [(0 1 1) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single]) (fn . [(0 1 2) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single]) (flyspell-popup . [(0 3) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single]) (flyspell-lazy . [(0 6 10) nil "Improve flyspell responsiveness using idle timers" single]) (flyspell-correct-popup . [(0 4) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single]) (flyspell-correct-ivy . [(0 4) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single]) (flyspell-correct-helm . [(0 4) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single]) (flyspell-correct . [(0 4) nil "correcting words with flyspell via custom interface" tar]) (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single]) (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single]) (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single]) (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single]) (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single]) (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar]) (flymake-less . [(0 3) ((less-css-mode (0 15))) "Flymake handler for LESS stylesheets (lesscss.org)" single]) (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single]) (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single]) (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single]) (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar]) (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single]) (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single]) (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" single]) (flymake-cursor . [(1 0 2) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single]) (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single]) (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single]) (flycheck-ycmd . [(1 2) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single]) (flycheck-yamllint . [(0 1 0) ((flycheck (30))) "Flycheck integration for YAMLLint" single]) (flycheck-title . [(1 0) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single]) (flycheck-tip . [(0 5 0) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar]) (flycheck-swift3 . [(2 0 2) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single]) (flycheck-swift . [(2 0) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single]) (flycheck-status-emoji . [(1 3) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single]) (flycheck-rtags . [(2 18) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single]) (flycheck-rebar3 . [(1 1 0) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single]) (flycheck-pycheckers . [(0 9) ((flycheck (0 18))) "multiple syntax checker for Python, using Flycheck" tar]) (flycheck-pos-tip . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single]) (flycheck-popup-tip . [(0 12 2) ((flycheck (0 22)) (popup (0 5)) (emacs (24))) "Display Flycheck error messages using popup.el" single]) (flycheck-pony . [(0 2 1) ((flycheck (0 25 1))) "Pony support in Flycheck" single]) (flycheck-phpstan . [(0 2 1) ((emacs (24 3)) (flycheck (26)) (phpstan (0 2 1))) "Flycheck integration for PHPStan" single]) (flycheck-package . [(0 12) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single]) (flycheck-ocaml . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) "Flycheck: OCaml support" single]) (flycheck-objc-clang . [(2 0 2) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single]) (flycheck-nimsuggest . [(0 8 1) ((flycheck (0 23)) (nim-mode (0 4 1)) (emacs (24))) "flycheck backend for Nim using nimsuggest" single]) (flycheck-mmark . [(0 1 0) ((emacs (24 4)) (flycheck (0 29))) "Flycheck checker for MMark markdown processor" single]) (flycheck-mix . [(1 0 0) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single]) (flycheck-ledger . [(0 4) ((flycheck (0 15))) "Flycheck integration for ledger files" single]) (flycheck-kotlin . [(0 3) ((flycheck (0 18))) "Support kotlin in flycheck" single]) (flycheck-julia . [(0 1 1) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" single]) (flycheck-joker . [(1 1 0) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single]) (flycheck-irony . [(0 1 0) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single]) (flycheck-hdevtools . [(0 3) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single]) (flycheck-haskell . [(0 8) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar]) (flycheck-gometalinter . [(0 1 4) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single]) (flycheck-dmd-dub . [(0 12) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single]) (flycheck-crystal . [(0 1 0) ((flycheck (30))) "Add support for Crystal to Flycheck" single]) (flycheck-color-mode-line . [(0 3) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single]) (flycheck-clojure . [(0 1 5) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single]) (flycheck-checkpatch . [(0 1) ((emacs (25)) (flycheck (30))) "Flyckeck support for checkpatch.pl tool" single]) (flycheck-checkbashisms . [(1 5) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single]) (flycheck-cask . [(0 4) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single]) (flycheck-apertium . [(0 2) ((flycheck (0 25))) "Apertium checkers in flycheck" tar]) (flycheck . [(31) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar]) (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single]) (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" single]) (flower . [(0 4 2) ((emacs (24 4)) (clomacs (0 0 3))) "Emacs task tracker client." tar]) (flow-minor-mode . [(0 3) ((emacs (25 1))) "Flow type mode based on web-mode." single]) (floobits . [(1 9 2) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar]) (flex-compile . [(0 2) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "Run, evaluate and compile for a many languages and modes." tar]) (flatui-dark-theme . [(0 3 0) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single]) (fixmee . [(0 8 6) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single]) (fix-word . [(0 1 2) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single]) (fix-muscle-memory . [(0 93) nil "Simple hacks to fix muscle memory problems" single]) (fix-input . [(0 1 1) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single]) (fish-mode . [(0 1 4) ((emacs (24))) "Major mode for fish shell scripts" single]) (firestarter . [(0 2 5) nil "Execute (shell) commands on save" single]) (fireplace . [(1 1 2) nil "A cozy fireplace for emacs" single]) (firefox-controller . [(2 1) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single]) (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar]) (find-file-in-repository . [(1 2) nil "Quickly find files in a git, mercurial or other repository" single]) (find-file-in-project . [(5 6 6) ((ivy (0 10 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single]) (find-by-pinyin-dired . [(0 0 3) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single]) (finalize . [(2 0 0) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar]) (fill-function-arguments . [(0 9) ((emacs (24 4))) "Convert function arguments to/from single line" single]) (fill-column-indicator . [(1 90) nil "Graphically indicate the fill column" single]) (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar]) (fcitx . [(0 2 3) nil "Make fcitx better in Emacs" single]) (faustine . [(0 4) ((emacs (24 3)) (faust-mode (0 3))) "Edit, visualize, build and run Faust code" single]) (faust-mode . [(0 6) nil "Faust syntax colorizer for Emacs." single]) (fastnav . [(1 0 7) nil "Fast navigation and editing routines." single]) (fastdef . [(0 2 0) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single]) (fancy-narrow . [(0 9 5) nil "narrow-to-region with more eye candy." single]) (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" single]) (faff-theme . [(2 2) nil "Light Emacs color theme on ivory3 background" single]) (factlog . [(0 0 1) nil "File activity logger" single]) (fabric . [(0 2 0) nil "Launch Fabric using Emacs" tar]) (f3 . [(0 1) ((emacs (24 3)) (helm (2 8 8)) (cl-lib (0 5))) "a helm interface to find" tar]) (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single]) (eziam-theme . [(1 0) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar]) (eyebrowse . [(0 7 7) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single]) (exwm-x . [(1 8 1) ((cl-lib (0 5)) (exwm (0 17)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0)) (counsel (0 9 0)) (ivy (0 9 0))) "A derivative wm based on EXWM (emacs x window manager)" tar]) (extmap . [(1 0) ((emacs (24 1))) "Externally-stored constant mapping for Elisp" single]) (extend-dnd . [(0 5) nil "R drag and Drop" tar]) (exsqlaim-mode . [(0 0 1) ((s (1 10 0))) "Use variables inside sql queries" single]) (express . [(0 6 0) ((string-utils (0 3 2))) "Alternatives to `message'" single]) (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar]) (exiftool . [(0 3) ((emacs (25))) "Elisp wrapper around ExifTool" single]) (exec-path-from-shell . [(1 11) nil "Get environment variables such as $PATH from the shell" single]) (exato . [(0 0 6) ((evil (1 2 13)) (emacs (24))) "EXATO: Evil XML/HTML Attributes Text Object" single]) (eww-lnum . [(1 1) nil "Conkeror-like functionality for eww" single]) (evm . [(0 4 2) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single]) (evil-visualstar . [(0 2 0) ((evil (0))) "Starts a * or # search from the visual selection" single]) (evil-visual-replace . [(0 0 5) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single]) (evil-visual-mark-mode . [(0 0 3) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single]) (evil-tutor . [(1 0) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar]) (evil-textobj-anyblock . [(0 1) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single]) (evil-text-object-python . [(1 0 1) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single]) (evil-test-helpers . [(1 2 13) ((evil (1 2 13))) "unit test helpers for Evil" single]) (evil-swap-keys . [(1 0 0) ((emacs (24))) "intelligently swap keys on text input with evil" single]) (evil-surround . [(1 0 1) ((evil (1 2 12))) "emulate surround.vim from Vim" single]) (evil-string-inflection . [(1 0 0) ((emacs (24)) (evil (1 2 13)) (string-inflection (1 0 6))) "snake_case -> CamelCase -> etc. for text objects" single]) (evil-space . [(0 0 6) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single]) (evil-snipe . [(2 0 8) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single]) (evil-smartparens . [(0 4 0) ((evil (1 0)) (emacs (24 4)) (smartparens (1 10 1))) "Evil support for smartparens" single]) (evil-search-highlight-persist . [(1 8) ((highlight (0))) "Persistent highlights after search" single]) (evil-rsi . [(2 0 0) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single]) (evil-replace-with-char . [(1 0 0) ((evil (1 2 13)) (emacs (24))) "replace chars of a text object with a char" single]) (evil-quickscope . [(0 1 4) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single]) (evil-org . [(0 1 1) ((evil (0)) (org (0))) "evil keybindings for org-mode" single]) (evil-opener . [(0 2 2) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar]) (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" single]) (evil-nerd-commenter . [(3 2 3) ((emacs (24 4))) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar]) (evil-multiedit . [(1 3 8) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single]) (evil-mc . [(0 0 3) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar]) (evil-matchit . [(2 2 8) ((evil (1 0 7))) "Vim matchit ported to Evil" tar]) (evil-mark-replace . [(0 0 4) ((evil (1 0 8))) "replace the thing in marked area" single]) (evil-magit . [(0 4 2) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single]) (evil-lisp-state . [(8 2) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single]) (evil-leader . [(0 4 3) ((evil (0))) "let there be <leader>" single]) (evil-iedit-state . [(1 1) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single]) (evil-escape . [(3 14) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single]) (evil-embrace . [(0 1 1) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single]) (evil-commentary . [(2 1 1) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar]) (evil-colemak-basics . [(2 1 0) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single]) (evil-args . [(1 0) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single]) (evil-anzu . [(0 3) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single]) (evil . [(1 2 13) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar]) (evalator . [(1 0 0) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar]) (eval-sexp-fu . [(0 4 2) ((cl-lib (0)) (highlight (0))) "Tiny functionality enhancements for evaluating sexps." single]) (eval-in-repl . [(0 9 6) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar]) (ethan-wspace . [(0 7 1) nil "whitespace customizations for emacs" single]) (eterm-256color . [(0 3 13) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar]) (esxml . [(0 3 4) nil "Library for working with xml via esxml and sxml" tar]) (esup . [(0 6) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar]) (ess-smart-underscore . [(0 79) nil "Ess Smart Underscore" tar]) (ess-R-data-view . [(1 0) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single]) (ess . [(17 11) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar]) (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single]) (eslintd-fix . [(1 1 0) ((dash (2 12 0)) (emacs (24 3))) "use eslint_d to automatically fix js files" single]) (eslint-fix . [(1 0 0) nil "Fix JavaScript files using ESLint" single]) (eshell-z . [(0 3 2) ((cl-lib (0 5))) "cd to frequent directory in eshell" single]) (eshell-up . [(0 0 3) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single]) (eshell-prompt-extras . [(0 96) nil "Display extra information for your eshell prompt." single]) (eshell-git-prompt . [(0 1 2) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single]) (eshell-did-you-mean . [(0 1) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single]) (eshell-bookmark . [(2 0 0) ((emacs (24 3))) "Integrate bookmarks with eshell." single]) (eshell-autojump . [(0 2) nil "autojump command for Eshell" single]) (esh-help . [(1 0 1) ((dash (1 4 0))) "Add some help functions and support for Eshell" single]) (esh-autosuggest . [(2 0 0) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" single]) (esa . [(0 8 13) ((cl-lib (0 3))) "Emacs integration for esa.io" single]) (es-windows . [(0 3) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single]) (es-mode . [(4 3 0) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0))) "A major mode for editing Elasticsearch queries" tar]) (es-lib . [(0 4) ((cl-lib (0 3))) "A collection of emacs utilities" tar]) (ert-runner . [(0 7 0) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar]) (ert-junit . [(0 3) ((ert (0))) "JUnit XML reports from ert results" single]) (ert-async . [(0 1 2) nil "Async support for ERT" single]) (erlang . [(21 0 1) ((emacs (24 1))) "Erlang major mode" tar]) (ergoemacs-mode . [(5 16 10 12) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar]) (erefactor . [(0 7 0) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single]) (ercn . [(1 1 1) nil "Flexible ERC notifications" single]) (erc-youtube . [(0 1) nil "Show info about a YouTube URL in an ERC buffer." single]) (erc-twitch . [(1 1) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single]) (erc-scrolltoplace . [(0 1 0) ((emacs (24 0)) (switch-buffer-functions (0 0 1))) "An Erc module to scrolltobottom better with keep-place" single]) (erc-hl-nicks . [(1 3 3) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single]) (erc-hipchatify . [(0 1) ((emacs (24 2)) (s (1 10 0)) (company (0 8 11)) (alert (1 2)) (request (0 2 0)) (flx-ido (0 6 1))) "Provide emoticons and html rendering for HipChat" single ((:url . "https://bitbucket.org/seanfarley/erc-hipchatify") (:keywords "erc" "bitlbee" "hipchat" "multimedia"))]) (erc-crypt . [(1 6) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single]) (epm . [(0 1 -2 2) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar]) (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" single]) (epkg . [(3 0 0) ((closql (0 4 0)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar]) (epc . [(0 1 1) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar]) (eopengrok . [(0 5 0) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single]) (ensime . [(2 0 2) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar]) (enotify . [(0 1 3) nil "No description available." tar]) (enlive . [(0 0 1) nil "query html document with css selectors" single]) (enh-ruby-mode . [(20180330) ((emacs (24))) "Major mode for editing Ruby files" tar]) (engine-mode . [(2 0 0) nil "Define and query search engines from within Emacs." single]) (emr . [(0 3 6) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar]) (emojify . [(1 0) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar]) (emoji-fontset . [(0 1 1) nil "Set font face for Emoji." single]) (emoji-cheat-sheet-plus . [(1 2 1) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar]) (emms-state . [(0 2) ((emms (0))) "Display track description and playing time in the mode line" single]) (emms-player-simple-mpv . [(0 4 0) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar]) (emms-player-mpv . [(0 2 0) ((emms (0))) "mpv support for EMMS" single]) (emms-mode-line-cycle . [(0 2 5) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single]) (emms . [(5 0) ((cl-lib (0 5))) "The Emacs Multimedia System" tar]) (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" single]) (embrace . [(0 1 4) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single]) (emamux . [(0 14) ((emacs (24 3))) "Interact with tmux" single]) (emacsshot . [(0 4) nil "Snapshot a frame or window from within Emacs" single]) (emacsql-sqlite . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar]) (emacsql-psql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "EmacSQL back-end for PostgreSQL via psql and pg" tar]) (emacsql-mysql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single]) (emacsql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar]) (emacsc . [(1 2 20131027) nil "helper for emacsc(1)" tar]) (emacsagist . [(1 0 0) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single]) (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar]) (elx . [(1 2 4) ((emacs (26))) "extract information from Emacs Lisp libraries" single]) (elwm . [(0 0 2) ((dash (1 1 0))) "Minimalistic window manager for emacs" single]) (elscreen-mew . [(1 0 2) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single]) (elscreen-fr . [(0 0 3) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single]) (elscreen . [(2018 -3 3 -3 21) ((emacs (24))) "Emacs window session manager" tar ((:commit . "02164afab2c5fbff6e4aa7c59e0daedc6c504772") (:url . "https://github.com/knu/elscreen") (:keywords "window" "convenience"))]) (elpy . [(1 21 0) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar]) (elpa-mirror . [(2 1 1) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single]) (elpa-clone . [(0 0 6) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single]) (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single]) (elmine . [(0 3) nil "No description available." single]) (elmacro . [(1 1 0) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single]) (elm-mode . [(0 20 3) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar]) (elixir-yasnippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar]) (elixir-mode . [(2 3 1) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar]) (elisp-slime-nav . [(0 9) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single]) (elisp-refs . [(1 3) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single]) (elisp-lint . [(0 2 0) ((emacs (23))) "basic linting for Emacs Lisp" single]) (elisp-format . [(0 5 7) nil "Format elisp code" single ((:url . "http://www.emacswiki.org/emacs/download/elisp-format.el"))]) (elisp-def . [(1 0) ((dash (2 12 0)) (f (0 19 0)) (s (1 11 0)) (emacs (24 3))) "macro-aware go-to-definition for elisp" single]) (elfeed-web . [(3 0 0) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar]) (elfeed-protocol . [(0 5 3) ((emacs (24 4)) (elfeed (2 1 1)) (cl-lib (0 5))) "Provide owncloud/ttrss protocols for elfeed" tar]) (elfeed . [(3 0 0) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar]) (elf-mode . [(0 1 0) ((emacs (24 3))) "Show symbols in binaries" single]) (electric-operator . [(1 0 0) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single]) (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." single]) (elcouch . [(0 3 0) ((emacs (25 1)) (json-mode (1 0 0)) (libelcouch (0 8 0))) "View and manipulate CouchDB databases" single]) (elcord . [(1 0 0) ((emacs (25))) "Allows you to integrate Rich Presence from Discord" tar ((:commit . "91c665fd832ef3b79c3eb810b7a6b08979a352cd") (:url . "https://github.com/Zulu-Inuoe/elcord") (:keywords "games"))]) (elbank . [(1 2) ((emacs (25)) (seq (2 16))) "Personal finances reporting application" tar]) (el2org . [(0 6 0) ((emacs (25 1))) "Convert elisp file to org file" single]) (el-x . [(0 3 1) nil "main entry point for el-x package" tar]) (el-spice . [(0 3 0) nil "Extra spice for emacs lisp programming" tar]) (el-patch . [(2 0 1) ((emacs (25))) "Future-proof your Elisp." single]) (el-mock . [(1 25 1) nil "Tiny Mock and Stub framework in Emacs Lisp" single]) (el-init-viewer . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single]) (el-init . [(0 2 0) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single]) (el-get . [(5 1) nil "Manage the external elisp bits and pieces you depend upon" tar]) (el-autoyas . [(0 5) nil "Automatically create Emacs-Lisp Yasnippets" tar]) (eink-theme . [(1 0 0) nil "E Ink color theme" single]) (ein . [(0 14 1) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar]) (eide . [(2 1 3) nil "IDE interface" tar]) (eglot . [(1 0) ((emacs (26 1))) "Client for Language Server Protocol (LSP) servers" tar]) (egison-mode . [(3 7 10) nil "Egison editing mode" single]) (egg . [(1 0 9) nil "Emacs Got Git - Emacs interface to Git" tar]) (eg . [(1 1) ((cl-lib (0 5)) (emacs (24 3))) "Norton Guide reader" single]) (edts . [(0 1 0) nil "No description available." tar]) (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" single]) (editorconfig-custom-majormode . [(0 0 3) ((editorconfig (0 6 0))) "Decide major-mode and mmm-mode from EditorConfig" single]) (editorconfig . [(0 7 12) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar]) (edit-server . [(1 15) nil "server that responds to edit requests from Chrome" single]) (edit-list . [(0 3) nil "edit a single list" single]) (edit-indirect . [(0 1 5) ((emacs (24 3))) "Edit regions in separate buffers" single]) (ede-php-autoload-drupal . [(0 1 1) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single]) (ede-php-autoload-composer-installers . [(0 1 0) ((ede-php-autoload (20170212 450)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single]) (ede-php-autoload . [(1 1 0) nil "Simple EDE PHP Project" tar]) (edbi-minor-mode . [(0 1) ((edbi (0 1 3))) "Use edbi with regular SQL files." single]) (edbi . [(0 1 2) ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) "Emacs Database Interface" tar]) (ecukes . [(0 6 17) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar]) (eclim . [(0 4) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar]) (ecb . [(2 24) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(2 11 11) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar]) (ebf . [(1 0 0) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar]) (ebal . [(0 3 1) ((emacs (24 4)) (f (0 18 0))) "Emacs interface to Cabal and Stack" single]) (easy-repeat . [(0 2) ((emacs (24 4))) "Repeat easily" single]) (easy-kill-extras . [(0 9 4 1) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar]) (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single]) (easy-jekyll . [(1 6 15) ((emacs (24 4))) "Major mode managing jekyll blogs" single]) (easy-hugo . [(3 3 27) ((emacs (24 4)) (popup (0 5 3))) "Write blogs made with hugo by markdown or org-mode" single]) (eacl . [(1 1 3) ((emacs (24 3)) (ivy (0 9 1))) "Auto-complete line(s) by grepping project" single]) (e2wm-term . [(0 0 5) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single]) (e2wm-sww . [(0 0 2) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single]) (e2wm-pkgex4pl . [(0 0 1) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single]) (e2wm-direx . [(0 0 5) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single]) (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single]) (e2wm . [(1 4) ((window-layout (1 4))) "simple window manager for emacs" tar]) (dynamic-ruler . [(0 1 6) nil "Displays a dynamic ruler at point." single]) (dynamic-fonts . [(0 6 4) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single]) (dyalog-mode . [(0 7) ((cl-lib (0 2))) "Major mode for editing Dyalog APL source code" tar ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages"))]) (dumb-jump . [(0 5 2) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single]) (ducpel . [(0 1) ((cl-lib (0 5))) "Logic game with sokoban elements" tar]) (dtrt-indent . [(0 7) nil "Adapt to foreign indentation offsets" tar]) (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar]) (drupal-mode . [(0 7 3) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar]) (drag-stuff . [(0 3 0) nil "Drag stuff (lines, words, region, etc...) around" tar]) (draft-mode . [(0 1 1) nil "Rough drafting for Emacs." single]) (dracula-theme . [(1 4 0) ((emacs (24))) "Dracula Theme" single]) (dr-racket-like-unicode . [(1 1 0) ((emacs (24 1))) "DrRacket-style unicode input" single]) (downplay-mode . [(0 1) nil "focus attention on a region of the buffer" single]) (dotenv-mode . [(0 2 4) ((emacs (24 3))) "Major mode for .env files" single]) (doom-themes . [(2 1 1) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "an opinionated pack of modern color-themes" tar]) (doom . [(1 3) ((cl-lib (0 5))) "DOM implementation and manipulation library" single]) (dokuwiki-mode . [(0 1 1) nil "Major mode for DokuWiki document" single]) (dockerfile-mode . [(1 2) nil "Major mode for editing Docker's Dockerfiles" single]) (docker-tramp . [(0 1) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar]) (docker-compose-mode . [(1 1 0) ((emacs (24 3)) (dash (2 12 0)) (yaml-mode (0 0 12))) "Major mode for editing docker-compose files" single]) (docker . [(0 6 0) ((emacs (24 4)) (dash (2 12 1)) (docker-tramp (0 1)) (magit-popup (2 6 0)) (s (1 11 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar]) (dix-evil . [(0 3 5) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single]) (dix . [(0 3 5) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar]) (ditz-mode . [(0 3) nil "Emacs interface to Ditz issue tracking system" single ((:keywords "tools"))]) (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single]) (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single]) (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single]) (disable-mouse . [(0 3) nil "Disable mouse commands globally" single]) (direx-grep . [(0 1 0) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single]) (direx . [(1 0 0) nil "Simple Directory Explorer" tar]) (direnv . [(1 4 0) ((emacs (24 4)) (dash (2 12 0)) (with-editor (2 5 10))) "direnv support for emacs" single]) (diredful . [(1 10) nil "colorful file names in dired buffers" single]) (diredfl . [(0 4) ((emacs (24))) "Extra font lock rules for a more colourful dired" single]) (dired-toggle-sudo . [(1 0) nil "Browse directory with sudo privileges." single]) (dired-single . [(0 1 3) nil "Reuse the current dired buffer to visit a directory" single]) (dired-rsync . [(0 4) ((s (1 12 0)) (dash (2 0 0)) (emacs (24))) "Allow rsync from dired buffers" single]) (dired-quick-sort . [(0 1) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single]) (dired-k . [(0 19) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar]) (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" single]) (dired-icon . [(0 5) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar]) (dired-hide-dotfiles . [(0 1) ((emacs (25 1))) "Hde dotfiles in dired" single]) (dired-fdclone . [(1 5 4) nil "dired functions and settings to mimic FDclone" single]) (dired-explorer . [(0 6) ((cl-lib (0 5))) "minor-mode provides Explorer like select file at dired." single]) (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single]) (dired-atool . [(1 1 0) ((emacs (24))) "Pack/unpack files with atool on dired." single]) (dionysos . [(0 6 0) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar]) (dimmer . [(0 3 0) ((emacs (25))) "visually highlight the selected buffer" single]) (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" single]) (dim-autoload . [(2 0 1) nil "dim or hide autoload cookie lines" single]) (dim . [(0 1) ((emacs (24 4))) "Change mode-line names of major/minor modes" single]) (digistar-mode . [(0 4) nil "major mode for Digistar scripts" single]) (diffview . [(1 0) nil "View diffs in side-by-side format" single]) (difflib . [(0 3 8) ((emacs (24 4)) (cl-generic (0 3)) (ht (2 2)) (s (1 12 0))) "Helpers for computing deltas between sequences." single]) (diff-hl . [(1 8 4) ((cl-lib (0 2))) "Highlight uncommitted changes using VC" tar]) (dictionary . [(1 10) nil "No description available." single]) (diary-manager . [(2 0 1) ((emacs (25))) "Simple personal diary." single]) (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single]) (desktop-environment . [(0 2 0) ((emacs (25 1))) "Helps you control your GNU/Linux computer" single]) (desktop+ . [(0 2) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single]) (describe-number . [(0 3 1) ((yabin (1 1))) "Describe arbitrarily large number at point." single]) (demangle-mode . [(1 2 2) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single]) (deft . [(0 8) nil "quickly browse, filter, and edit plain text notes" single]) (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." single]) (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single]) (default-text-scale . [(0 1) nil "Easily adjust the font size in all frames" single]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single]) (decide . [(0 7) nil "rolling dice and other random things" single]) (debpaste . [(0 1 5) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single]) (datetime . [(0 4 1) ((emacs (24 1)) (extmap (1 0))) "Parsing, formatting and matching timestamps" tar]) (date-field . [(0 0 1) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single]) (date-at-point . [(0 1) nil "Add `date' to `thing-at-point' function" single]) (dashboard . [(1 2 4) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" tar]) (dash-functional . [(2 14 1) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single]) (dash . [(2 14 1) nil "A modern list library for Emacs" single]) (dart-mode . [(1 0 3) ((emacs (24 5)) (cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (s (1 10))) "Major mode for editing Dart files" single]) (darktooth-theme . [(0 3 7) ((autothemer (0 2))) "From the darkness... it watches" single]) (darcula-theme . [(2 0) nil "Inspired by IntelliJ's Darcula theme" single]) (darcsum . [(1 3) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (dante . [(1 4) ((dash (2 13 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (haskell-mode (13 14)) (s (1 11 0))) "Development mode for Haskell" single]) (daemons . [(1 2 0) ((emacs (25))) "UI for managing init system daemons (services)" tar]) (dad-joke . [(1 4) ((emacs (24))) "Get/display dad jokes" single]) (d-mode . [(2 0 9) nil "D Programming Language major mode for (X)Emacs" single]) (cython-mode . [(0 28 3) nil "Major mode for editing Cython files" single]) (cyphejor . [(0 1 2) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single]) (cyberpunk-theme . [(1 21) nil "Cyberpunk Color Theme" single]) (cwl-mode . [(0 2 5) ((yaml-mode (0 0 13)) (emacs (24 4))) "A major mode for editing CWL" single]) (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" single]) (cubicle-mode . [(1 1 2) nil "Major mode for the Cubicle model checker" single]) (cubicaltt . [(1 0) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single]) (ctxmenu . [(0 3 0) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar]) (ctags-update . [(1 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single]) (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single]) (csv . [(2 1) nil "Functions for reading and parsing CSV files." single]) (csound-mode . [(0 2 0) ((emacs (25)) (shut-up (0 3 2)) (multi (2 0 1))) "A major mode for interacting and coding Csound" tar]) (csharp-mode . [(0 9 0) nil "C# mode derived mode" single]) (crystal-mode . [(0 1 0) ((emacs (24 4))) "Major mode for editing Crystal files" single]) (cryptol-mode . [(0 1 0) nil "Cryptol major mode for Emacs" single]) (crux . [(0 3 0) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single]) (crm-custom . [(0 5) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single]) (cricbuzz . [(0 3 5) ((enlive (0 0 1)) (f (0 19 0)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single]) (creds . [(0 0 6 1) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar]) (creamsody-theme . [(0 3 7) ((autothemer (0 2))) "Straight from the soda fountain." single]) (cpputils-cmake . [(5 5) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar]) (coverlay . [(3 0 1) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single]) (coverage . [(0 3) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single]) (counsel-tramp . [(0 4 1) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" single]) (counsel-projectile . [(0 2 0) ((counsel (0 10 0)) (projectile (0 14 0))) "Ivy integration for Projectile" single]) (counsel-gtags . [(0 1) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single]) (counsel-etags . [(1 6 2) ((emacs (24 4)) (counsel (0 9 1))) "Fast and complete Ctags/Etags solution using ivy" single]) (counsel-dash . [(0 1 3) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single]) (counsel-bbdb . [(0 0 3) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single]) (counsel . [(0 10 0) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single]) (corral . [(0 3 20) nil "Quickly surround text with delimiters" single]) (copyit-pandoc . [(0 0 2) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single]) (copyit . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Copy it, yank anything!" single]) (copy-file-on-save . [(0 0 5) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17)) (s (1 7 0))) "Copy file on save, automatic deployment it." single]) (copy-as-format . [(0 0 7) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single]) (contextual-menubar . [(1 0 0) nil "display the menubar only on a graphical display" single]) (contextual . [(1 0 1) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single]) (connection . [(1 10) nil "No description available." single]) (conllu-mode . [(0 1 0) ((emacs (25)) (parsec (0 1)) (cl-lib (0 5))) "editing mode for CoNLL-U files" tar]) (conkeror-minor-mode . [(1 6 2) nil "Mode for editing conkeror javascript files." single]) (conda . [(0 0 9) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single]) (concurrent . [(0 5 1) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single]) (composer . [(0 0 8) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9))) "Interface to PHP Composer" single]) (composable . [(0 0 1) ((emacs (24 4))) "composable editing" tar]) (company-ycmd . [(1 2) ((ycmd (1 2)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single]) (company-web . [(2 1) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar]) (company-terraform . [(1 2) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar]) (company-tern . [(0 3 0) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single]) (company-statistics . [(0 2 2) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single]) (company-sourcekit . [(0 2 0) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single]) (company-shell . [(1 2 1) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single]) (company-rtags . [(2 18) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single]) (company-restclient . [(0 1 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single]) (company-quickhelp . [(2 3 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single]) (company-prescient . [(2 0) ((emacs (25 1)) (prescient (2 0)) (company (0 9 6))) "prescient.el + Company" single]) (company-php . [(2 0 5) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single]) (company-nixos-options . [(0 0 1) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single]) (company-ngram . [(0 8 0) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar]) (company-math . [(1 3) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single]) (company-lsp . [(2 0 1) ((emacs (25 1)) (lsp-mode (3 4)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." single]) (company-jedi . [(0 4) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single]) (company-irony-c-headers . [(1 0 0) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single]) (company-irony . [(1 1 0) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single]) (company-go . [(20170907) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single]) (company-ghc . [(1 1 0) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) "company-mode ghc-mod backend" single]) (company-erlang . [(0 1 1) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single]) (company-emoji . [(2 5 0) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar]) (company-emacs-eclim . [(0 4) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single]) (company-edbi . [(0 1) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single]) (company-dict . [(1 2 7) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single]) (company-coq . [(1 0) ((company-math (1 0 1)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 10 0)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar]) (company-cabal . [(0 2 1) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar]) (company-ansible . [(0 7 0) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar]) (company-anaconda . [(0 2 0) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single]) (company . [(0 9 6) ((emacs (24 3))) "Modular text completion framework" tar]) (common-lisp-snippets . [(0 1 2) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar]) (commenter . [(0 5 2) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single]) (comment-tags . [(0 1) ((emacs (24 5)) (pkg-info (0 4))) "Highlight and navigate comment tags like TODO, FIXME, etc" single]) (comment-dwim-2 . [(1 2 2) nil "An all-in-one comment command to rule them all" single]) (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single]) (colormaps . [(0 1 2) ((emacs (25))) "Hex colormaps" single]) (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar]) (color-theme-sanityinc-solarized . [(2 29) nil "A version of Ethan Schoonover's Solarized themes" tar]) (color-theme-modern . [(0 0 2) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar]) (color-identifiers-mode . [(1 0 0) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single]) (coffee-mode . [(0 6 3) ((emacs (24 1)) (cl-lib (0 5))) "Major mode for CoffeeScript code" single]) (codic . [(0 3) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar]) (cnfonts . [(0 9 1) ((emacs (24))) "A simple Chinese fonts config tool" tar]) (cmake-project . [(0 7) nil "Integrates CMake build process with Emacs" single]) (cmake-mode . [(3 12 0 -1 1) nil "major-mode for editing CMake sources" single]) (cmake-ide . [(0 5) ((emacs (24 1)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0))) "Calls CMake to find out include paths and other compiler flags" single]) (cm-mode . [(1 6) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single]) (clues-theme . [(1 0 1) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single]) (closql . [(0 5 2) ((emacs (25 1)) (emacsql-sqlite (2 0 3))) "store EIEIO objects using EmacSQL" single]) (clojure-snippets . [(1 0 1) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar]) (clojure-quick-repls . [(0 1 0) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single]) (clojure-mode-extra-font-locking . [(5 8 0) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single]) (clojure-mode . [(5 8 0) ((emacs (24 4))) "Major mode for Clojure code" single]) (clojure-cheatsheet . [(0 4 0) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single]) (clocker . [(0 0 11) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single]) (cljr-helm . [(0 11) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single]) (clj-refactor . [(2 3 1) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 11 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar]) (clips-mode . [(0 7) nil "Major mode for editing CLIPS code and REPL" tar]) (cliphist . [(0 5 5) ((emacs (24 3)) (ivy (0 9 0))) "Read data from clipboard managers at Linux and Mac" tar]) (click-mode . [(0 0 4) ((emacs (24))) "Major mode for the Click Modular Router Project" single]) (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single]) (cl-format . [(1 1) nil "CL format routine." tar]) (citeproc . [(0 1 1) ((emacs (25)) (dash (2 13 0)) (s (1 12 0)) (f (0 18 0)) (queue (0 2)) (string-inflection (1 0))) "A CSL 1.0.1 Citation Processor" tar]) (circe-notifications . [(1 0) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single]) (circe . [(2 10) ((cl-lib (0 5))) "Client for IRC in Emacs" tar]) (circadian . [(0 3 1) ((emacs (24 4))) "Theme-switching based on daytime" single]) (cil-mode . [(0 4) nil "Common Intermediate Language mode" single]) (cider-eval-sexp-fu . [(1 1) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single]) (cider . [(0 17 0) ((emacs (24 4)) (clojure-mode (5 6 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16))) "Clojure Interactive Development Environment that Rocks" tar]) (choice-program . [(0 4) ((emacs (25)) (cl-lib (1 0))) "parameter based program" tar]) (chinese-word-at-point . [(0 2 3) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single]) (checkbox . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single]) (cheat-sh . [(1 7) ((emacs (24))) "Interact with cheat.sh" single]) (chatwork . [(0 3) nil "ChatWork client for Emacs" single]) (charmap . [(0 0 1) nil "Unicode table for Emacs" single]) (char-menu . [(0 1 1) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single]) (chapel-mode . [(1 0 0) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single]) (cframe . [(0 1) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "customize a frame and fast switch size and positions" single]) (cfengine-code-style . [(3 12 0 2 1) nil "C code style for CFEngine project." single]) (ceylon-mode . [(0 2) ((emacs (24))) "Major mode for editing Ceylon source code" single]) (cerbere . [(0 1 0) ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar]) (celery . [(0 0 3) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single]) (cdnjs . [(0 2 1) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single]) (cdlatex . [(4 7) nil "Fast input methods for LaTeX environments and math" single]) (cbm . [(0 6) ((cl-lib (0 5))) "Switch to similar buffers." single]) (catmacs . [(0 1 1) nil "Simple CAT interface for Yaesu FT991A" single]) (caskxy . [(0 0 5) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single]) (cask-package-toolset . [(0 9 2) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar]) (cask-mode . [(0 1) ((emacs (24 3))) "major mode for editing Cask files" single]) (cask . [(0 8 4) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (1 2))) "Cask: Project management for Emacs package development" tar]) (caseformat . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single]) (cargo . [(0 4 1) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar]) (caml . [(4 7 0 -1 2) nil "OCaml code editing commands for Emacs" tar]) (camcorder . [(0 2) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single]) (call-graph . [(0 1 0) ((emacs (25 1)) (cl-lib (0 6 1)) (hierarchy (0 7 0)) (tree-mode (1 0 0)) (ivy (0 10 0))) "Library to generate call graph for cpp functions" single]) (calfw-org . [(1 6) nil "calendar view for org-agenda" single]) (calfw-ical . [(1 6) nil "calendar view for ical format" single]) (calfw-howm . [(1 6) nil "calendar view for howm" single]) (calfw-cal . [(1 6) nil "calendar view for emacs diary" single]) (calfw . [(1 6) nil "Calendar view framework on Emacs" single]) (calendar-norway . [(0 9 3) nil "Norwegian calendar" single]) (cake-inflector . [(1 1 1) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single]) (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar]) (button-lock . [(1 0 2) nil "Clickable text defined by regular expression" single]) (buttercup . [(1 11) nil "Behavior-Driven Emacs Lisp Testing" tar]) (butler . [(0 2 4) ((deferred (3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar]) (bury-successful-compilation . [(0 1) nil "Bury the *compilation* buffer after successful compilation" single]) (bundler . [(1 1 0) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single]) (build-status . [(0 0 2) ((cl-lib (0 5))) "Mode line build status indicator" single]) (bui . [(1 1 0) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar]) (bug-reference-github . [(1 0 0) nil "Set `bug-reference-url-format' in Github repos" tar]) (bufshow . [(0 1 0) nil "No description available." single ((:commit . "d8424e412d63dcc721c64fbd2ddd2420a03b4e8b"))]) (buffer-watcher . [(0 1) ((f (0 16 2))) "Makes it easy to run shell scripts per filetype/directory when a buffer is saved." single]) (buffer-utils . [(0 1 0) nil "Buffer-manipulation utility functions" single]) (buffer-move . [(0 6 2) nil "" single]) (buffer-manage . [(0 7) ((emacs (25)) (choice-program (0 3)) (dash (2 13 0))) "manage buffers" tar]) (buffer-flip . [(2 1) nil "Cycle through buffers like Alt-Tab in Windows" single]) (bshell . [(0 3) ((emacs (25)) (buffer-manage (0 5))) "manage and track multiple inferior shells" single]) (browse-url-dwim . [(0 6 8) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single]) (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single]) (browse-at-remote . [(0 10 0) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single]) (boxquote . [(2 1) ((cl-lib (0 5))) "Quote text with a semi-box." single]) (borg . [(2 0 0) nil "assimilate Emacs packages as Git submodules" tar]) (boon . [(1 0) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar]) (bool-flip . [(1 0 1) ((emacs (24 3))) "flip the boolean under the point" single]) (bongo . [(1 0) nil "play music with Emacs" tar]) (bog . [(1 3 1) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single]) (bnfc . [(0 4) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single]) (bm . [(201610) nil "Visible bookmarks in buffer." single]) (birds-of-paradise-plus-theme . [(0 1 1) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single]) (bing-dict . [(0 2 3) nil "Minimalists' English-Chinese Bing dictionary" single]) (bind-map . [(1 1 1) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single]) (bind-key . [(2 3) nil "A simple way to manage personal keybindings" single]) (binclock . [(1 11) ((cl-lib (0 5))) "Display the current time using a binary clock." single]) (bifocal . [(0 0 3) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single]) (bicycle . [(0 1 0) ((emacs (25 1))) "cycle outline and code visibility" single]) (biblio-core . [(0 2) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single]) (biblio . [(0 2) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar]) (better-shell . [(1 2) ((emacs (24 4))) "Better shell management" single]) (better-defaults . [(0 1 3) nil "Fixing weird quirks and poor defaults" single]) (benchstat . [(1 0 0) nil "proper benchmarking made simple" single]) (benchmark-init . [(1 0) nil "Benchmarks Emacs require and load calls" tar]) (beginend . [(2 0 0) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single]) (beeminder . [(1 1 0) ((org (7))) "Emacs interface for Beeminder" tar]) (beacon . [(1 3 4) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single]) (bbdb2erc . [(0 1 3) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single]) (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar]) (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single]) (bbcode-mode . [(2 1 0) nil "Major mode for writing BBCode markup" single]) (bazel-mode . [(1 0 0) ((emacs (24 3))) "A major mode for editing Bazel files" single]) (bash-completion . [(2 1 0) nil "BASH completion for the shell buffer" single]) (base16-theme . [(2 2) nil "Collection of themes built on combinations of 16 base colors" tar]) (banner-comment . [(2 6 2) ((emacs (24 4))) "For producing banner comments." single]) (badwolf-theme . [(1 2) ((emacs (24))) "Bad Wolf color theme" single]) (back-button . [(0 6 6) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single]) (babel . [(1 4) nil "interface to web translation services such as Babelfish" single]) (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" single]) (avy-migemo . [(0 3 2) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar]) (avy-menu . [(0 1 1) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single]) (avy . [(0 4 0) ((emacs (24 1)) (cl-lib (0 5))) "tree-based completion" single]) (autothemer . [(0 2 2) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single]) (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single]) (autodisass-llvm-bitcode . [(1 1) nil "Automatically disassemble LLVM bitcode" tar]) (autodisass-java-bytecode . [(1 3) nil "Automatically disassemble Java bytecode" tar]) (auto-yasnippet . [(0 3 0) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single]) (auto-shell-command . [(1 0 2) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single]) (auto-package-update . [(1 6 1) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single]) (auto-minor-mode . [(20180527 1) ((emacs (24 4))) "Enable minor modes by file name and contents" single]) (auto-indent-mode . [(0 126) nil "Auto indent Minor mode" tar]) (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" single]) (auto-complete-sage . [(0 0 5) ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) "An auto-complete source for sage-shell-mode." single]) (auto-complete-pcmp . [(0 0 2) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single]) (auto-complete-nxml . [(0 5 0) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single]) (auto-complete-exuberant-ctags . [(0 0 7) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single]) (auto-complete-clang-async . [(0 5) nil "Auto Completion source for clang for GNU Emacs" single]) (auto-complete . [(1 5 1) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar]) (auto-compile . [(1 4 3) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single]) (auth-source-pass . [(4 0 1) ((emacs (25))) "Integrate auth-source with password-store" single]) (aurora-config-mode . [(0 0 2) nil "Major mode for Apache Aurora configuration files" single]) (aurel . [(0 9) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single]) (auctex-latexmk . [(1 0 2) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single]) (atomic-chrome . [(2 0 0) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single]) (atom-one-dark-theme . [(0 4 0) nil "Atom One Dark color theme" single]) (async . [(1 9 3) nil "Asynchronous processing in Emacs" tar]) (assess . [(0 4) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar]) (asilea . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single]) (arview . [(1 2) nil "extract and view archives in the temporary directory" single]) (artbollocks-mode . [(1 1 2) nil "Improve your writing (especially about art)" single]) (apropospriate-theme . [(0 1 0) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar]) (aproject . [(0 3) nil "Basic project framework for Emacs" tar]) (apples-mode . [(0 0 2) nil "Major mode for editing and executing AppleScript code" tar]) (apiwrap . [(0 5) ((emacs (25))) "api-wrapping macros" single]) (apib-mode . [(0 7) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single]) (apache-mode . [(2 1) nil "major mode for editing Apache configuration files" single]) (anzu . [(0 62) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single]) (anyins . [(0 1 1) nil "Insert content at multiple places from shell command or kill-ring" single]) (anti-zenburn-theme . [(2 5 1) nil "Low-contrast Zenburn-inverted theme" single]) (ansible-vault . [(0 3 4) ((emacs (24 3))) "Minor mode for editing ansible vault files" single]) (ansible-doc . [(0 4) ((emacs (24 3))) "Ansible documentation Minor Mode" single]) (ansible . [(0 1 0) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar]) (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single]) (annoying-arrows-mode . [(0 1 0) nil "Ring the bell if using arrows too much" single]) (annotate . [(0 4 7) nil "annotate files without changing them" single]) (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar]) (angular-mode . [(1 0) nil "No description available." tar]) (android-mode . [(0 5 0) nil "Minor mode for Android application development" single]) (anaphora . [(1 0 4) nil "anaphoric macros providing implicit temp variables" single]) (anaconda-mode . [(0 1 12) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single]) (amx . [(3 2) ((emacs (24 4)) (s (0))) "Alternative M-x with extra features." single]) (amd-mode . [(2 8) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single]) (all-the-icons-ivy . [(0 1 2) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single]) (all-the-icons . [(3 2 0) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar]) (alert . [(1 2) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single]) (alect-themes . [(0 8) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar]) (alda-mode . [(0 2 0) ((emacs (24 0))) "A simple major mode for the musical programming language Alda" single]) (alchemist . [(1 8 2) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar]) (airline-themes . [(1 7) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar]) (ahungry-theme . [(1 10 0) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single]) (ahk-mode . [(1 5 6) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single]) (aggressive-indent . [(1 9 0) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single]) (ag . [(0 47) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single]) (aes . [(0 9) nil "Implementation of AES" single]) (adoc-mode . [(0 6 6) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single]) (addressbook-bookmark . [(1 0) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single]) (add-node-modules-path . [(1 2 0) nil "Add node_modules to your exec-path" single]) (add-hooks . [(3 1 1) nil "Functions for setting multiple hooks" single]) (adafruit-wisdom . [(0 2 1) ((emacs (25))) "Get/display adafruit.com quotes" single]) (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single]) (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." single]) (ace-popup-menu . [(0 2 1) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single]) (ace-pinyin . [(0 2 5) ((ace-jump-mode (2 0)) (avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using ace-jump-mode or avy" single]) (ace-link . [(0 5 0) ((avy (0 4 0))) "Quickly follow links" single]) (ace-jump-zap . [(0 1 2) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single]) (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" single]) (ace-jump-helm-line . [(0 5 0) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single]) (ace-jump-buffer . [(0 4 1) ((avy (0 4 0)) (dash (2 4 0))) "fast buffer switching extension to `avy'" single]) (ace-isearch . [(0 1 4) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single]) (ace-flyspell . [(0 1 3) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single]) (ac-slime . [(0 8) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single]) (ac-rtags . [(2 18) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single]) (ac-racer . [(0 2) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single]) (ac-php-core . [(2 0 5) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar]) (ac-php . [(2 0 5) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single]) (ac-octave . [(0 7) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single]) (ac-mozc . [(0 0 4) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single]) (ac-ispell . [(0 7) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single]) (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single]) (ac-html-csswatcher . [(0 1 7) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single]) (ac-html-bootstrap . [(0 9 3) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar]) (ac-html . [(0 31) ((auto-complete (1 4)) (web-completion-data (0 1))) "auto complete source for html tags and attributes" tar]) (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single]) (ac-haskell-process . [(0 7) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single]) (ac-geiser . [(0 1) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar]) (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single]) (ac-emoji . [(0 2) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar]) (ac-emacs-eclim . [(0 4) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single]) (ac-dcd . [(0 4) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single]) (ac-clang . [(2 1 2) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar]) (ac-cider . [(0 2 3) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single]) (ac-capf . [(0 1) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single]) (ac-alchemist . [(0 1) ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) "auto-complete source for alchemist" single]) (abyss-theme . [(0 7) ((emacs (24))) "A dark theme with contrasting colours." single]) (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single]) (aa-edit-mode . [(0 0 2) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single]) (a . [(0 1 0 -3 4) ((emacs (25))) "Associative data structure functions" single]) (0blayout . [(1 0 2) nil "Layout grouping with ease" single]))
